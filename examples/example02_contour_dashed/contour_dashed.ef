module simulation_region_m
  implicit none
  private

  type, private :: simulation_region_t
    real :: xmin, xmax
    real :: ymin, ymax
  end type simulation_region_t
   
  real <const> :: XMIN_ = -20.0 ! temporal, private
  real <const> :: XMAX_ =  80.0
  real <const> :: YMIN_ = -20.0
  real <const> :: YMAX_ =  30.0

  type(simulation_region_t), public ::  &
    SIMULATION_REGION = simulation_region_t( XMIN_, XMAX_,  &
                                             YMIN_, YMAX_ )
end module simulation_region_m


module grid_m
  use simulation_region_m
  implicit none
  private
  public :: GRID__NX, GRID__NY

  integer <const> :: GRID__NX = 200
  integer <const> :: GRID__NY = 100

  type, public :: grid_t
    real, dimension(GRID__NX) :: pos_x
    real, dimension(GRID__NX) :: pos_y
  contains
    procedure :: initialize => grid__initialize
  end type grid_t

  type(grid_t), public :: Grid

contains

  subroutine grid__initialize( grid )
    class(grid_t) <out> :: grid

    integer :: i, j
    real :: dx, dy

    associate( SREG => SIMULATION_REGION )
      dx = (SREG.xmax-SREG.xmin)/(GRID__NX-1)
      do i = 1, GRID__NX
        grid.pos_x(i) = SREG.xmin + dx*(i-1)
      end do

      dy = (SREG.ymax-SREG.ymin)/(GRID__NY-1)
      do j = 1, GRID__NY
        grid.pos_y(j) = SREG.ymin + dy*(j-1)
      end do
    end associate
  end subroutine grid__initialize

end module grid_m


module pressurechange_m
  use grid_m
  use simulation_region_m
  implicit none
  private

  type, public :: pressurechange_t
    real :: vmax, vmin ! max and mini values
    real, dimension(GRID__NX,GRID__NY) :: field2d
  contains
    procedure :: set => pressurechange__set
  end type pressurechange_t

contains
 
  subroutine pressurechange__set( pc )
    class(pressurechange_t) <out> :: pc

    real <const> :: PI = atan(1.0)*4
    integer :: i, j
    real :: x, y, x_, y_, r_
    real :: scale
    scale = max(SIMULATION_REGION.xmax,  &
                SIMULATION_REGION.ymax )

    do j = 1, GRID__NY
      do i = 1, GRID__NX
        !! source 1
        x = Grid.pos_x(i)
        y = Grid.pos_y(j)
        x_ = x / scale
        y_ = y / scale
        r_ = sqrt(x_**2+y_**2)
        pc.field2d(i,j) = cos(4*PI*r_)*exp(-(r_/4)**2)
        !! source 2
        x_ = (x-SIMULATION_REGION.xmax/2) / scale
        y_ = (y-SIMULATION_REGION.ymax/2) / scale
        r_ = sqrt(x_**2+y_**2)
        pc.field2d(i,j) += 0.5*cos(8*PI*r_)*exp(-(r_/4)**2)
      end do
    end do

    pc.vmax = maxval( pc.field2d(:,:) )
    pc.vmin = minval( pc.field2d(:,:) )
  end subroutine pressurechange__set

end module pressurechange_m


program main
  use simulation_region_m
  use grid_m
  use pressurechange_m
  use vv_m
  use vv_color_m
  use vv_sketch_m
  use vv_slice_scalar_m
  implicit none

  type(pressurechange_t) :: pressurechange
  real :: level ! contour level
  real :: range, dlevel

  type(vv_sketch__sim_pos_t) :: ll ! lower-left corner of sketch
  type(vv_sketch__sim_pos_t) :: ur ! upper-right corner of sketch
  type(vv_sketch_t) :: vv_sketch
  type(vv_slice_scalar_t) :: vv_scalar
  type(vv_color_t) :: color, brown
  integer :: l ! level

  call Grid.initialize
  call pressurechange.set
  call vv_scalar.initialize( 'pressurechange',  &
                             GRID__NX,          &
                             GRID__NY,          &
                             Grid.pos_x,        &
                             Grid.pos_y,        &
                             pressurechange.field2d )
  ll = vv_sketch__sim_pos_t(SIMULATION_REGION.xmin,  &
                            SIMULATION_REGION.ymin)
  ur = vv_sketch__sim_pos_t(SIMULATION_REGION.xmax,  &
                            SIMULATION_REGION.ymax)
  call iSketch_initialize
  call iSketch_message_header( 'Contouring with color and dash' )
  call iSketch_boundary

  range = pressurechange.vmax - pressurechange.vmin
  dlevel = range / 40

  brown = VV_COLOR__CONST.brown

    do l = 1, 40
      level = pressurechange.vmin + dlevel*(real(l)-0.5)
      color = vv_color__real_to_color( vmin=pressurechange.vmin,  &
                                       vmax=pressurechange.vmax,  &
                                       val=level )
      if ( level >= 0 ) then
        call vv_sketch.group_push  ! line color depends on level
          call vv_scalar.vis_contour( vv_sketch,         &
                                      level,             &
                                      line_color=color )
        call vv_sketch.group_pop
      else 
        call vv_sketch.group_push( line_color=brown ) !fixed.
          call vv_scalar.vis_contour( vv_sketch,  &
                                      level,      &
                                      line_dash_array="10, 5" )
        call vv_sketch.group_pop
      end if
    end do

  call iSketch_message_footer
  call vv_scalar.finalize
  call iSketch_finalize

contains

  subroutine iSketch_initialize
    call vv_sketch.initialize( ll, ur, &
                               screen_width_in_pixel=1200.0,  &
                               title='Pressure Change',  &
                               filename='example02_contour_dashed.svg' )
  end subroutine iSketch_initialize

  subroutine iSketch_message_header( string )
    char(len=*) <in> :: string
    call vv_sketch.text( (ll.u+ur.u)/2,  &
                         (ur.v*1.1),  &
                         string,  &
                         font_size_in_pixel=30.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_header

  subroutine iSketch_message_footer
    real :: vmin, vmax
    char(len=200) :: string

    real :: text_v_pos_in_physical_unit
    real :: tsep ! text v position separation betwen lines

    tsep = (ur.v-ll.v)*0.06
    text_v_pos_in_physical_unit = ll.v - tsep

    vmin = pressurechange.vmin
    vmax = pressurechange.vmax
    string = ' vmin = ' // vv__real_to_str13(vmin) //  &
             ' vmax = ' // vv__real_to_str13(vmax)
    call vv_sketch.text( (ll.u+ur.u)/2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
    text_v_pos_in_physical_unit -= tsep
    string = trim(vv_sketch.filename)
    call vv_sketch.text( (ll.u+ur.u)/2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_footer

  subroutine iSketch_finalize
    call vv_sketch.finalize                 
  end subroutine iSketch_finalize

  subroutine iSketch_boundary
    call vv_scalar.mesh.draw( vv_sketch, &
                              line_color=VV_COLOR__CONST.black, &
                              width_in_pixels=2.0 )
  end subroutine iSketch_boundary

end program main
