module simulation_region_m
  implicit none
  private

  type, private :: simulation_region_t
    real :: xmin, xmax
    real :: ymin, ymax
  end type simulation_region_t
   
  real <const> :: XMIN_ = -20.0 ! temporal, private
  real <const> :: XMAX_ =  80.0
  real <const> :: YMIN_ = -20.0
  real <const> :: YMAX_ =  80.0

  type(simulation_region_t), public ::  &
    SIMULATION_REGION = simulation_region_t( XMIN_, XMAX_,  &
                                             YMIN_, YMAX_ )
end module simulation_region_m


module grid_m
  use simulation_region_m
  implicit none
  private
  public :: GRID__NX, GRID__NY

  integer <const> :: GRID__NX = 21
  integer <const> :: GRID__NY = 16
    !! Just for a special flag pattern in this example.

  type, public :: grid_t
    real, dimension(GRID__NX) :: pos_x
    real, dimension(GRID__NX) :: pos_y
    character, dimension(GRID__NX,GRID__NY) :: flag
      !! flag = 'i' (inside the border)
      !!        'o' (outside the border)
      !!        'b' (just on the border)
  contains
    procedure :: initialize => grid__initialize
  end type grid_t

  type(grid_t), public :: Grid

contains

  subroutine grid__initialize( grid )
    class(grid_t) <out> :: grid

    integer :: i, j
    real :: dx, dy

    associate( SREG => SIMULATION_REGION )
      dx = (SREG.xmax-SREG.xmin)/(GRID__NX-1)
      do i = 1, GRID__NX
        grid.pos_x(i) = SREG.xmin + dx*(i-1)
      end do

      dy = (SREG.ymax-SREG.ymin)/(GRID__NY-1)
      do j = 1, GRID__NY
        grid.pos_y(j) = SREG.ymin + dy*(j-1)
      end do
    end associate

    call iSet_flag

  contains

    subroutine iSet_flag
      integer :: nx, ny
      nx = GRID__NX
      ny = GRID__NY  ! just to shorten

      !!>
               GRID__NX=21, GRID__NY=16

          0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      16  o o o o o o o o b b b b b b o o o o o o o
      15  o o o o o o o o b . . . . . b o o o o o o
      14  o o o o o o o o b . . . . . . b o o o o o     
      13  o o o o b b b b b . . . . . . . b o o o o
      12  o o o o b . . . . . . . . . . . . b o o o     
      11  o o o o b . . . . . . . . . . . . . b o o     
      10  b b b b . . . . . . . . . . . . . . . b o
       9  b . . . . . . . . . . . . . . . . . . . b     
       8  b . . . . . . . . . . . . . . . . . . . b     
       7  b . . . . . . . . . . . . . . . . . . . b
       6  o b . . . . . . . . . . . . . . . . . . b     
       5  o o b . . . . . . . . . . . . . . . . . b     
       4  o o o b . . . . . . . . . . . . . . . b o
       3  o o o o b . . . . . . . . . . . . . b o o     
       2  o o o o o b . . . . . . . . . . . . b o o     
       1  o o o o o o b b b b b b b b b b b b b o o

      !!<
      grid.flag(:,:) = 'o' !! default (outside)

      grid.flag( 7:19,    1) = 'b' 

      grid.flag( 6   ,    2) = 'b' 
      grid.flag( 7:18,    2) = 'i' 
      grid.flag(   19,    2) = 'b' 

      grid.flag( 5   ,    3) = 'b' 
      grid.flag( 6:18,    3) = 'i' 
      grid.flag(   19,    3) = 'b' 

      grid.flag( 4   ,    4) = 'b' 
      grid.flag( 5:19,    4) = 'i' 
      grid.flag(   20,    4) = 'b' 

      grid.flag( 3   ,    5) = 'b' 
      grid.flag( 4:20,    5) = 'i' 
      grid.flag(   21,    5) = 'b' 

      grid.flag( 2   ,    6) = 'b' 
      grid.flag( 3:20,    6) = 'i' 
      grid.flag(   21,    6) = 'b' 

      grid.flag( 1   , 7: 9) = 'b' 
      grid.flag( 2:20, 7: 9) = 'i' 
      grid.flag(   21, 7: 9) = 'b' 

      grid.flag( 1: 4,   10) = 'b' 
      grid.flag( 5:19,   10) = 'i' 
      grid.flag(   20,   10) = 'b' 

      grid.flag(    5,   11) = 'b' 
      grid.flag( 6:18,   11) = 'i' 
      grid.flag(   19,   11) = 'b' 

      grid.flag(    5,   12) = 'b' 
      grid.flag( 6:17,   12) = 'i' 
      grid.flag(   18,   12) = 'b' 

      grid.flag( 5: 9,   13) = 'b' 
      grid.flag(10:16,   13) = 'i' 
      grid.flag(   17,   13) = 'b' 

      grid.flag(    9,   14) = 'b' 
      grid.flag(10:15,   14) = 'i' 
      grid.flag(   16,   14) = 'b' 

      grid.flag(    9,   15) = 'b' 
      grid.flag(10:14,   15) = 'i' 
      grid.flag(   15,   15) = 'b' 

      grid.flag( 9:14,   16) = 'b' 

    end subroutine iSet_flag

  end subroutine grid__initialize

end module grid_m


module pressurechange_m
  use grid_m
  use simulation_region_m
  implicit none
  private

  type, public :: pressurechange_t
    real :: vmax, vmin ! max and mini values
    real, dimension(GRID__NX,GRID__NY) :: field2d
  contains
    procedure :: set => pressurechange__set
  end type pressurechange_t

contains
 
  subroutine pressurechange__set( pc )
    class(pressurechange_t) <out> :: pc

    real <const> :: PI = atan(1.0)*4
    integer :: i, j
    real :: x, y, x_, y_, r_
    real :: scale
    scale = max(SIMULATION_REGION.xmax,  &
                SIMULATION_REGION.ymax )

    do j = 1, GRID__NY
      do i = 1, GRID__NX
        !! source 1
        x = Grid.pos_x(i)
        y = Grid.pos_y(j)
        x_ = x / scale
        y_ = y / scale
        r_ = sqrt(x_**2+y_**2)
        pc.field2d(i,j) = cos(4*PI*r_)*exp(-(r_/4)**2)
        !! source 2
        x_ = (x-SIMULATION_REGION.xmax/2) / scale
        y_ = (y-SIMULATION_REGION.ymax/2) / scale
        r_ = sqrt(x_**2+y_**2)
        pc.field2d(i,j) += 0.5*cos(8*PI*r_)*exp(-(r_/4)**2)
      end do
    end do

    pc.vmax = maxval( pc.field2d(:,:) )
    pc.vmin = minval( pc.field2d(:,:) )
  end subroutine pressurechange__set

end module pressurechange_m


program example03_contour_triangle
  use simulation_region_m
  use grid_m
  use pressurechange_m
  use vv_m
  use vv_color_m
  use vv_sketch_m
  use vv_slice_scalar_m
  implicit none

  type(pressurechange_t) :: pressurechange
  real :: level ! contour level
  real :: range, dlevel

  type(vv_sketch_t) :: vv_sketch
  type(vv_slice_scalar_t) :: vv_scalar
  type(vv_color_t) :: color, gray, brown
  integer :: l ! level

  call Grid.initialize
  call pressurechange.set
  call vv_scalar.initialize( 'pressurechange',       &
                             GRID__NX,               &
                             GRID__NY,               &
                             Grid.pos_x,             &
                             Grid.pos_y,             &
                             pressurechange.field2d, &
                             Grid.flag )
  call iSketch_initialize
  call iSketch_message_header( 'Contouring with diagonal border' )
  call iSketch_boundary

  range = pressurechange.vmax - pressurechange.vmin
  dlevel = range / 20

  gray = VV_COLOR__CONST.gray( 0.7 )
  brown = VV_COLOR__CONST.brown

    do l = 1, 20
      level = pressurechange.vmin + dlevel*(real(l)-0.5)
!debugp l, level
      color = vv_color__real_to_color( vmin=pressurechange.vmin,  &
                                       vmax=pressurechange.vmax,  &
                                       val=level )
      if ( level >= 0 ) then
        call vv_sketch.group_push( line_color=gray )
          call vv_scalar.vis_contour( vv_sketch,         &
                                      level,             &
                                      fill_color=color )
        call vv_sketch.group_pop
      else 
        call vv_sketch.group_push( line_color=brown )
          call vv_scalar.vis_contour( vv_sketch,               &
                                      level,                   &
                                      line_dash_array="3, 3" )
        call vv_sketch.group_pop
      end if
    end do

  call iSketch_message_footer
  call vv_scalar.finalize
  call iSketch_finalize

contains

  subroutine iSketch_initialize
    call vv_sketch.initialize( SIMULATION_REGION.xmin,  &
                               SIMULATION_REGION.ymin,  &
                               SIMULATION_REGION.xmax,  &
                               SIMULATION_REGION.ymax,  &
                               screen_width_in_pixel=800.0,  &
                               title='Pressure Change',  &
                               filename='example03_contour_triangle.svg' )
  end subroutine iSketch_initialize

  subroutine iSketch_message_header( string )
    char(len=*) <in> :: string
    call vv_sketch.text( ( SIMULATION_REGION.xmin         &
                         + SIMULATION_REGION.xmax ) / 2,  &
                         SIMULATION_REGION.ymax * 1.05,   &
                         string,  &
                         font_size_in_pixel=30.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_header

  subroutine iSketch_message_footer
    real :: vmin, vmax
    char(len=200) :: string

    real :: text_v_pos_in_physical_unit
    real :: tsep ! text v position separation betwen lines

    tsep = ( SIMULATION_REGION.ymax  &
           - SIMULATION_REGION.ymin ) * 0.04
    text_v_pos_in_physical_unit = SIMULATION_REGION.ymin  &
                                - tsep

    vmin = pressurechange.vmin
    vmax = pressurechange.vmax
    string = ' vmin = ' // vv__real_to_str13(vmin) //  &
             ' vmax = ' // vv__real_to_str13(vmax)
    call vv_sketch.text( ( SIMULATION_REGION.xmin         &
                         + SIMULATION_REGION.xmax ) / 2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
    text_v_pos_in_physical_unit -= tsep
    string = trim(vv_sketch.filename)
    call vv_sketch.text( ( SIMULATION_REGION.xmin         &
                         + SIMULATION_REGION.xmax ) / 2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_footer

  subroutine iSketch_finalize
    call vv_sketch.finalize                 
  end subroutine iSketch_finalize

  subroutine iSketch_boundary
    call vv_scalar.mesh.draw( vv_sketch, &
                              line_color=VV_COLOR__CONST.black, &
                              width_in_pixels=1.0 )
  end subroutine iSketch_boundary

end program example03_contour_triangle
