module constants_m
  use iso_fortran_env
  implicit none

  ! << f90 constants >>
  integer <const> :: SI = int32     ! 単精度整数
  integer <const> :: DI = int64     ! 倍精度整数
  integer <const> :: SR = real32    ! 単精度実数
  integer <const> :: DR = real64    ! 倍精度実数

  ! << Mathematical constants >>
  real(DR) <const> :: PI = atan(1.0_DR)*4
  real(DR) <const> :: TWOPI = PI*2

  real(DR) <const> :: XMIN = -0.74370119_DR
  real(DR) <const> :: XMAX = -0.74358051_DR
  real(DR) <const> :: YMIN =  0.13176699_DR
  real(DR) <const> :: YMAX =  0.13188767_DR

end module constants_m


module grid_m
  use constants_m
  implicit none
  private
  public :: GRID__NX, GRID__NY

  integer <const> :: GRID__NX = 1000
  integer <const> :: GRID__NY = 1000

  type, public :: grid_t
    real(DR), dimension(GRID__NX) :: pos_x
    real(DR), dimension(GRID__NX) :: pos_y
    real(DR), dimension(GRID__NX,GRID__NY) :: val
  contains
    procedure :: initialize => grid__initialize
    procedure :: iteration => grid__iteration
  end type grid_t

  type(grid_t), public :: Grid

contains

  subroutine grid__initialize( grid )
    class(grid_t) <out> :: grid

    integer :: i, j
    real(DR) :: dx, dy

    dx = (XMAX-XMIN)/(GRID__NX-1)
    do i = 1, GRID__NX
      grid.pos_x(i) = XMIN + dx*(i-1)
    end do

    dy = (YMAX-YMIN)/(GRID__NY-1)
    do j = 1, GRID__NY
      grid.pos_y(j) = YMIN + dy*(j-1)
    end do

    do j = 1, GRID__NY
      do i = 1, GRID__NX
        grid.val(i,j) = grid.iteration( i, j )
      end do
    end do
  end subroutine grid__initialize


  function grid__iteration( grid, i, j ) result(ans)
    class(grid_t) <in> :: grid
    integer <in> :: i, j
    integer :: ans

    real(DR) <const> :: CRITICAL = 4.0_DR !! Refer to any textbook.
    integer <const> :: ITERATION_CNT_MAX = 1000
    real(DR) :: cx, cy, x, y, x_temp, y_temp
    integer :: counter

    cx = grid.pos_x(i)
    cy = grid.pos_y(j)
    counter = 0

    x = 0.0_DR
    y = 0.0_DR

    do while ( counter < ITERATION_CNT_MAX ) 
      x_temp = x*x - y*y + cx 
      y_temp = 2*x*y + cy 
      x = x_temp 
      y = y_temp 
      counter += 1 
      if ( ( x*x + y*y ) > CRITICAL ) then
        ans = counter
        return
      end if
    end do
    ans = 0
  end function grid__iteration

end module grid_m


program main
  use constants_m
  use grid_m
  use vv_m
  use vv_color_m
  use vv_sketch_m
  use vv_slice_scalar_m
  implicit none

  real :: level ! contour level
  real :: range, dlevel

  type(vv_sketch_t) :: vv_sketch
  type(vv_slice_scalar_t) :: vv_scalar
  type(vv_color_t) :: color
  integer :: l ! level

  call Grid.initialize
  call vv_scalar.initialize( 'Mandelbrot',  &
                             GRID__NX,       &
                             GRID__NY,       &
                             real(Grid.pos_x),     &
                             real(Grid.pos_y),     &
                             real(Grid.val) )
  call iSketch_initialize
  call iSketch_message_header( 'Mandelbrot' )
  call iSketch_boundary

  range = maxval(Grid.val(:,:))

  dlevel = range / 8
  call vv_sketch.group_push( line_color=VV_COLOR__CONST.black )

    do l = 1, 8
      level = dlevel*real(l)
      color = vv_color__real_to_color( vmin=0.0,               &
                                       vmax=range,  &
                                       val=level )
      call vv_scalar.vis_contour( vv_sketch,  &
                                  level,  &
                                  width_in_pixels=0.1, &
                                  fill_color=color )
    end do

  call vv_sketch.group_pop
  call iSketch_message_footer
  call vv_scalar.finalize
  call iSketch_finalize

contains

  subroutine iSketch_initialize
    call vv_sketch.initialize( real(XMIN),  &
                               real(YMIN),  &
                               real(XMAX),  &
                               real(YMAX),  &
                               screen_width_in_pixel=1000.0,  &
                               title='Fractal',  &
                               filename='example07_mandelbrot.svg' )
  end subroutine iSketch_initialize

  subroutine iSketch_message_header( string )
    char(len=*) <in> :: string
    call vv_sketch.text( ( real(XMIN)         &
                         + real(XMAX) ) / 2,  &
                         real(YMAX)     &
                         + 0.05*real(YMAX-YMIN),   &
                         string,  &
                         font_size_in_pixel=30.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_header

  subroutine iSketch_message_footer
    real :: vmin, vmax
    char(len=200) :: string

    real :: text_v_pos_in_physical_unit
    real :: tsep ! text v position separation betwen lines

    tsep = ( real(YMAX)  &
           - real(YMIN )) * 0.06
    text_v_pos_in_physical_unit = real(YMIN)  &
                                - tsep
    vmin = 0.0
    vmax = range
    string = ' vmin = ' // vv__real_to_str13(vmin) //  &
             ' vmax = ' // vv__real_to_str13(vmax)
    call vv_sketch.text( ( real(XMIN)         &
                         + real(XMAX) ) / 2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
    text_v_pos_in_physical_unit -= tsep
    string = trim(vv_sketch.filename)
    call vv_sketch.text( ( real(XMIN)         &
                         + real(XMAX) ) / 2,  &
                         text_v_pos_in_physical_unit,  &
                         string,  &
                         font_size_in_pixel=20.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
  end subroutine iSketch_message_footer

  subroutine iSketch_finalize
    call vv_sketch.finalize                 
  end subroutine iSketch_finalize

  subroutine iSketch_boundary
    call vv_scalar.mesh.draw( vv_sketch, &
                              line_color=VV_COLOR__CONST.black, &
                              width_in_pixels=2.0 )
  end subroutine iSketch_boundary

end program main
