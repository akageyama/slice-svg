
program test_program
  use vv_m
  use vv_color_m
  use vv_sketch_m
  use vv_slice_scalar_m
  use vv_slice_vector_m
  implicit none


  integer <const> :: NU_VECTOR = 60,   NV_VECTOR = 30
  ! integer <const> :: NU_VECTOR = 240,   NV_VECTOR = 120
  ! integer <const> :: NU_SCALAR = 2001, NV_SCALAR = 1001
  integer <const> :: NU_SCALAR = 61, NV_SCALAR = 31
  ! integer <const> :: NU_SCALAR = 21, NV_SCALAR = 11
  integer :: i, j
  real :: pos_u, pos_v
  real :: pos_r, pos_r_sq, pos_r_cubed
  real :: dipole_moment_p_u, dipole_moment_p_v
  real :: dipole_moment_p_amp
  real :: p_dot_r, factor
  real :: du_vector, dv_vector
  real :: du_scalar, dv_scalar
  real :: vector_normalization_factor
  real :: attenuation
  real :: monopole_charge_qa
  real :: dipole_moment_angle_from_v_axis 
  real, dimension(NU_SCALAR,NV_SCALAR) :: pressure
  real, dimension(NU_VECTOR,NV_VECTOR) :: velocity_u, velocity_v

  real :: voi_radius_a, voi_radius_a_cubed
  real :: voi_radius_b0
  real :: voi_radius_b1

  real :: umin = -2*PI
  real :: umax = +2*PI
  real :: vmin = -PI
  real :: vmax = +PI

! cross_section_lower_left.u = umin
! cross_section_lower_left.v = vmin
! cross_section_upper_right.u = umax
! cross_section_upper_right.v = vmax

  call iSample_text_and_colors
  call iSample_lines

  ! sample scalar field
  du_scalar = (umax-umin)/(NU_SCALAR-1)
  dv_scalar = (vmax-vmin)/(NV_SCALAR-1)
  do j = 1, NV_SCALAR
    do i = 1, NU_SCALAR
      pos_u = umin + du_scalar*(i-1)
      pos_v = vmin + dv_scalar*(j-1)
!     pressure(i,j) = exp(-3*(pos_u**2+pos_v**2)/(umax**2))-0.8
!     pressure(i,j) = -exp(-3*(pos_u**2+pos_v**2)/(umax**2))+0.8

      pressure(i,j) = exp(-3*((pos_u-umax/2)**2+(pos_v+vmax/2)**2)/(umax**2))-0.8 &
                    + exp(-3*((pos_u+umax/2)**2+(pos_v-vmax/2)**2)/(umax**2))-0.8 &
                    - 0.4*sin(pos_u)*sin(pos_v)

!      pressure(i,j) = exp(-3*(pos_u**2+pos_v**2)/(umax**2))  &
!                    - exp(-20*(pos_u**2+pos_v**2)/(umax**2))
    end do
  end do
  call iSample_scalar( pressure )

  ! sample vector field
  ! we are setting a dipole field with a monopole in side of it

  monopole_charge_qa = 1.0

  voi_radius_a = (vmax-vmin)/6
  voi_radius_a_cubed = voi_radius_a**3
  voi_radius_b0 = 2.0**(1.0/3.0) * voi_radius_a
  voi_radius_b1 = 2.0**(1.0/2.0) * voi_radius_a

  !
  !   monopole_charge_qa/(4*pi*a_cubed) = dipole_moment/(4*pi*b1_cubed))
  !
  !   dipole_moment = monopole_charge_qa * (b1/a)**3

  dipole_moment_p_amp = monopole_charge_qa * (voi_radius_b1/voi_radius_a)**3
  dipole_moment_angle_from_v_axis = PI/6
    !   dipole_moment = (pu, pv)
  dipole_moment_p_u = dipole_moment_p_amp * sin(dipole_moment_angle_from_v_axis)
  dipole_moment_p_v = dipole_moment_p_amp * cos(dipole_moment_angle_from_v_axis)

  du_vector = (umax-umin)/(NU_VECTOR-1)
  dv_vector = (vmax-vmin)/(NV_VECTOR-1)  

  do j = 1, NV_VECTOR
    do i = 1, NU_VECTOR
      pos_u = umin + du_vector*(i-1)
      pos_v = vmin + dv_vector*(j-1)
      pos_r_sq = pos_u**2+pos_v**2
      pos_r = sqrt(pos_r_sq)
      pos_r_cubed = pos_r**3
      p_dot_r = dipole_moment_p_u*pos_u   &
              + dipole_moment_p_v*pos_v

      if ( pos_r < voi_radius_a ) then
        factor = - monopole_charge_qa / (4*PI*voi_radius_a_cubed)
        velocity_u(i,j) = factor * pos_u
        velocity_v(i,j) = factor * pos_v
      else if ( pos_r <= voi_radius_b0 ) then
        factor = monopole_charge_qa / (4*PI*voi_radius_a_cubed) &
               * ( 1.0 - 2*voi_radius_a_cubed/pos_r_cubed )
        velocity_u(i,j) = factor * pos_u
        velocity_v(i,j) = factor * pos_v
      else if ( pos_r <= voi_radius_b1 ) then
        factor = - 1.0/(4*PI*pos_r_sq)
        attenuation = ( pos_r - voi_radius_b0 ) / ( voi_radius_b1 - voi_radius_b0 )
        velocity_u(i,j) = attenuation * factor * ( dipole_moment_p_u - 2*(p_dot_r/pos_r_sq)*pos_u )
        velocity_v(i,j) = attenuation * factor * ( dipole_moment_p_v - 2*(p_dot_r/pos_r_sq)*pos_v )
      else 
        factor = - 1.0/(4*PI*pos_r_sq)
        velocity_u(i,j) = factor * ( dipole_moment_p_u - 2*(p_dot_r/pos_r_sq)*pos_u )
        velocity_v(i,j) = factor * ( dipole_moment_p_v - 2*(p_dot_r/pos_r_sq)*pos_v )
      end if  

    end do
  end do

  call iScale_vects_by_log( NU_VECTOR, NV_VECTOR, velocity_u, velocity_v )

!!>
  !
  ! vector field ==> log of the vector field
  !
  do j = 1, NV_VECTOR
    do i = 1, NU_VECTOR
      vector_amplitude_original = sqrt( velocity_u(i,j)**2  &
                                      + velocity_v(i,j)**2 )
      vector_normalization_factor = log(1.0+1000*vector_amplitude_original)  &
                                          / vector_amplitude_original
      velocity_u(i,j) *= vector_normalization_factor
      velocity_v(i,j) *= vector_normalization_factor
    end do
  end do
!!<
      
  vector_normalization_factor = maxval( sqrt( velocity_u**2 + velocity_v**2 ) )
  velocity_u(:,:) = velocity_u(:,:) / vector_normalization_factor
  velocity_v(:,:) = velocity_v(:,:) / vector_normalization_factor
  call iSample_vector( velocity_u, velocity_v )

contains


  subroutine iScale_vects_by_log( nu, nv, vec_u, vec_v )
    integer <in> :: nu, nv
    real, dimension(nu,nv) <io> :: vec_u, vec_v

    real :: vec_amp_original
    real :: amp_factor = 1000.0
    real :: norm_factor

    do j = 1, nv
      do i = 1, nu
        vec_amp_original = sqrt( vec_u(i,j)**2  &
                                        + vec_v(i,j)**2 )
        norm_factor = log(1.0+amp_factor*vec_amp_original)  &
                                       / vec_amp_original
        velocity_u(i,j) *= norm_factor
        velocity_v(i,j) *= norm_factor
      end do
    end do
  end subroutine iScale_vects_by_log


  subroutine iSample_lines
    type(vv_sketch_t) :: vv_sketch
    type(vv_sketch__sim_pos_t) :: ll ! lower left
    type(vv_sketch__sim_pos_t) :: ur ! upper right
    type(vv_color_t) :: black, gray
    
    black = VV_COLOR__CONST.black
    gray = VV_COLOR__CONST.gray(0.7)

    ll = vv_sketch__sim_pos_t(0.0, 0.0)
    ur = vv_sketch__sim_pos_t(1.0, 1.0)

    call vv_sketch.initialize( ll, ur, &
                               screen_width_in_pixel=1000.0,  &
                               title='Line Samples',  &
                               filename='sample_line.svg' )

    call vv_sketch.line( ll, ur,  &
                         line_width_in_pixel=2.0,  &
                         color=black )

    call vv_sketch.group_push( line_width_in_pixel=1.0,  &
                            line_color=gray )
      call vv_sketch.line( ll.u, ll.v,  &
                           ur.u, ll.v )
      call vv_sketch.line( ll.u, ur.v,  &
                           ur.u, ll.v )
    call vv_sketch.group_pop
    call vv_sketch.finalize()                   
  end subroutine iSample_lines


  subroutine iSample_text_and_colors
    type(vv_sketch_t) :: vv_sketch
    type(vv_sketch__sim_pos_t) :: ll ! lower left
    type(vv_sketch__sim_pos_t) :: ur ! upper right

    ll = vv_sketch__sim_pos_t(0.0, 0.3)
    ur = vv_sketch__sim_pos_t(1.0, 1.6)
    call vv_sketch.initialize( ll, ur, &
                               screen_width_in_pixel=1000.0,  &
                               title='Text and Color Samples',  &
                               filename='sample_text_color.svg' )
    call vv_sketch.rectangle( ll, ur,  &
                              line_width_in_pixel=1.0,  &
                              line_color=vv_color_t(0.3, 0.4, 0.8) )
    call vv_sketch.text( 0.5, 1.5,  &
                         vv_sketch.title,  &
                         font_size_in_pixel=50.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
    call vv_sketch.text( 0.1, 1.4,  &
                         'black',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.black )
    call vv_sketch.text( 0.1, 1.3,  &
                         'red',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.red )
    call vv_sketch.text( 0.1, 1.2,  &
                         'green',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.green )
    call vv_sketch.text( 0.1, 1.1,  &
                         'blue',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.blue )
    call vv_sketch.text( 0.1, 1.0,  &
                         'magenta',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.magenta )
    call vv_sketch.text( 0.1, 0.9,  &
                         'yellow',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.yellow )
    call vv_sketch.text( 0.1, 0.8,  &
                         'cyan',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.cyan )
    call vv_sketch.text( 0.1, 0.7,  &
                         'gray(0.9)',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.gray(0.9) )
    call vv_sketch.text( 0.1, 0.6,  &
                         'gray(0.8)',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.gray(0.8) )
    call vv_sketch.text( 0.1, 0.5,  &
                         'gray(0.6)',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.gray(0.6) )
    call vv_sketch.text( 0.1, 0.4,  &
                         'gray(0.4)',  &
                         font_size_in_pixel=40.0,  &
                         text_anchor='start', &
                         color=VV_COLOR__CONST.gray(0.4) )
    call vv_sketch.finalize()                   
  end subroutine iSample_text_and_colors


  subroutine iSample_scalar( pressure )
    real, dimension(NU_SCALAR,NV_SCALAR) <in> :: pressure

    type(vv_sketch_t) :: vv_sketch
    type(vv_sketch__sim_pos_t) :: ll ! lower left
    type(vv_sketch__sim_pos_t) :: ur ! upper right
    type(vv_color_t) :: magenta

    type(vv_slice_scalar_t) :: vv_slice_pressure
    real :: level_min, level_max, dlevel, level
    type(vv_color_t) :: color
    integer :: l

    integer :: i, j
    integer :: i2, j2
    real, dimension(NU_SCALAR) :: grid_pos_u
    real, dimension(NV_SCALAR) :: grid_pos_v
    character, dimension(NU_SCALAR,NV_SCALAR) :: grid_flag

    magenta = VV_COLOR__CONST.magenta

    ll = vv_sketch__sim_pos_t(umin, vmin)
    ur = vv_sketch__sim_pos_t(umax, vmax)

    do i = 1, NU_SCALAR
      grid_pos_u(i) = umin + (umax-umin)/(NU_SCALAR-1)*(i-1)
    end do
    do j = 1, NV_SCALAR
      grid_pos_v(j) = vmin + (vmax-vmin)/(NV_SCALAR-1)*(j-1)
    end do

    grid_flag(:,:) = 'o'

!! case 1: basic case
!    do j = 2, NV_SCALAR-1
!      do i = 2, NU_SCALAR-1
!        grid_flag(i,j) = 'i'
!      end do
!    end do
!    grid_flag(1:NU_SCALAR,        1) = 'b'
!    grid_flag(1:NU_SCALAR,NV_SCALAR) = 'b'
!    grid_flag(        1,1:NV_SCALAR) = 'b'
!    grid_flag(NU_SCALAR,1:NV_SCALAR) = 'b'

!! case 2: The corners are diagonal.
!    do j = 2, NV_SCALAR-1
!      do i = 2, NU_SCALAR-1
!        grid_flag(i,j) = 'i'
!      end do
!    end do
!    grid_flag(2:NU_SCALAR-1,        1) = 'b'
!    grid_flag(2:NU_SCALAR-1,NV_SCALAR) = 'b'
!
!    grid_flag(        1,2:NV_SCALAR-1) = 'b'
!    grid_flag(NU_SCALAR,2:NV_SCALAR-1) = 'b'
!
!    grid_flag(          1,        1) = 'o'
!    grid_flag(NU_SCALAR  ,        1) = 'o'
!    grid_flag(NU_SCALAR  ,NV_SCALAR) = 'o'
!    grid_flag(          1,NV_SCALAR) = 'o'

!! case 3: Only left-half
!    do j = 2, NV_SCALAR-1
!      do i = 2, NU_SCALAR/2-1
!        grid_flag(i,j) = 'i'
!      end do
!    end do
!    grid_flag(2:NU_SCALAR/2-2,            1) = 'E'
!    grid_flag(NU_SCALAR/2    ,2:NV_SCALAR-2) = 'N'
!    grid_flag(2:NU_SCALAR/2-1,    NV_SCALAR) = 'W'
!    grid_flag(              1,2:NV_SCALAR-1) = 'S'
!    grid_flag(NU_SCALAR/2-1  ,            1) = '1'
!    grid_flag(NU_SCALAR/2    ,  NV_SCALAR-1) = '7'
!    grid_flag(              2,  NV_SCALAR  ) = '5'
!    grid_flag(              1,            2) = '3'
!!    grid_flag(NU_SCALAR/2    ,            1) = 'N'
!!    grid_flag(NU_SCALAR/2    ,  NV_SCALAR  ) = 'W'
!!    grid_flag(              1,  NV_SCALAR  ) = 'S'
!!    grid_flag(              1,            1) = 'E'

!! case 4: triangle
!    grid_flag(:,:) = 'o'
!    do j = 2, 20
!      do i = 2, 20
!        if ( i + j < 20 ) then
!          grid_flag(i,j) = 'i'
!        else if ( i + j == 20 ) then
!          grid_flag(i,j) = 'b'
!        end if
!      end do
!    end do
!    grid_flag(2:20-2,     1) = 'b'
!    grid_flag(     2,  20-2) = 'b'
!    grid_flag(     1,1:20-2) = 'b'

! case 5: diamond
    grid_flag(:,:) = 'o'
    do j = 1, NV_SCALAR
      j2 = j - 15
      do i = 1, NU_SCALAR
        i2 = i - 30
        if ( abs(i2) + abs(j2) < 10 ) then
          grid_flag(i,j) = 'i'
        else if ( abs(i2) + abs(j2) <= 10 ) then
          if ( +(i2) + (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( -(i2) + (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( -(i2) - (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( +(i2) - (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          end if
        end if
      end do
    end do
    grid_flag(30   ,15-10) = 'b'
    grid_flag(30+10,15   ) = 'b'
    grid_flag(30   ,15+10) = 'b'
    grid_flag(30-10,15   ) = 'b'

    !!>
    call vv_slice_pressure.initialize( 'pressure',  &
                                       NU_SCALAR,   &
                                       NV_SCALAR,  &
                                       grid_pos_u,  &
                                       grid_pos_v,  &
                                       pressure,    &
                                       grid_flag )
    !!<
    call vv_slice_pressure.initialize( 'pressure',  &
                                       NU_SCALAR,   &
                                       NV_SCALAR,  &
                                       grid_pos_u,  &
                                       grid_pos_v,  &
                                       pressure )
    call vv_sketch.initialize( ll, ur, &
                               screen_width_in_pixel=1200.0,  &
                               title='Pressure Field',  &
                               filename='sample_scalar.svg' )
    call vv_sketch.text( (ll.u+ur.u)/2,  &
                         (ur.v*1.1),  &
                         vv_sketch.title,  &
                         font_size_in_pixel=30.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )
    ! --<boundary curve>--
    call vv_slice_pressure.mesh.draw( vv_sketch, &
                                      line_color=VV_COLOR__CONST.black,  &
                                      width_in_pixels=2.0 )
    ! --</boundary curve>--

    call vv_sketch.group_push( line_color=magenta,  &
                               line_width_in_pixel=2.0 )
    level_min = minval(vv_slice_pressure.val_vert(:,:))
    level_max = maxval(vv_slice_pressure.val_vert(:,:))
    dlevel = (level_max-level_min)/10
    do l = 1, 10
      level = level_min + dlevel*(real(l)-0.5)
      color = vv_color__normalized_real_to_color( (level-level_min)/(level_max-level_min) )
      call vv_slice_pressure.vis_contour( vv_sketch, level, line_color=VV_COLOR__CONST.black, fill_color=color )
!      call vv_slice_pressure.vis_contour( vv_sketch, level, line_color=color )
    end do

      !!>
        call vv_slice_pressure.vis_contour( vv_sketch, 0.6, fill_color=VV_COLOR__CONST.gray(0.9) )
        call vv_slice_pressure.vis_contour( vv_sketch, 0.9, fill_color=VV_COLOR__CONST.yellow )
      !!<
    call vv_sketch.group_pop
    call vv_slice_pressure.finalize
!   call vv_sketch.rectangle( ll, ur,  &
!                             line_width_in_pixel=2.0, &
!                             line_color=VV_COLOR__CONST.black )
    call vv_sketch.finalize                 
  end subroutine iSample_scalar


  subroutine iSample_vector( velocity_u, velocity_v )
    real, dimension(NU_VECTOR,NV_VECTOR) <in> :: velocity_u,  &
                                                 velocity_v

    type(vv_sketch_t) :: vv_sketch
    type(vv_sketch__sim_pos_t) :: ll ! lower left
    type(vv_sketch__sim_pos_t) :: ur ! upper right

    type(vv_slice_vector_t) :: vv_slice_velocity

    real, dimension(NU_VECTOR) :: grid_pos_u
    real, dimension(NV_VECTOR) :: grid_pos_v
    character, dimension(NU_VECTOR,NV_VECTOR) :: grid_flag
    integer :: j, j2, i, i2
    
    ll = vv_sketch__sim_pos_t(umin, vmin)
    ur = vv_sketch__sim_pos_t(umax, vmax)

    do i = 1, NU_VECTOR
      grid_pos_u(i) = umin + (umax-umin)/(NU_VECTOR-1)*(i-1)
    end do
    do j = 1, NV_VECTOR
      grid_pos_v(j) = vmin + (vmax-vmin)/(NV_VECTOR-1)*(j-1)
    end do

    grid_flag(:,:) = 'o'
    do j = 1, NV_VECTOR
      j2 = j - 15
      do i = 1, NU_VECTOR
        i2 = i - 30
        if ( abs(i2) + abs(j2) < 10 ) then
          grid_flag(i,j) = 'i'
        else if ( abs(i2) + abs(j2) <= 10 ) then
          if ( +(i2) + (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( -(i2) + (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( -(i2) - (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          else if ( +(i2) - (j2) == 10 )  then
            grid_flag(i,j) = 'b'
          end if
        end if
      end do
    end do
    grid_flag(30   ,15-10) = 'b'
    grid_flag(30+10,15   ) = 'b'
    grid_flag(30   ,15+10) = 'b'
    grid_flag(30-10,15   ) = 'b'
    
    call vv_slice_velocity.initialize( 'velocity',  &
                                       NU_VECTOR,   &
                                       NV_VECTOR,   &
                                       grid_pos_u,  &
                                       grid_pos_v,  &
                                       velocity_u,  &
                                       velocity_v,  &
                                       grid_flag )
    call vv_sketch.initialize( ll, ur, &
                               screen_width_in_pixel=1200.0,  &
                               title='Velocity Field',  &
                               filename='sample_vector.svg',  &
                               write_arrow_template=.true. )
    call vv_sketch.text( (ll.u+ur.u)/2,  &
                         (ur.v*1.1),  &
                         vv_sketch.title,  &
                         font_size_in_pixel=30.0,  &
                         text_anchor='middle', &
                         color=VV_COLOR__CONST.black )

    call vv_sketch.group_push( line_color=VV_COLOR__CONST.blue )
    ! --<boundary curve>--
    call vv_slice_velocity.mesh.draw( vv_sketch, &
                                      line_color=VV_COLOR__CONST.black,  &
                                      width_in_pixels=2.0 )
    ! --</boundary curve>--
    call vv_slice_velocity.vis_arrows( vv_sketch )
    call vv_sketch.group_pop
    call vv_slice_velocity.finalize
    call vv_sketch.finalize                 
  end subroutine iSample_vector

end program test_program
