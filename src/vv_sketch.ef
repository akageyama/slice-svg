module vv_sketch_m
  use vv_color_m
  use vv_svglib_m
  use ut_m
  implicit none
  private

  type, public :: vv_sketch__sim_pos_t
    real :: u, v
  end type vv_sketch__sim_pos_t

  type :: screen_pos_t
    real :: x, y
  end type screen_pos_t

  type screen_size_t
    real :: width, height
    real :: margin_x, margin_y
  end type screen_size_t

  type, public :: vv_sketch_t
    type(screen_size_t) :: screen_size
    real :: u_max, u_min, v_max, v_min
    real :: dxdu, dydv
    char(len=300) :: title
    char(len=300) :: filename
    type(vv_svglib_t) :: vv_svglib
  contains
    procedure :: initialize => vv_sketch__initialize
    procedure :: finalize => vv_sketch__finalize
    procedure :: to_screen_pos => vv_sketch__to_screen_pos
    procedure :: group_push => vv_sketch__group_push
    procedure :: group_pop => vv_sketch__group_pop
    procedure :: text => vv_sketch__text
    procedure :: polygon => vv_sketch__polygon
    procedure :: path => vv_sketch__path
    procedure :: rectangle => vv_sketch__rectangle
    procedure :: arrow => vv_sketch__arrow
    ! line
    procedure, private :: line_r4
    procedure, private :: line_pos2
    generic :: line => line_r4, line_pos2
  end type vv_sketch_t


contains


  subroutine line_r4( this, u1, v1,  &
                            u2, v2,  &
                            line_width_in_pixel,   &
                            color,   &
                            no_draw )
    class(vv_sketch_t) <in> :: this
    real <in> :: u1, v1 ! line start in simulation coords.
    real <in> :: u2, v2 ! line finish in simulation coords.
    real <optin> :: line_width_in_pixel
    type(vv_color_t) <optin> :: color
    logical <optin> :: no_draw

    char(len=7) :: color_code

    type(screen_pos_t) :: start, finish

    start  = this.to_screen_pos( vv_sketch__sim_pos_t(u1,v1) )
    finish = this.to_screen_pos( vv_sketch__sim_pos_t(u2,v2) )

    color_code = ''  ! Initialization. Will be used below.

    if ( present(no_draw) ) then
      if ( no_draw ) then
        color_code = 'none'
      end if
    else if ( present(color) ) then
      color_code = color.to_code()
    end if

    if ( color_code /= '' ) then
      call this.vv_svglib.line( start.x,  start.y,         &
                                finish.x, finish.y,        &
                                color=color_code,          &
                                width=line_width_in_pixel )
    else 
      call this.vv_svglib.line( start.x,  start.y,         &
                                finish.x, finish.y,        &
                                width=line_width_in_pixel )
    end if

  end subroutine line_r4


  subroutine line_pos2( this, pos1,    &
                              pos2,    &
                              line_width_in_pixel,   &
                              color,   &
                              no_draw )
    class(vv_sketch_t) <in> :: this
    type(vv_sketch__sim_pos_t) <in> :: pos1 ! line start in simulation coords.
    type(vv_sketch__sim_pos_t) <in> :: pos2 ! line finish in simulation coords.
    real <optin> :: line_width_in_pixel
    type(vv_color_t) <optin> :: color
    logical <optin> :: no_draw

    call line_r4( this, pos1.u, pos1.v,                           &
                        pos2.u, pos2.v,                           &
                        line_width_in_pixel=line_width_in_pixel,  &
                        color=color,                              &
                        no_draw=no_draw)

  end subroutine line_pos2


  subroutine vv_sketch__arrow( this, u,        &
                                     v,        &
                                     vect_u,   &
                                     vect_v )
    class(vv_sketch_t) <io> :: this
    real <in> :: u, v   ! position of the arrow in sim coords
    real <in> :: vect_u, vect_v  ! vector components in sim 

    type(screen_pos_t) screen_pos, screen_vec
    real :: vect_amp, factor
    real <const> :: TOO_SMALL = 1.e-10  ! a tiny value.

    vect_amp = sqrt( vect_u**2 + vect_v**2 )
    if ( vect_amp < TOO_SMALL ) return

    factor = VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT
    screen_pos = this.to_screen_pos( vv_sketch__sim_pos_t(u,v) )
    screen_vec.x =  vect_u * factor
    screen_vec.y = -vect_v * factor
    call this.vv_svglib.arrow( screen_pos.x,     &
                               screen_pos.y,     &
                               screen_vec.x,     &
                               screen_vec.y )
  end subroutine vv_sketch__arrow


  subroutine vv_sketch__group_push( this, id,                   &
                                          visibility,           &
                                          line_type,            &
                                          line_width_in_pixel,  &
                                          line_color,           &
                                          line_opacity,         &
                                          fill_color,           &
                                          fill_opacity )
    class(vv_sketch_t) <io> :: this
    char(len=*) <optin> :: id
    char(len=*) <optin> :: visibility ! 'visible' or 'hidden'
    char(len=6) <optin> :: line_type  ! 'dotted' or
                                      ! 'dashed'
    real <optin> :: line_width_in_pixel
    real <optin> :: line_opacity
    type(vv_color_t) <optin> :: line_color
    type(vv_color_t) <optin> :: fill_color
    real <optin> :: fill_opacity

    integer :: nop ! number of options
    integer <const> :: MAX_NOP = 20
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_long
    integer :: n

    call iClear_str

    nop = 0

    if ( present(id) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'id=', id )
    end if

    if ( present(visibility) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'visibility=', visibility )
    end if

    if ( present(line_color) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'stroke=', line_color.to_code() )
    end if

    if ( present(fill_color) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'fill=', fill_color.to_code() )
    end if

    if ( present(line_width_in_pixel) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'stroke-width=', line_width_in_pixel )
    end if

    if ( present(line_opacity) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'stroke-opacity=', line_opacity )
    end if    

    if ( present(fill_opacity) ) then
      nop += 1
      str(nop) = vv_svglib__text_line( 'fill-opacity=', fill_opacity )
    end if    

    if ( present(line_type) ) then
      nop += 1
      select case (line_type)
        case ('dotted')
          str(nop) = 'stroke-dasharray="5 5"'
        case ('dashed')
          str(nop) = 'stroke-dasharray="10 5"'
        case default
          call ut__fatal( '__MODULE__(__LINE__): case error.' )
      end select
    end if    

    if ( nop > 0 ) then
      str_long = ''
      do n = 1, nop
        str_long = trim(str_long) // ' ' // trim(str(n))
      end do
      call this.vv_svglib.group_push( trim(adjustl(str_long)) )
    end if

  contains

    subroutine iClear_str
      nop = 0
      str(:) = ''
    end subroutine iClear_str

  end subroutine vv_sketch__group_push


  subroutine vv_sketch__group_pop( this )
    class(vv_sketch_t) <io> :: this

    call this.vv_svglib.group_pop
  end subroutine vv_sketch__group_pop


  subroutine vv_sketch__text( this, u, v,                &
                                    string,              &
                                    font_size_in_pixel,  &
                                    text_anchor,         &
                                    color )

    class(vv_sketch_t) <io> :: this
    real <in> :: u, v
    char(len=*) <in> :: string
    real <in> :: font_size_in_pixel
    char(len=*) <in> :: text_anchor   ! start/ middle / end
    type(vv_color_t) <optin> :: color

    type(screen_pos_t) :: pos
    char(len=7) :: color_code

    call ut__assert( text_anchor == 'start'  .or.     &
                     text_anchor == 'middle' .or.     &
                     text_anchor == 'end',            &
                     '__MODULE__(__LINE__): text_anchor error.' )

    pos = this.to_screen_pos( vv_sketch__sim_pos_t(u,v) )
   
    if ( present(color) ) then
      color_code = color.to_code()
      call this.vv_svglib.text( pos.x, pos.y,            &
                                string,                  &
                                font_size_in_pixel,      &
                                color=color_code,        &
                                text_anchor=text_anchor )
    else
      call this.vv_svglib.text( pos.x, pos.y,        &
                                string,              &
                                font_size_in_pixel,  &
                                text_anchor=text_anchor )
    end if
  end subroutine vv_sketch__text


  function vv_sketch__to_screen_pos( this, vv_sketch_pos ) result(screen_pos)
    class(vv_sketch_t) <in> :: this
    type(vv_sketch__sim_pos_t) <in> :: vv_sketch_pos
    type(screen_pos_t) :: screen_pos

    !!>
                 umin   u           umax
             . mx .     .            .    
         .....____._____.____________.____
          my |    .     .            .    |
             |    +$ $ $. $ $ $ $ $ U-R...|...vmax
             |    $     .            $    |  .\
             |    $     .            $    |  . delta_v
             |    $     .            $    |  ./
             |    $.....*............$....|...v
             |    $     .\__(u,v)    $    |
             |    $     .            $    |
             |...L-L $ $.$ $ $ $ $ $ $....|...vmin
             |____._____._________________|
                  .     . 
                  .......
                  delta_u
    !!<
    real :: delta_u, delta_v 
    real :: mx, my   ! margin x and y
    delta_u = vv_sketch_pos.u - this.u_min
    delta_v = this.v_max - vv_sketch_pos.v
    mx = this.screen_size.margin_x
    my = this.screen_size.margin_y
    screen_pos.x = mx + this.dxdu*delta_u
    screen_pos.y = my + this.dydv*delta_v
  end function vv_sketch__to_screen_pos


  subroutine vv_sketch__initialize( this,                  &
                                    lower_left_in_phys,    &
                                    upper_right_in_phys,   &
                                    screen_width_in_pixel, &
                                    title,                 &
                                    filename )
    class(vv_sketch_t) <out> :: this
    type(vv_sketch__sim_pos_t) <in> :: lower_left_in_phys,  &
                                       upper_right_in_phys
    real <in> :: screen_width_in_pixel
    char(len=*) <in> :: title
    char(len=*) <in> :: filename

    real :: draw_area_width_in_phys,   &
            draw_area_height_in_phys
    real :: draw_area_width_in_pixel,  &
            draw_area_height_in_pixel
    real :: aspect_ratio

    this.u_max = upper_right_in_phys.u
    this.u_min =  lower_left_in_phys.u
    this.v_max = upper_right_in_phys.v
    this.v_min =  lower_left_in_phys.v

    call ut__assert( this.u_max > this.u_min .and.  &
                     this.v_max > this.v_min,       &
                     '__MODULE__(__LINE__): size error.' )

    this.title = title
    this.filename = filename

    !!>
        In the following fig, 
           L = lower_left (in meters),
           U = upper_right (in meters),
        are coordinates in the simulation
        data with physical unit, such as meters.

          mx = margin in x (in pixels)
          my = margin in y (in pixels)
              
             | mx |                  | mx |
         --- +----------------------------+---
          my |    |      title       |    |    \
         --- | ---+------------------U--- |     s  
             |    |                  |    |     c h
             |    |                  |    |     r e
             |    |                  |    |     e i
             |    |                  |    |     e h
         --- | ---L------------------+--- |     n g
          my |    |                  |    |    /  t
         --- +----------------------------+---     .
             |                            |         .
             |<------ screen width ------>|    (in pixels)
                      (in pixels)
    !!<

    draw_area_width_in_phys  = this.u_max - this.u_min
    draw_area_height_in_phys = this.v_max - this.v_min
    aspect_ratio = draw_area_height_in_phys  &
                 / draw_area_width_in_phys

    this.screen_size.width = screen_width_in_pixel
    this.screen_size.margin_x = 0.1*screen_width_in_pixel
    this.screen_size.margin_y = this.screen_size.margin_x 

    ! Keeping the aspect ratio,
    draw_area_width_in_pixel = screen_width_in_pixel     &
                             - 2*this.screen_size.margin_x
    draw_area_height_in_pixel = draw_area_width_in_pixel &
                              * aspect_ratio
    this.screen_size.height = draw_area_height_in_pixel  &
                            + 2*this.screen_size.margin_y

    this.dxdu = draw_area_width_in_pixel / draw_area_width_in_phys
    this.dydv = this.dxdu

    call ut__assert( this.dxdu > 0.0 .and. &
                     this.dydv > 0.0,      &
                     '__MODULE__(__LINE__): Something is strange.' )

    call this.vv_svglib.open( this.filename,           &
                              this.screen_size.width,  &
                              this.screen_size.height )

    call this.vv_svglib.arrow_template
  end subroutine vv_sketch__initialize


  subroutine vv_sketch__finalize( this )
    class(vv_sketch_t) <in> :: this

    call this.vv_svglib.close
  end subroutine vv_sketch__finalize


  subroutine vv_sketch__polygon( this, nverts,          &
                                       verts_sim,       &
                                       width_in_pixels, &
                                       line_color,      &
                                       fill_color )
    class(vv_sketch_t) <io> :: this
    integer <in> :: nverts
    type(vv_sketch__sim_pos_t), dimension(nverts) <in> :: verts_sim
    real <optin> :: width_in_pixels
    type(vv_color_t) <optin> :: line_color
    type(vv_color_t) <optin> :: fill_color

    type(screen_pos_t) :: vert_on_screen
    real, dimension(nverts) :: verts_screen_x,  &
                               verts_screen_y
    char(len=7) :: line_color_code , fill_color_code
    integer :: i

    do i = 1, nverts
      vert_on_screen = this.to_screen_pos( verts_sim(i) )
      verts_screen_x(i) = vert_on_screen.x
      verts_screen_y(i) = vert_on_screen.y
    end do

    if ( present(line_color) ) then 
      line_color_code = line_color.to_code()
    end if

    if ( present(fill_color) ) then
      fill_color_code = fill_color.to_code()
    else
      fill_color_code = 'none'
    end if

    if ( present(line_color) ) then
      call this.vv_svglib.polygon( nverts,                       &
                                   verts_screen_x,               &
                                   verts_screen_y,               &
                                   width_in_pixels,              &
                                   line_color=line_color_code,   &
                                   fill_color=fill_color_code )
    else
      call this.vv_svglib.polygon( nverts,                     &
                                   verts_screen_x,             &
                                   verts_screen_y,             &
                                   width_in_pixels,            &
                                   fill_color=fill_color_code )
    end if
  end subroutine vv_sketch__polygon



  subroutine vv_sketch__path( this,            &
                              nverts,          &
                              path_directive,  &
                              verts_sim,       &
                              width_in_pixels, &
                              line_color,      &
                              fill_color )
    class(vv_sketch_t) <io> :: this
    integer <in> :: nverts
    type(vv_sketch__sim_pos_t), dimension(nverts) <in> :: verts_sim
    character, dimension(nverts) <in> :: path_directive
    real <optin> :: width_in_pixels
    type(vv_color_t) <optin> :: line_color
    type(vv_color_t) <optin> :: fill_color

    type(screen_pos_t) :: vert_on_screen
    real, dimension(nverts) :: verts_screen_x,  &
                               verts_screen_y
    char(len=7) :: line_color_code , fill_color_code
    integer :: i

    do i = 1, nverts
      vert_on_screen = this.to_screen_pos( verts_sim(i) )
      verts_screen_x(i) = vert_on_screen.x
      verts_screen_y(i) = vert_on_screen.y
    end do

    if ( present(line_color) ) then 
      line_color_code = line_color.to_code()
    end if

    if ( present(fill_color) ) then
      fill_color_code = fill_color.to_code()
    else
      fill_color_code = 'none'
    end if

    if ( present(line_color) ) then
      call this.vv_svglib.path( nverts,                       &
                                path_directive,               &
                                verts_screen_x,               &
                                verts_screen_y,               &
                                width_in_pixels,              &
                                line_color=line_color_code,   &
                                fill_color=fill_color_code )
    else
      call this.vv_svglib.path( nverts,                       &
                                path_directive,               &
                                verts_screen_x,               &
                                verts_screen_y,               &
                                width_in_pixels,              &
                                fill_color=fill_color_code )
    end if
  end subroutine vv_sketch__path


  subroutine vv_sketch__rectangle( this, lower_left,           &
                                         upper_right,          &
                                         line_width_in_pixel,  &
                                         line_color,           &
                                         fill_color  )
    class(vv_sketch_t) <io> :: this
    type(vv_sketch__sim_pos_t) <in> :: lower_left, upper_right
    real <in> :: line_width_in_pixel
    type(vv_color_t) <in> :: line_color
    type(vv_color_t) <optin> :: fill_color

    type(screen_pos_t) :: screen_ll, screen_ur
    char(len=7) :: line_color_code , fill_color_code
    real, dimension(4) :: screen_verts_x,   &
                          screen_verts_y

    line_color_code = line_color.to_code()

    if ( present(fill_color) ) then
      fill_color_code = fill_color.to_code()
    else
      fill_color_code = 'none'
    end if

    screen_ll  = this.to_screen_pos( lower_left )
    screen_ur  = this.to_screen_pos( upper_right )

    screen_verts_x(1) = screen_ll.x
    screen_verts_y(1) = screen_ll.y
    screen_verts_x(2) = screen_ur.x
    screen_verts_y(2) = screen_ll.y
    screen_verts_x(3) = screen_ur.x
    screen_verts_y(3) = screen_ur.y
    screen_verts_x(4) = screen_ll.x
    screen_verts_y(4) = screen_ur.y

    call this.vv_svglib.polygon( 4,                    &
                                 screen_verts_x,       &
                                 screen_verts_y,       &
                                 line_width_in_pixel,  &
                                 line_color_code,      &
                                 fill_color_code )
  end subroutine vv_sketch__rectangle
end module vv_sketch_m
