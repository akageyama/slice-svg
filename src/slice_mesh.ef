module slice_mesh_m
  use ut_m
  implicit none
  private
  public :: SLICE_MESH__NORTH,  &
            SLICE_MESH__WEST,   &
            SLICE_MESH__SOUTH,  &
            SLICE_MESH__EAST

  integer <const> :: SLICE_MESH__PATH_NORTHWARD = 0  !       0        0 (NORTH)
  integer <const> :: SLICE_MESH__PATH_WESTWARD  = 1  !       |        1 (WEST)
  integer <const> :: SLICE_MESH__PATH_SOUTHWARD = 2  !  1 -- + -- 3   2 (SOUTH)
  integer <const> :: SLICE_MESH__PATH_EASTWARD  = 3  !       |        3 (EAST)
                                                     !       2

  type, public :: slice_mesh_direct_t
    integer :: d ! 0 (NORTH), 1 (WEST), 2 (SOUTH), 3 (EAST)
                 !        0
                 !        |
                 !   1 -- + -- 3
                 !        |
                 !        2
  contains
    procedure :: turn => slice_mesh_direct__turn
  end type slice_mesh_direct_t


  type, public :: slice_mesh_ivect_t ! integer vector
    integer :: i, j
  contains
    procedure :: shift => slice_mesh_ivect__shift
  end type slice_mesh_ivect_t


  type, public :: slice_mesh__vert_t
    !!>  
        v: vertex
            |       |       |       |       |
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
            |       |       |       |       |
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
            |       |       |       |       |
    !!< 
    integer :: nu, nv
    real, dimension(:), allocatable :: pos_u
    real, dimension(:), allocatable :: pos_v
    real :: u_min, u_max
    real :: v_min, v_max
  contains
    procedure :: initialize => slice_mesh_vert__initialize
    procedure :: finalize => slice_mesh_vert__finalize
  end type slice_mesh__vert_t  

  type, public :: slice_mesh__cell_t
    !!>  
        v: vertex
        c: cell
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
    !!< 
    integer :: nu, nv
    real, dimension(:,:), allocatable :: mean_val
    real :: mean_val_max, mean_val_min
  contains
    procedure :: initialize => slice_mesh_cell__initialize
    procedure :: finalize => slice_mesh_cell__finalize
    procedure :: set_meanval => slice_mesh_cell__set_meanval
  end type slice_mesh__cell_t  

  type, public :: slice_mesh__edge_t
    !!>                            
                                 edge_v                                    
        v: vertex                   |
        c: cell                     |
        e: edge_u or edge_v         +---- edge_u
                                    
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
      e e e v e e e v e e e v e e e v e e e v e e e
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
      e e e v e e e v e e e v e e e v e e e v e e e
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
    !!< 
    integer :: u_nu, u_nv
    integer :: v_nu, v_nv
    integer, dimension(:,:), allocatable :: u_ternary
    integer, dimension(:,:), allocatable :: v_ternary
                                            ! {+1, 0, -1}
  contains
    procedure :: initialize => slice_mesh_edge__initialize
    procedure :: finalize => slice_mesh_edge__finalize
    procedure :: apply_stokes => slice_mesh_edge__apply_stokes
    procedure :: set_ternary => slice_mesh_edge__set_ternary
    procedure :: erase => slice_mesh_edge__erase
    procedure :: can_turn_to => slice_mesh_edge__can_turn_to
  end type slice_mesh__edge_t    


contains


  function slice_mesh_direct__turn( this, how ) result(ans)
    class(slice_mesh_direct_t) <in> :: this
    char(len=*) <in> :: how  ! 'left' 
                             ! 'right' 
                             ! 'back'
    type(slice_mesh_direct_t) :: ans
    !!>
        direct ! 0 (NORTH), 1 (WEST), 2 (SOUTH), 3 (EAST)
               !        0
               !        |
               !   1 -- + -- 3
               !        |
               !        2
    !!<
    select case (how)    
      case ('left')
        ans.d = mod(this.d+1, 4)
      case ('right')
        ans.d = mod(this.d+3, 4)
      case ('back')  ! Though this will not be used...
        ans.d = mod(this.d+2, 4)
      case ('forward')  
        ans.d = this.d
      case default
        call ut__fatal( '__MODFUNC__: case error.' )
    end select
  end function slice_mesh_direct__turn


  function slice_mesh_ivect__shift( this, direction ) result(ans)
    class(slice_mesh_ivect_t) <io> :: this
    integer <in> :: direction
    type(slice_mesh_ivect_t) :: ans

    ans = this  ! copy

    select case (direction)
      case (SLICE_MESH__NORTH)
        ans.j += 1
      case (SLICE_MESH__WEST)
        ans.i -= 1
      case (SLICE_MESH__SOUTH)
        ans.j -= 1
      case (SLICE_MESH__EAST)
        ans.i += 1
      case default
        call ut__fatal( '__MODFUNC__: case error.' )
    end select
  end function slice_mesh_ivect__shift


  subroutine slice_mesh_edge__erase( this, vert_pos, direction )
    class(slice_mesh__edge_t) <io> :: this
    type(slice_mesh_ivect_t) <in> :: vert_pos
    integer <in> :: direction

    select case (direction)
      case (SLICE_MESH__NORTH)
        this.v_ternary(vert_pos.i,   vert_pos.j  ) = 0
      case (SLICE_MESH__WEST)
        this.u_ternary(vert_pos.i-1, vert_pos.j  ) = 0
      case (SLICE_MESH__SOUTH)
        this.v_ternary(vert_pos.i,   vert_pos.j-1) = 0
      case (SLICE_MESH__EAST)
        this.u_ternary(vert_pos.i,   vert_pos.j  ) = 0
      case default
        call ut__fatal( '__MODFUNC__: case error.' )
    end select
  end subroutine slice_mesh_edge__erase


  subroutine slice_mesh_vert__initialize( this, nu, nv,  &
                                          u_min, u_max,  &
                                          v_min, v_max )
    class(slice_mesh__vert_t) <out> :: this
    integer <in> :: nu, nv
    real <in> :: u_min, u_max
    real <in> :: v_min, v_max

    real :: du, dv
    integer :: i, j

    call ut__assert( (nu > 1) .and.         &
                     (nv > 1) .and.         &
                     (u_max > u_min) .and.  &
                     (v_max > v_min),       &
                    '__MODFUNC__: Invalid arguments.' )

    this.nu = nu
    this.nv = nv
    this.u_min = u_min
    this.u_max = u_max
    this.v_min = v_min
    this.v_max = v_max

    allocate(this.pos_u(nu))
    allocate(this.pos_v(nv))

    du = ( u_max - u_min ) / (nu-1)
    dv = ( v_max - v_min ) / (nv-1)

    do i = 1, nu
      this.pos_u(i) = u_min + du*(i-1)
    end do

    do j = 1, nv
      this.pos_v(j) = v_min + dv*(j-1)
    end do
  end subroutine slice_mesh_vert__initialize


  subroutine slice_mesh_vert__finalize( this )
    class(slice_mesh__vert_t) <io> :: this

    deallocate(this.pos_u)
    deallocate(this.pos_v)
  end subroutine slice_mesh_vert__finalize


  subroutine slice_mesh_cell__initialize( this, mesh_vert )
    class(slice_mesh__cell_t) <out> :: this
    class(slice_mesh__vert_t) <in> :: mesh_vert
    !!>
            v: vertex          
            c: cell            
        - & |: edgeu or edgev  

        When mesh_vert.nu = 5, and mesh_vert.nv = 4

               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
    !!<

    this.nu = mesh_vert.nu - 1
    this.nv = mesh_vert.nv - 1

    allocate(this.mean_val(this.nu,this.nv))

  end subroutine slice_mesh_cell__initialize


  subroutine slice_mesh_cell__finalize( this )
    class(slice_mesh__cell_t) <io> :: this

    deallocate(this.mean_val)
  end subroutine slice_mesh_cell__finalize


  subroutine slice_mesh_edge__initialize( this, mesh_vert )
    class(slice_mesh__edge_t) <out> :: this
    class(slice_mesh__vert_t) <in> :: mesh_vert
    !!>
                            edgev                                    
                              |
          +: vertex           |
                              +---- edgeu

        When mesh_vert.nu = 5, and mesh_vert.nv = 4

             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
    !!<
      this.u_nu = mesh_vert.nu - 1
      this.u_nv = mesh_vert.nv
      this.v_nu = mesh_vert.nu
      this.v_nv = mesh_vert.nv - 1
      allocate(this.u_ternary(this.u_nu,  &
                              this.u_nv))
      allocate(this.v_ternary(this.v_nu,  &
                              this.v_nv))
  end subroutine slice_mesh_edge__initialize


  subroutine slice_mesh_edge__finalize( this )
    class(slice_mesh__edge_t) <io> :: this

    deallocate(this.u_ternary)
    deallocate(this.v_ternary)
  end subroutine slice_mesh_edge__finalize  


  subroutine slice_mesh_cell__set_meanval( this, vert, val_on_vert )
    class(slice_mesh__cell_t) <io> :: this
    type(slice_mesh__vert_t) <in> :: vert
    real, dimension(:,:) <in> :: val_on_vert

    integer :: i, j

    call ut__assert( size(val_on_vert,dim=1) == vert.nu .and.  &
                     size(val_on_vert,dim=2) == vert.nv,       &
                    'Inconsistent size of input scal_val_vert.' )
    ! Take average
    do j = 1, this.nv
      do i = 1, this.nu
        this.mean_val(i,j) = (  val_on_vert(i,    j)   &
                              + val_on_vert(i+1,  j)   &
                              + val_on_vert(i,  j+1)   &
                              + val_on_vert(i+1,j+1) ) / 4
      end do
    end do
    this.mean_val_max = maxval(this.mean_val)
    this.mean_val_min = minval(this.mean_val)
  end subroutine slice_mesh_cell__set_meanval


  subroutine slice_mesh_edge__apply_stokes( this, mesh_cell,  &
                                                  switch, level, level2 )
    class(slice_mesh__edge_t) <io> :: this
    type(slice_mesh__cell_t) <in> :: mesh_cell
    char(len=*) <in> :: switch
    real <in> :: level
    real <optin> :: level2
    !!>
        Applying Stokes thereom, we get the boundary curve 
        of cells that has larger value than "level".

              <---               <---             
          +--------+         +--------+   
        | |cell at | ^     | |cell at | ^  
        | |   ci=1 | |  +  | |   ci=2 | |  
        v |   cj=3 | |     v |   cj=3 | |  
          +--------+         +--------+   
              --->              --->      "cancel out" 
                                          /
                                  <---   / <---
                              +--------+--------+
                            | |cell at |cell at | ^ 
                         =  | |   ci=1 |   ci=2 | | 
                            v |   cj=3 |   cj=3 | | 
                              +--------+--------+
                                  --->     --->
    !!<
    integer :: i, j  ! cell indexes

    this.u_ternary(:,:) = 0  ! reset
    this.v_ternary(:,:) = 0

    select case (switch)
      case ('above')
        do j = 1, mesh_cell.nv
          do i = 1, mesh_cell.nu
            if ( mesh_cell.mean_val(i,j) >= level ) then
              this.u_ternary(i,j)   += 1  ! right-in-south
              this.v_ternary(i+1,j) += 1  !    up-in-east
              this.u_ternary(i,j+1) -= 1  !  left-in-north
              this.v_ternary(i,j)   -= 1  !  down-in-west
            end if
          end do
        end do
      case ('below')
        do j = 1, mesh_cell.nv
          do i = 1, mesh_cell.nu
            if ( mesh_cell.mean_val(i,j) < level ) then
              this.u_ternary(i,j)   += 1  ! right-in-south
              this.v_ternary(i+1,j) += 1  !    up-in-east
              this.u_ternary(i,j+1) -= 1  !  left-in-north
              this.v_ternary(i,j)   -= 1  !  down-in-west
            end if
          end do
        end do
      case ('between')
        call ut__assert( present(level2),  &
                         '__MODFUNC__: You forgot setting level2.' )
        do j = 1, mesh_cell.nv
          do i = 1, mesh_cell.nu
            if ( mesh_cell.mean_val(i,j) >= level .and.   &
                 mesh_cell.mean_val(i,j) < level2 ) then
              this.u_ternary(i,j)   += 1  ! right-in-south
              this.v_ternary(i+1,j) += 1  !    up-in-east
              this.u_ternary(i,j+1) -= 1  !  left-in-north
              this.v_ternary(i,j)   -= 1  !  down-in-west
            end if
          end do
        end do
      case default 
        call ut__fatal( '__MODFUNC__: case error.' )
    end select
  end subroutine slice_mesh_edge__apply_stokes


  subroutine slice_mesh_edge__set_ternary( this,       &
                                           mesh_vert,  &
                                           level)
    class(slice_mesh__edge_t) <io> :: this
    class(slice_mesh__vert_t) <in> :: mesh_vert
    real <in> :: level
    !!>
        Each cell is surrounded by four edges, two vertical
        edges (edge_v) and two horizontal edges (edge_u).

                                  v
                                  |
                                  |
                                  +----- u

              edge_u
            o--------o
            |        |
     edge_v |  cell  | edge_v
            |        |
            o--------o
              edge_u

        Compare scalar field values on the four vertices F
        and "Level" of the contour. Check the sign F - Level
        on the vertices. Denote "p" when 
                  F - Level > 0,
        and "m" when 
                  F - Level < 0.0.
        Define u_ternary as the sign of dF/du and v_ternary
        as the sign of dF/dv.
                                   _______ u_ternary = 0
                                  /
                             m--------m
                             |        |
          v_ternary = -1 --> |        | <------ v_ternary = 0
                             |        |
                             p--------m
                                  \______ u_ternary = -1


        Algorithm

          1. Find a edge_u with u_ternary = -1.
                                   _______ u_ternary = 0
                                  /
                             m--------m
                             |        |
          v_ternary = -1 --> |        | <------ v_ternary = 0
                             |        |
                             p========m
                                  \______ u_ternary = -1

          2. Search other three edges 
    !!<
    integer :: ei, ej  ! edge indexes

    this.u_ternary(:,:) = NIL  ! To confirm all edges
    this.v_ternary(:,:) = NIL  ! are set below.

    ! edge_u
    do je = 1, this.u_nv
        do ie = 1, this.u_nu
          if ( mesh_vert(ie,  je) > level .and.  &
               mesh_vert(ie+1,je) < level ) then
            this.u_ternary(i,j) = -1 
            !!>
                    |        |
                  --p========m--
                    |        |
            !!<
          else if ( mesh_vert(ie,  je) < level .and.  &
                    mesh_vert(ie+1,je) > level ) then
            this.u_ternary(i,j) = +1
            !!>
                    |        |
                  --p========m--
                    |        |
            !!<
          else
            this.u_ternary(i,j) = 0
          end if
        end do
      end do

    ! edge_v
    do je = 1, this.v_nv
        do ie = 1, this.v_nu
          if ( mesh_vert(ie,je  ) > level .and.  &
               mesh_vert(ie,je+1) < level ) then
            this.v_ternary(i,j) = -1 
            !!>
                    |
                  --m--
                    |
                    |
                  --p--
                    |
            !!<
          else if ( mesh_vert(ie,je  ) < level .and.  &
                    mesh_vert(ie,je+1) > level ) then
            this.v_ternary(i,j) = +1
            !!>
                    |
                  --p--
                    |
                    |
                  --m--
                    |
            !!<
          else
            this.v_ternary(i,j) = 0
          end if
        end do
      end do

      call ut__assert( maxval(abs(this.u_ternary)) <= 1,  &
                       "__MODFUNC__: You missed an edge_u?" )
      call ut__assert( maxval(abs(this.v_ternary)) <= 1,  &
                       "__MODFUNC__: You missed an edge_v?" )
  end subroutine slice_mesh_edge__set_ternary  


  function slice_mesh_edge__can_turn_to( this,          &
                                         vpos_now,      &
                                         direct_turned ) result(ans)
    class(slice_mesh__edge_t) <in> :: this
    type(slice_mesh_ivect_t) <in> :: vpos_now
    type(slice_mesh_direct_t) <in> :: direct_turned
    logical :: ans
  
    !!>
          + - + - + - + - + - + - + - + ...j=vert_nv
          |   |   |   |   |   |   |   |
          + - + - + - + - + - + - + - +
          |   |   |   |   |   |   |   |
          + - + - + - M==>N - + - + - +
          |   |   |   |   |   |   |   |
          + - + - + - + - + - + - + - +
          |   |   |   |   |   |   |   |
          + - + - + - + - + - + - + - + ...j=1
          .                           .
          .                           .
         i=1                         i=vert_nu

          Suppose you are now located at the vertex 
        position labeld 'M' in the above figure, you 
        move to a nearest neighbor vertex in 
        the next step. The nearest neighbor vertex to
        move is determined by the condition that the
        edge value toward the nearest neighbor has a
        proper, non-zero, value of edge ternary.
          For example, in the above case, if the value
        of edge_u.ternary on the M-N edge is +1, i.e., 
        eastward, then you jump to N.
    !!<
    integer :: i, j, vert_nu, vert_nv, dir

    i = vpos_now.i
    j = vpos_now.j
    vert_nu = this.v_nu
    vert_nv = this.u_nv
    dir = direct_turned.d

    ans = .false.  ! default

    if ( ( i==1       .and. dir==SLICE_MESH__WEST  ) .or.  &
         ( i==vert_nu .and. dir==SLICE_MESH__EAST  ) .or.  &
         ( j==1       .and. dir==SLICE_MESH__SOUTH ) .or.  &
         ( j==vert_nv .and. dir==SLICE_MESH__NORTH ) ) then
      ! You cannot go through the border.
      return
    end if

    select case (direct_turned.d )
      case (SLICE_MESH__NORTH)
        if ( this.v_ternary(i,j)   == +1 ) ans = .true.
      case (SLICE_MESH__SOUTH)
        if ( this.v_ternary(i,j-1) == -1 ) ans = .true.
      case (SLICE_MESH__EAST)
        if ( this.u_ternary(i,j)   == +1 ) ans = .true.
      case (SLICE_MESH__WEST)
        if ( this.u_ternary(i-1,j) == -1 ) ans = .true.
      case default
        call ut__fatal( '__MODFUNC__: case error.' )
    end select
  end function slice_mesh_edge__can_turn_to

end module slice_mesh_m
