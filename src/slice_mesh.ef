module slice_mesh_m
  use ut_m
  use contour_path
  implicit none

  type slice_mesh_vert_t
    !!>  
        v: vertex
            |       |       |       |       |
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
            |       |       |       |       |
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
            |       |       |       |       |
    !!< 
    integer :: nu, nv
    real, dimension(:), allocatable :: pos_u
    real, dimension(:), allocatable :: pos_v
    real :: u_min, u_max
    real :: v_min, v_max
  contains
    procedure :: initialize => slice_mesh_vert__initialize
    procedure :: finalize => slice_mesh_vert__finalize
  end type slice_mesh_vert_t  

  type slice_mesh_cell_t
    !!>  
        v: vertex
        c: cell
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
       -----v-------v-------v-------v-------v-----
            |       |       |       |       |
        c   |   c   |   c   |   c   |   c   |   c
            |       |       |       |       |
    !!< 
    integer :: nu, nv
    real, dimension(:,:), allocatable :: mean_val
    real :: mean_val_max, mean_val_min
  contains
    procedure :: initialize => slice_mesh_cell__initialize
    procedure :: finalize => slice_mesh_cell__finalize
    procedure :: set_meanval => slice_mesh_cell__set_meanval
  end type slice_mesh_cell_t  

  type slice_mesh_edge_t
    !!>                            
                                 edge_v                                    
        v: vertex                   |
        c: cell                     |
        e: edge_u or edge_v         +---- edge_u
                                    
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
      e e e v e e e v e e e v e e e v e e e v e e e
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
      e e e v e e e v e e e v e e e v e e e v e e e
            e       e       e       e       e
        c   e   c   e   c   e   c   e   c   e   c
            e       e       e       e       e
    !!< 
    integer :: u_nu, u_nv
    integer :: v_nu, v_nv
    integer, dimension(:,:), allocatable :: u_ternary
    integer, dimension(:,:), allocatable :: v_ternary
                                            ! {+1, 0, -1}
    type(contour_path_t) :: contour_path
  contains
    procedure :: initialize => slice_mesh_edge__initialize
    procedure :: finalize => slice_mesh_edge__finalize
    procedure :: apply_stokes => slice_mesh_edge__apply_stokes
    procedure :: contour_path_exist => slice_mesh_edge__contour_path_exist
  end type slice_mesh_edge_t    


contains


  subroutine slice_mesh_vert__initialize( this, nu, nv,  &
                                          u_min, u_max,  &
                                          v_min, v_max )
    class(slice_grid_t) <out> :: this
    integer <in> :: nu, nv
    real <in> :: u_min, u_max
    real <in> :: v_min, v_max

    real :: du, dv
    integer :: i, j

    call ut__assert( (nu > 1) .and.         &
                     (nv > 1) .and.         &
                     (u_max > u_min) .and.  &
                     (v_max > v_min),       &
                    'Invalid coord-related arguments.' )

    this.nu = nu
    this.nv = nv
    this.u_min = u_min
    this.u_max = u_max
    this.v_min = v_min
    this.v_max = v_max

    allocate(this.pos_u(nu))
    allocate(this.pos_v(nv))

    du = ( u_max - u_min ) / (nu-1)
    dv = ( v_max - v_min ) / (nv-1)

    do i = 1, nu
      this.pos_u(i) = u_min + du*(i-1)
!debugp i, this.vert_pos_u(i)        
    end do

    do j = 1, nv
      this.pos_v(j) = v_min + dv*(j-1)
!debugp j, this.vert_pos_v(j)        
    end do
  end subroutine slice_mesh_vert__initialize


  subroutine slice_mesh_vert__finalize( this )
    class(slice_mesh_vert_t) <io> :: this

    deallocate(this.pos_u)
    deallocate(this.pos_v)
  end subroutine slice_mesh_vert__finalize


  subroutine slice_mesh_cell__initialize( this, mesh_vert )
    class(slice_mesh_cell_t) <out> :: this
    class(slice_mesh_vert_t) <in> :: mesh_vert
    !!>
            v: vertex          
            c: cell            
        - & |: edgeu or edgev  

        When mesh_vert.nu = 5, and mesh_vert.nv = 4

               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
               |       |       |       |       |
               |   c   |   c   |   c   |   c   |
               |       |       |       |       |
               v - - - v - - - v - - - v - - - v
    !!<

    this.nu = mesh_vert.nu - 1
    this.nv = mesh_vert.nv - 1

    allocate(this.mean_val(this.nu,this.nv))

  end subroutine slice_mesh_cell__initialize


  subroutine slice_mesh_cell__finalize( this )
    class(slice_grid_t) <io> :: this

    deallocate(this.mean_val)
  end subroutine slice_mesh_cell__finalize


  subroutine slice_mesh_edge__initialize( this, mesh_vert )
    class(slice_mesh_edge_t) <out> :: this
    class(slice_mesh_vert_t) <in> :: mesh_vert
    !!>
                            edgev                                    
                              |
          +: vertex           |
                              +---- edgeu

        When mesh_vert.nu = 5, and mesh_vert.nv = 4

             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
             e       e       e       e       e
             |   c   |   c   |   c   |   c   |
             v       v       v       v       v
             + edgeu + edgeu + edgeu + edgeu +
    !!<
      this.u_nu = mesh_vert.nu - 1
      this.u_nv = this.vert_nv
      this.v_nu = this.vert_nu
      this.v_nv = this.vert_nv - 1
      allocate(this.u_ternary(this.u_nu,  &
                              this.u_nv))
      allocate(this.v_ternary(this.v_nu,  &
                              this.v_nv))
  end subroutine slice_mesh_edge__initialize


  subroutine slice_mesh_edge__finalize( this )
    class(slice_grid_t) <io> :: this

    deallocate(this.u_ternary)
    deallocate(this.v_ternary)
  end subroutine slice_mesh_edge__finalize  


  subroutine slice_mesh_cell__set_meanval( this, vert, val_on_vert )
    class(slice_mesh_cell_t) <io> :: this
    type(slice_mesh_vert_t) <in> :: vert
    real, dimension(:,:) <in> :: val_on_vert

    integer :: i, j

    call ut__assert( size(val_on_vert,dim=1) == vert.nu, .and.  &
                     size(val_on_vert,dim=2) == vert.nv, &
                    'Inconsistent size of input scal_val_vert.' )
    ! Take average
    do j = 1, this.nv
      do i = 1, this.nu
        this.mean_val(i,j) = (  val_on_vert(i,    j)   &
                              + val_on_vert(i+1,  j)   &
                              + val_on_vert(i,  j+1)   &
                              + val_on_vert(i+1,j+1) ) / 4
      end do
    end do
    this.mean_val_max = maxval(this.mean_val)
    this.mean_val_min = minval(this.mean_val)
  end subroutine slice_mesh_cell__set_meanval

  subroutine slice_mesh_edge__apply_stokes( this, mesh_cell, level )
    class(slice_mesh_edge_t) <io> :: this
    type(slice_mesh_cell_t) <in> :: mesh_cell
    real <in> :: level
    !!>
        Applying Stokes thereom, we get the boundary curve 
        of cells that has larger value than "level".

              <---               <---             
          +--------+         +--------+   
        | |cell at | ^     | |cell at | ^  
        | |   ci=1 | |  +  | |   ci=2 | |  
        v |   cj=3 | |     v |   cj=3 | |  
          +--------+         +--------+   
              --->              --->      "cancel out" 
                                          /
                                  <---   / <---
                              +--------+--------+
                            | |cell at |cell at | ^ 
                         =  | |   ci=1 |   ci=2 | | 
                            v |   cj=3 |   cj=3 | | 
                              +--------+--------+
                                  --->     --->
    !!<
    integer :: i, j  ! cell indexes

    this.u_ternary(:,:) = 0  ! reset
    this.v_ternary(:,:) = 0
    do j = 1, mesh_cell.nv
      do i = 1, mesh_cell.nu
        if ( mesh_cell.meanval(i,j) >= level ) then
          this.u_ternary(i  , j+1) += 1  ! right-in-south
          this.v_ternary(i+1, j  ) += 1  !    up-in-east
          this.u_ternary(i  , j  ) -= 1  !  left-in-north
          this.v_ternary(i  , j  ) -= 1  !  down-in-west
        end if
      end do
    end do
  end subroutine slice_mesh_edge__apply_stokes


  function slice_mesh_edge__has_nonzero_ternary( this ) result(ans)
    class(slice_mesh_edge_t) <in> :: this

    ans = maxval(this.u_ternary(:,:)) == 1
  end function slice_mesh_edge__has_nonzero_ternary

end module slice_mesh_m
