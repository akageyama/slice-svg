  !!>
      In physical coordinate system.
  !!< 
module slice_m
  use ut_m
  use svglib_m
  implicit none
  private

  type path_vert_t
    integer :: num ! vertex number
    integer, dimension(:), allocatable :: i, j
  contains
    procedure :: initialize => path_vert_initialize
    procedure :: add => path_vert_add
    procedure :: rest => path_vert_rest
  end type path_vert_t

  type slice_grid_t
    !!>  
        V: vertex, egy: edge_y
            .       .       .       .       . 
            y       y       y       y       y
       ...x-V-edgex-V-edgex-V-edgex-V-edgex-V-e...
            e       e       e       e       e    
            g  cell g  cell g  cell g  cell g  
            y       y       y       y       y
       ...x-V-edgex-V-edgex-V-edgex-V-edgex-V-e...
            y       y       y       y       y
            .       .       .       .       . 
    !!< 

    ! vertex
    integer :: vert_nu, vert_nv
    real, dimension(:), allocatable :: vert_pos_u
    real, dimension(:), allocatable :: vert_pos_v
    real :: vert_u_min, vert_u_max
    real :: vert_v_min, vert_v_max
    ! cell
    integer :: cell_nu, cell_nv
    ! edges (x and y directions)
    integer :: edgex_nu, edgex_nv
    integer :: edgey_nu, edgey_nv
    integer, dimension(:,:), allocatable :: edgex_ternary
    integer, dimension(:,:), allocatable :: edgey_ternary
                                              ! {+1, 0, -1}
  contains
    procedure :: initialize => slice_grid_initialize
    procedure :: finalize => slice_grid_finalize
  end type slice_grid_t

  type, public :: slice__scalar_t
    type(slice_grid_t) :: grid
    real, dimension(:,:), allocatable :: val_vert
    real :: val_vert_max, val_vert_min
    real, dimension(:,:), allocatable :: val_cell
    real :: val_cell_max, val_cell_min
  contains
    procedure :: initialize => slice__scalar_initialize
    procedure :: finalize => slice__scalar_finalize
    procedure :: set_val => slice__scalar_set_val
    procedure :: vis_contour => slice__scalar_vis_contour
  end type slice__scalar_t

  type, public :: slice__vector_t
    type(slice_grid_t) :: grid
    real, dimension(:,:), allocatable :: vect_x
    real, dimension(:,:), allocatable :: vect_y
    real :: amp_max, amp_min
  contains
    procedure :: initialize => slice__vector_initialize
    procedure :: finalize => slice__vector_finalize    
    procedure :: set_val => slice__vector_set_val
  end type slice__vector_t


contains

  subroutine path_vert_reset( this )
    class(path_vert_t) <io> :: this
    this.num = 0
    this.i(:) = 0
    this.j(:) = 0
  end subroutine path_vert_reset


  subroutine path_vert_initialize( this, num_max )
    class(path_vert_t) <out> :: this
    integer <in> :: num_max

    allocate(this.i(num_max),this.j(num_max))
    call path_vert_reset( this )
  end subroutine path_vert_initialize


  subroutine path_vert_add( this, i, j )
    class(path_vert_t) <io> :: this
    integer <in> :: i, j

    integer :: n
    n = this.num + 1
    call assert( n <= size(this.i,dim=1),  &
                'Increase array size of path_vert.' )
    this.num = n
    this.i(n) = i
    this.j(n) = j
  end subroutine path_pvert_add


  subroutine slice_grid_initialize( this, vert_nu, vert_nv,  &
                                    vert_u_min, vert_u_max,  &
                                    vert_v_min, vert_v_max )
    class(slice_grid_t) <out> :: this
    integer <in> :: vert_nu, vert_nv
    real <in> :: vert_u_min, vert_u_max
    real <in> :: vert_v_min, vert_v_max

    call ut__assert( (vert_nu > 1) .and.              &
                     (vert_nv > 1) .and.              &
                     (vert_u_max > vert_u_min) .and.  &
                     (vert_v_max > vert_v_min),       &
                    'Invalid coord-related arguments.' )
    call iVertex
    call iCell
    call iEdges

  contains

    subroutine iVertex
      real :: du, dv
      integer :: i, j

      this.vert_nu = vert_nu
      this.vert_nv = vert_nv
      this.vert_u_min = vert_u_min
      this.vert_u_max = vert_u_max
      this.vert_v_min = vert_v_min
      this.vert_v_max = vert_v_max
  
      allocate(this.vert_pos_u(vert_nu))
      allocate(this.vert_pos_v(vert_nv))
  
      du = ( vert_u_max - vert_u_min ) / (vert_nu-1)
      dv = ( vert_v_max - vert_v_min ) / (vert_nv-1)
  
      do i = 1, vert_nu
        this.vert_pos_u(i) = vert_u_min + du*(i-1)
!debugp i, this.vert_pos_u(i)        
      end do
  
      do j = 1, vert_nv
        this.vert_pos_v(j) = vert_v_min + dv*(j-1)
!debugp j, this.vert_pos_v(j)        
      end do
    end subroutine iVertex

    subroutine iCell
      this.cell_nu = vert_nu - 1
      this.cell_nv = vert_nv - 1
    end subroutine iCell

    subroutine iEdges
      this.edgex_nu = this.cell_nu
      this.edgex_nv = this.vert_nv
      this.edgey_nu = this.vert_nu
      this.edgey_nv = this.cell_nv
      allocate(this.edgex_ternary(this.edgex_nu,  &
                                  this.edgex_nv))
      allocate(this.edgey_ternary(this.edgey_nu,  &
                                  this.edgey_nv))
    end subroutine iEdges

  end subroutine slice_grid_initialize


  subroutine slice_grid_finalize( this )
    class(slice_grid_t) <io> :: this

    deallocate(this.vert_pos_u)
    deallocate(this.vert_pos_v)
    deallocate(this.edgex_ternary)
    deallocate(this.edgey_ternary)
  end subroutine slice_grid_finalize


  subroutine slice_scalar_val_vert_to_val_cell( scal )
    type(slice__scalar_t) <io> :: scal

    integer :: i, j

    ! average
    do j = 1, this.grid.cell_nv
      do i = 1, this.grid.cell_nu
        scal.val_cell(i,j) = (  scal.val_vert(i,    j)   &
                              + scal.val_vert(i+1,  j)   &
                              + scal.val_vert(i,  j+1)   &
                              + scal.val_vert(i+1,j+1) ) / 4
      end do
    end do
    scal.cell_val_max = maxval(scal.val_cell)
    scal.cell_val_min = minval(scal.val_cell)
  end subroutine slice_scalar_val_vert_to_val_cell


  subroutine slice__scalar_initialize( this,        &
                                       vert_nu,     &
                                       vert_nv,     &
                                       vert_u_min,  &
                                       vert_u_max,  &
                                       vert_v_min,  &
                                       vert_v_max,  &
                                       val )
    class(slice__scalar_t) <out> :: this
    integer <in> :: vert_nu, vert_nv
    real <in> :: vert_u_min, vert_u_max
    real <in> :: vert_v_min, vert_v_max
    real, dimension(vert_nu,vert_nv) <optin> :: val

    call this.grid.initialize( vert_nu,     &
                               vert_nv,     &
                               vert_u_min,  &
                               vert_u_max,  &
                               vert_v_min,  &
                               vert_v_max )

    allocate(this.val_vert(this.grid.vert_nu,  &
                           this.grid.vert_nv))

    if ( present(val) ) then
      this.grid.vert_val(:,:) = val(:,:)
    else
      this.grid.vert_val(:,:) = 0.0
    end if

    allocate(this.val_cell(this.grid.cell_nu,  &
                           this.grid.cell_nv))
    call slice_scalar_val_vert_to_val_cell( this )
  end subroutine slice__scalar_initialize


  subroutine slice__scalar_set_val( this, &
                                    vert_nu, &
                                    vert_nv, &
                                    val )
    class(slice__scalar_t) <io> :: this
    integer <in> :: vert_nu, vert_nv
    real, dimension(vert_nu,vert_nv) <in> :: val

    this.val_vert(:,:) = val(:,:)
    this.val_vert_max = maxval(val)
    this.val_vert_min = minval(val)
    call slice_scalar_val_vert_to_val_cell( this )
  end subroutine slice__scalar_set_val


  subroutine slice__scalar_finalize( this )
    class(slice__scalar_t) <io> :: this

    deallocate(this.val_vert)
    deallocate(this.val_cell)
    call this.grid.finalize
  end subroutine slice__scalar_finalize


  subroutine slice__scalar_vis_contour( this, level )
    class(slice__scalar_t) <in> :: this
    real <in> :: level

    !!>
        In the followings, "e" stands for "edge",
        and "c" stands for "cell". "i" is index
        in the u-direction and "j" is in v-direction.
        So, "ei" is edge-index in u and "cj" is 
        cell-index in v.

                    north              ei=1  2   3   4 
               edge_x(ei=1,ej=3)    ej=1 +---+---+---+
                +------------+ .         | 1 | 2 | 3 |
              w | cell(ci,cj)|e  .     2 +---+---+---+
              e |    with    |a    .     | 2 |   |   |
              s |  ci=1,cj=3 |s\     . 3 +---+---+---+
              t/|            |t \        | 3 |   |   |
              / +------------+ ..\.... 4 +---+---+---+
             / edge_x(ei=1,ej=4)  \            
            /       south          \
       edge_y(ei=1,ej=3)          edge_y(ei=2,ej=3)


    !!<

    call iSet_edges
    call iExtract_boundary_curve

  contains

    subroutine iSet_edges
      !!>
          Applying Stokes thereom, we get the boundary curve 
          of cells that has larger value than "level".

               <---               <---             
            +--------+	       +--------+   
          | |cell at | ^     | |cell at | ^  
          | |   ci=1 | |  +  | |   ci=2 | |  
          v |   cj=3 | |     v |   cj=3 | |  
            +--------+	       +--------+   
               --->	          --->         "cancel out" 
                                           /
                                   <---   / <---
                                +--------+--------+
                              | |cell at |cell at | ^ 
                           =  | |   ci=1 |   ci=2 | | 
                              v |   cj=3 |   cj=3 | | 
                                +--------+--------+
                                   --->     --->
      !!<
      integer :: i, j  ! cell indexes
  
      this.grid.edgex_ternary(:,:) = 0  ! reset
      this.grid.edgey_ternary(:,:) = 0
      do j = 1, this.cell.vert_nv
        do i = 1, this.cell.vert_nu
          if ( this.val_cell(i,j) >= level ) then
            this.grid.edgex_ternary(i  , j+1) = +1  ! right-in-south
            this.grid.edgey_ternary(i+1, j  ) = +1  !    up-in-east
            this.grid.edgex_ternary(i  , j  ) = -1  !  left-in-north
            this.grid.edgey_ternary(i  , j  ) = -1  !  down-in-west
          end if
        end do
      end do
    end subroutine iSet_edges

    subroutine iExtract_boundary_curve
      integer :: i, j  ! edges indexes
      integer :: path_vert_i, path_vert_j
      integer :: path_vert_num

      type(path_vert_t) :: path_vert
      logical :: just_once = .true.

      !!>
            Tring to find a "right-in-south" arrow AB.
                +---+---+---+
                |           |
                A==>B       +
                 /  |       |
                /   +---+---+
               /
             This.
      !!< 

      ==<just_once>==
        call path_vert.initialize( this)
      ==</just_once>==

      call this.contour.reset
      ! Find a starting point of the path

      call path_vert.reset

      finding_loops : &
        do j = 1, edgex_nv
          do i = 1, edgex_nu
            if ( this.grid.edgex_ternary(i,j) == +1 ) then
              ! Found!
              path_vert_num = 1
              path_vert_i = i
              path_vert_j = j
              exit finding_loops
            end if
          end do
        end do &
      finding_loops

      if ( path_vert_num == 0 ) return  ! No contour

      i = path_vert_i + 1   !   B of A===>B
      j = path_vert_j       !       
      do while ( i /= path_vert_i .and.  &
                 j /= path_vert_j )
        call path.vert_add( i, j )
        path_vert_num += 1
        path_vert_i(path_vert_num) = i
        patH-vert_j(path_vert_num) = j


            

    end subroutine iExtract_boundary_curve

  end subroutine slice__scalar_draw_contour


  subroutine slice__vector_initialize( this,        &
                                       vert_nu,     &
                                       vert_nv,     &
                                       vert_u_min,  &
                                       vert_u_max,  &
                                       vert_v_min,  &
                                       vert_v_max,  &
                                       vect_x,      &
                                       vect_y )
    class(slice__vector_t) <out> :: this
    integer <in> :: vert_nu, vert_nv
    real <in> :: vert_u_min, vert_u_max
    real <in> :: vert_v_min, vert_v_max
    real, dimension(vert_nu,vert_nv) <optin> :: vect_x, vect_y

    real, dimension(vert_nu,vert_nv) :: amp_vect

    call this.grid.initialize( vert_nu,     &
                               vert_nv,     &
                               vert_u_min,  &
                               vert_u_max,  &
                               vert_v_min,  &
                               vert_v_max )
    allocate(this.vect_x(vert_nu,vert_nv))
    allocate(this.vect_y(vert_nu,vert_nv))

    if ( present(vect_x) ) then
      this.vect_x(:,:) = vect_x(:,:)
    else
      this.vect_x(:,:) = 0.0
    end if

    if ( present(vect_y) ) then
      this.vect_y(:,:) = vect_y(:,:)
    else
      this.vect_y(:,:) = 0.0
    end if

    amp_vect = sqrt(vect_x**2+vect_y**2)

    this.amp_max = maxval(amp_vect)
    this.amp_min = minval(amp_vect)
  end subroutine slice__vector_initialize

  
  subroutine slice__vector_finalize( this )
    class(slice__vector_t) <out> :: this

    deallocate(this.vect_x)
    deallocate(this.vect_y)
    call this.grid.finalize
  end subroutine slice__vector_finalize


  subroutine slice__vector_set_val( this, vect_x, vect_y )
    class(slice__vector_t) <io> :: this
    real, dimension(vert_nu,vert_nv) <in> :: vect_x, vect_y

    this.vect_x(:,:) = vect_x(:,:)
    this.vect_y(:,:) = vect_y(:,:)
  end subroutine slice__vector_set_val

end module slice_m

