!!>
    slice: Visualize 2-dimensional cross sections 
    of 3- (or more) dimensional simulation data.

    Draw contour lines for scalar fields.

    Draw vector arrow glyphs for vector fields.
    
    In this module, positions are specified by the
    simulation coordinates (u,v) with simulation unit
    such as meters.

!!< 
module slice_m
  use color_m
  use ut_m
  use slice_mesh_m
  use contour_path_m
  use sketch_m
  implicit none
  private

  type, public :: slice__scalar_t
    type(slice_mesh__vert_t) :: mesh_vert
    type(slice_mesh__cell_t) :: mesh_cell
    type(slice_mesh__edge_t) :: mesh_edge
    real, dimension(:,:), allocatable :: val_vert
    real :: val_vert_max, val_vert_min
  contains
    procedure :: initialize => slice__scalar_initialize
    procedure :: finalize => slice__scalar_finalize
    procedure :: set_val => slice__scalar_set_val
    procedure :: vis_contour => slice__scalar_vis_contour
  end type slice__scalar_t

  type, public :: slice__vector_t
    type(slice_mesh__vert_t) :: mesh_vert
    real, dimension(:,:), allocatable :: vect_u
    real, dimension(:,:), allocatable :: vect_v
    real :: amp_max, amp_min
  contains
    procedure :: initialize => slice__vector_initialize
    procedure :: finalize => slice__vector_finalize    
    procedure :: set_val => slice__vector_set_val
    procedure :: vis_arrows => slice__vector_vis_arrows
  end type slice__vector_t


contains


  subroutine slice__scalar_initialize( this, nu, nv,  &
                                       u_min, u_max,  &
                                       v_min, v_max,  &
                                       val )
    class(slice__scalar_t) <out> :: this
    integer <in> :: nu, nv
    real <in> :: u_min, u_max
    real <in> :: v_min, v_max
    real, dimension(nu,nv) <optin> :: val

    allocate(this.val_vert(nu,nv))

    call this.mesh_vert.initialize( nu, nv,        &
                                    u_min, u_max,  &
                                    v_min, v_max )
    call this.mesh_cell.initialize( this.mesh_vert )
    call this.mesh_edge.initialize( this.mesh_vert )

    if ( present(val) ) then
      this.val_vert(:,:) = val(:,:)
    else
      this.val_vert(:,:) = 0.0
    end if

    call this.mesh_cell.set_meanval( this.mesh_vert,  &
                                     this.val_vert )
  end subroutine slice__scalar_initialize


  subroutine slice__scalar_set_val( this, nu, nv, val )
    class(slice__scalar_t) <io> :: this
    integer <in> :: nu, nv
    real, dimension(nu,nv) <in> :: val

    this.val_vert(:,:) = val(:,:)
    this.val_vert_max = maxval(val)
    this.val_vert_min = minval(val)
    call this.mesh_cell.set_meanval( this.mesh_vert,  &
                                     this.val_vert )
  end subroutine slice__scalar_set_val


  subroutine slice__scalar_finalize( this )
    class(slice__scalar_t) <io> :: this

    deallocate(this.val_vert)
    call this.mesh_vert.finalize
    call this.mesh_cell.finalize
    call this.mesh_edge.finalize
  end subroutine slice__scalar_finalize


  subroutine slice__scalar_vis_contour( this, sketch,     &
                                              level,      &
                                              width_in_pixels, &
                                              line_color, &
                                              fill_color )
    class(slice__scalar_t) <io> :: this
    type(sketch_t) <io> :: sketch
    real <in> :: level
    real <optin> :: width_in_pixels
    type(color_t) <optin> :: line_color
    type(color_t) <optin> :: fill_color
    
    !!>
        In the followings, "e" stands for "edge",
        and "c" stands for "cell". "i" is index
        in the u-direction and "j" is in v-direction.
        So, "ei" is edge-index in u and "cj" is 
        cell-index in v.

                    north               
                edgeu(ei=1,ej=4)       +---+---+---+ ej=4
                +------------+ .       | 3 |   |   |
              w | cell(ci,cj)|e  .     +---+---+---+ ej=3
              e |    with    |a    .   | 2 |   |   |
              s |  ci=1,cj=3 |s\     . +---+---+---+ ej=2
              t/|            |t \      | 1 | 2 | 3 |
              / +------------+ ..\.... +---+---+---+ ej=1
             /      / south       \   ei=1 2   3   4 
            /  edgeu(ei=1,ej=3)    \
           /                        \
        edgev(ei=1,ej=3)           edgev(ei=2,ej=3)

                              edgeu(ei=3,ej=8)
            vert(vi=3,vj=8)   .    vert(vi=4,vj=8)
                         \    .   / 
                          o------o  
            edgev(3,7)....|      |....edgev(ei=4,ej=7)
                          |      |
                          o=====>V
                         /|  .   | \ vert(vi=4,vj=7)
           vert(vi=3,vj=7)|  .   |..............edgev(ei=4,ej=6)   
                             .   o 
              edgeu(ei=3,ej=7)    \
                                   vert(vi=4,vj=6)

        P: positive edge, eastward edgeu / northward edgev
        M: negative edge, westward edgeu / southward edgev
        1: vertex on which paths run straight forward.
        2: vertex on which paths turn left.
        3: vertex on which paths turn right.

       +---+---+---+---+---2=M=1=M=2
       |   |   |   |   |   M       P
       +---+---+---2=M=1=M=3=P=1=P=2
       |   |   |   M       P   |   |
       2=M=1=M=2---2=P=1=P=2---+---+
       M       P   |   |   |   |   |
       2=P=1=P=2=M=1=M=1=M=1=M=2---+
       |   |   M               P
       +---+---1           3=P=2
       |   |   M           P   |
       +---+---2=P=1=P=1=P=2---+
    !!<
    type(contour_path_t), save :: contour_path
    logical :: just_once = .true.
    type(slice_mesh_ivect_t) :: vpos_now
    type(slice_mesh_direct_t) :: direct_now
    char(len=10) :: status

    ==<just_once>==
      call contour_path.initialize( this.mesh_vert.nu,  &
                                    this.mesh_vert.nv )
    ==</just_once>==

    call this.mesh_edge.apply_stokes( this.mesh_cell, level )

    call contour_path.reset
    direct_now.d = SLICE_MESH__EAST ! Try to find east-ward edge.
    call contour_path.set_starting_edge( this.mesh_edge,  &
                                         direct_now,      &
                                         status,          &
                                         vpos_now )
    do while ( status == 'have found' )
      !!>
          Tring to find the 1st contour for this level.
      !!<
      call contour_path.trace_and_erase( this.mesh_edge,    &
                                         direct_now,        &
                                         vpos_now )
      call iDraw_contour( this.mesh_vert.nu,    &
                          this.mesh_vert.nv,    &
                          width_in_pixels,      &
                          line_color,           &
                          fill_color )

      !!>
          Generally, more contours exist for this level.
      !!<
      call contour_path.reset
      direct_now.d = SLICE_MESH__EAST ! Try to find east-ward edge.
      call contour_path.set_starting_edge( this.mesh_edge,  &
                                           direct_now,      &
                                           status,          &
                                           vpos_now )
    end do

  contains

    subroutine iDraw_contour( nu,               &
                              nv,               &
                              width_in_pixels,  & 
                              line_color,       &
                              fill_color )
      integer <in> :: nu, nv
      real <optin> :: width_in_pixels
      type(color_t) <optin> :: line_color
      type(color_t) <optin> :: fill_color

      integer :: i, li, lj
      real :: u_sim, v_sim
      type(sketch__sim_pos_t), dimension(nu*nv) :: verts_sim

      do i = 1, contour_path.num
        li = contour_path.list_i(i)
        lj = contour_path.list_j(i)
        u_sim = this.mesh_vert.pos_u(li)
        v_sim = this.mesh_vert.pos_v(lj)
        verts_sim(i) = sketch__sim_pos_t(u_sim,v_sim)
      end do

      call sketch.polygon( contour_path.num,    &
                           verts_sim,           &
                           width_in_pixels,     &
                           line_color,          &
                           fill_color )
    end subroutine iDraw_contour

  end subroutine slice__scalar_vis_contour


  subroutine slice__vector_initialize( this,        &
                                       vert_nu,     &
                                       vert_nv,     &
                                       vert_u_min,  &
                                       vert_u_max,  &
                                       vert_v_min,  &
                                       vert_v_max,  &
                                       vect_u,      &
                                       vect_v )
    class(slice__vector_t) <out> :: this
    integer <in> :: vert_nu, vert_nv
    real <in> :: vert_u_min, vert_u_max
    real <in> :: vert_v_min, vert_v_max
    real, dimension(vert_nu,vert_nv) <optin> :: vect_u, vect_v

    real, dimension(vert_nu,vert_nv) :: amp_vect

    call this.mesh_vert.initialize( vert_nu,     &
                                    vert_nv,     &
                                    vert_u_min,  &
                                    vert_u_max,  &
                                    vert_v_min,  &
                                    vert_v_max )
    allocate(this.vect_u(vert_nu,vert_nv))
    allocate(this.vect_v(vert_nu,vert_nv))

    if ( present(vect_u) ) then
      this.vect_u(:,:) = vect_u(:,:)
    else
      this.vect_u(:,:) = 0.0
    end if

    if ( present(vect_v) ) then
      this.vect_v(:,:) = vect_v(:,:)
    else
      this.vect_v(:,:) = 0.0
    end if

    amp_vect = sqrt(vect_u**2+vect_v**2)

    this.amp_max = maxval(amp_vect)
    this.amp_min = minval(amp_vect)
  end subroutine slice__vector_initialize

  
  subroutine slice__vector_finalize( this )
    class(slice__vector_t) <io> :: this

    deallocate(this.vect_u)
    deallocate(this.vect_v)
    call this.mesh_vert.finalize
  end subroutine slice__vector_finalize


  subroutine slice__vector_set_val( this, vect_u, vect_v )
    class(slice__vector_t) <io> :: this
    real, dimension(this.mesh_vert.nu,this.mesh_vert.nv) <in> :: vect_u, vect_v

    this.vect_u(:,:) = vect_u(:,:)
    this.vect_v(:,:) = vect_v(:,:)
  end subroutine slice__vector_set_val


  subroutine slice__vector_vis_arrows( this, sketch )
    class(slice__vector_t) <io> :: this
    type(sketch_t) <io> :: sketch

    integer :: i, j
    real :: u, v

    do j = 1, this.mesh_vert.nv
      do i = 1, this.mesh_vert.nu
        u = this.mesh_vert.pos_u(i)
        v = this.mesh_vert.pos_v(j)
        call sketch.arrow( u, v, &
                           this.vect_u(i,j), &
                           this.vect_v(i,j) )
      end do
    end do
  end subroutine slice__vector_vis_arrows

end module slice_m

