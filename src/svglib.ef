module svglib_m
  use const_base_m
  use fileut_m
  implicit none
  private

  type, public :: svglib_fig_t
    char(len=300) :: file_name
    integer :: width, height
    integer :: file_unit
  contains
    procedure :: open => svglib__open
    procedure :: close => svglib__close
    procedure :: line => svglib__line
    procedure :: arrow => svglib__arrow
  end type svglib_fig_t

contains

  
  function get_date_and_time() result(string)
    ! copied from ut.ef
    char(len=8)  :: date   ! e.g., "20221126"
    char(len=10) :: time   ! "HHMMSS.sss"
    char(len=4)  :: year
    char(len=2)  :: month, day, hour, minute, second
    char(len=10) :: year_month_day     ! e.g., "2022.07.09"
    char(len=8)  :: hour_minute_second ! e.g., "16:56:00"
    char(len=19) :: string ! e.g., "2022.07.09/16:56:00"

    call date_and_time(date, time)

    year   = date(1:4)
    month  = date(5:6)
    day    = date(7:8)
    hour   = time(1:2)
    minute = time(3:4)
    second = time(5:6)

    year_month_day     = year // '.' // month // '.' // day
    hour_minute_second = hour // ':' // minute // ':' // second
    string = year_month_day // '/' // hour_minute_second
  end function get_date_and_time


  subroutine print_footer( unit )
    integer <in> :: unit
    write(unit, *) ' '
    write(unit, *) '</svg>'
  end subroutine print_footer


  subroutine print_header( unit, width, height )
    integer <in> :: unit, width,  height

    char(len=*), parameter :: STR_XMLNS = 'xmlns="http://www.w3.org/2000/svg"'
    char(len=100) :: str_width, str_height, str_viewbox

    write(str_width, "(a, i0, a)") 'width="', width, '"'
    write(str_height, "(a, i0, a)") 'height="', height, '"'
    write(str_viewbox, "(a, i0, 1x, i0, 1x, i0, 1x, i0, a)") 'viewBox="', 0, 0, width, height, '">'

    write(unit, *) '<svg '//STR_XMLNS//' '//trim(str_width)//' '//trim(str_height)//' '//trim(str_viewbox)
    write(unit, *) '<!--'
    write(unit, *) '   SVG file generated by __MODULE__'
    write(unit, *) '                      on '//get_date_and_time()
    write(unit, *) '-->'
    write(unit, *) ''    
  end subroutine print_header


  function r2s( val ) result(str)
    ! real to string
    real <in> :: val
    char(len=100) :: str

    write(str,"(f0.3)") val
  end function r2s


  subroutine svglib__arrow( this, x, y, vx, vy )
    class(svglib_fig_t) <in> :: this
    real <in> :: x, y, vx, vy

    real <const> :: VERY_SHORT = 10.0 ! 1.e-10
    real :: vector_amp, vx_norm, vy_norm
    real :: slightly_shifted_x
    real :: slightly_shifted_y

    vector_amp = sqrt(vx**2+vy**2)
    if ( vector_amp < VERY_SHORT ) return

    !!>
          1
         /     0: (x,y)
        /      1: (slightly...x,slightly...y)
       0
    !!<

    vx_norm = vx / vector_amp
    vy_norm = vy / vector_amp

    slightly_shifted_x = x + VERY_SHORT*vx_norm
    slightly_shifted_y = y + VERY_SHORT*vy_norm

    ! this.line( x, y,                &
    !            slightly_shifted_x,  &
    !            slightly_shifted_y,  &
    !            'blue',              &
    !            stroke_width=1.0 )

    call svglib__line( this, x, y, slightly_shifted_x, slightly_shifted_y, 'blue', 1.0 )    
  end subroutine svglib__arrow


  subroutine svglib__close( this )
    class(svglib_fig_t) <in> :: this

    call print_footer( this.file_unit )
    call fileut__close( this.file_unit )

  end subroutine svglib__close


  subroutine svglib__line( this, x1, y1, x2, y2, stroke, stroke_width )
    class(svglib_fig_t) <in> :: this

    real <in> :: x1, y1, x2, y2
    char(len=*) <in> :: stroke
    real <in> :: stroke_width

    integer :: unit

    unit = this.file_unit

    !!>
         <line x1="40" y1="220" x2="41" y2="219.9" 
          stroke="none" stroke-width="1" 
          marker-end="url(#arrow-blue)" />  
    !!<          

    write(unit,*) '<line' &
                //' x1="'//trim(r2s(x1))//'"'    &
                //' y1="'//trim(r2s(y1))//'"'    &
                //' x2="'//trim(r2s(x2))//'"'    &
                //' y2="'//trim(r2s(y2))//'"'    &
                //' stroke="'//trim(stroke)//'"'     &
                //' stroke-width="'//trim(r2s(stroke_width))//'"'  &
                //' />'

  end subroutine svglib__line


  subroutine svglib__open( this, file_name, width, height )
    class(svglib_fig_t) <io> :: this
    char(len=*) <in> :: file_name
    integer <optin> :: width, height

    this.file_name = trim(file_name)

    this.file_unit = fileut__open( file=trim(file_name),  &
                                   action="readwrite",    &
                                   status="unknown" ) 
    call iSet_width_and_height
    call print_header( this.file_unit, this.width, this.height )

  contains

    subroutine iSet_width_and_height
      if ( present(width) ) then
        this.width = width
      else
        this.width = 480 ! default value
      end if
  
      if ( present(height) ) then
        this.height = height
      else
        this.height = 640 ! default value
      end if
    end subroutine iSet_width_and_height

  end subroutine svglib__open

end module svglib_m