module svglib_m
  use const_base_m
  use fileut_m
  implicit none
  private

  type color_rgb_t
    real :: r, g, b
  end type color_rgb_t

  type color_hsv_t
    real :: hue, sat, val
  end type color_hsv_t

  type, public :: svglib_fig_t
    char(len=300) :: file_name
    integer :: width, height
    integer :: file_unit
    integer :: indent_level
  contains
    procedure :: group_begin => svglib__group_begin
    procedure :: group_end => svglib__group_end
    procedure :: open => svglib__open
    procedure :: close => svglib__close
    procedure :: line => svglib__line
    procedure :: arrow => svglib__arrow
    procedure :: text => svglib__text
  end type svglib_fig_t


contains

  subroutine assert( condition, lastwill )
    logical <in> :: condition
    char(len=*) <in> :: lastwill
    if ( .not. condition ) then
      print *, "__MODULE__: "//trim(lastwill)
      stop
    end if
  end subroutine assert
  

  function normalized_value_to_color_code( value ) result(color_code)
    real <in> :: value
    type(color_rgb_t) :: rgb
    type(color_hsv_t) :: hsv
    char(len=7) :: color_code ! '#FFFFFF' for white

    call assert( value >= 0.0 .and. value <= 1.0,  &
                 'Normalized value out of range.' )

    hsv.hue = 0.7 * value
    hsv.sat = 1.0
    hsv.val = 1.0
print *,' value = ', value

   rgb = iConvert_hsv_to_rgb( hsv )
   color_code = iConvert_rgb_to_code( rgb )

  contains

    function iConvert_hsv_to_rgb( hsv ) result (rgb)
      type(color_hsv_t) <in> :: hsv
      type(color_rgb_t) :: rgb
      !!>
          Copied from VFIVE.
      !!<
      integer :: hue_
      real :: local_, diff_, m, n, k;
  
      local_ = hsv.hue * 360.0;
  
      do while ( local_ >= 360.0 )
        local_ = local_ - 360.0;
        local_ = local_ / 60.0;
        hue_ = int(local_);
        diff_ = local_ - hue_;
        m = hsv.val * (1.0 - hsv.sat);
        n = hsv.val * (1.0 - hsv.sat * diff_);
        k = hsv.val * (1.0 - hsv.sat * (1.0 - diff_));
  
        select case (hue_) 
          case (0)
  	        rgb.r = hsv.val
  	        rgb.g = k
  	        rgb.b = m
          case (1)
            rgb.r = n
            rgb.g = hsv.val
            rgb.b = m
          case (2)
            rgb.r = m
            rgb.g = hsv.val
            rgb.b = k
          case (3)
            rgb.r = m
            rgb.g = n
            rgb.b = hsv.val
          case (4)
            rgb.r = k
            rgb.g = m
            rgb.b = hsv.val
          case (5)
            rgb.r = hsv.val
            rgb.g = m
            rgb.b = n
        end select
      end do
    end function iConvert_hsv_to_rgb

    function iConvert_rgb_to_code( rgb ) result(code) 
      type(color_rgb_t) <in> :: rgb
      char(len=7) :: code

      integer :: r, g, b

      r = nint(255*rgb.r)
      g = nint(255*rgb.g)
      b = nint(255*rgb.b)

      write(code,"('#'3(Z2.2))") r, g, b
    end function iConvert_rgb_to_code

  end function normalized_value_to_color_code
  

  function get_date_and_time() result(string)
    ! copied from ut.ef
    char(len=8)  :: date   ! e.g., "20221126"
    char(len=10) :: time   ! "HHMMSS.sss"
    char(len=4)  :: year
    char(len=2)  :: month, day, hour, minute, second
    char(len=10) :: year_month_day     ! e.g., "2022.07.09"
    char(len=8)  :: hour_minute_second ! e.g., "16:56:00"
    char(len=19) :: string ! e.g., "2022.07.09/16:56:00"

    call date_and_time(date, time)

    year   = date(1:4)
    month  = date(5:6)
    day    = date(7:8)
    hour   = time(1:2)
    minute = time(3:4)
    second = time(5:6)

    year_month_day     = year // '.' // month // '.' // day
    hour_minute_second = hour // ':' // minute // ':' // second
    string = year_month_day // '/' // hour_minute_second
  end function get_date_and_time


  subroutine indent_pop( this )
    type(svglib_fig_t) <io> :: this

    if ( this.indent_level > 0 ) then
      this.indent_level -= 1
    else
      ! Something is wrong, but do nothing, anyway.
    end if
  end subroutine indent_pop


  subroutine indent_push( this )
    type(svglib_fig_t) <io> :: this

    this.indent_level += 1
!debugp this.indent_level
  end subroutine indent_push



  subroutine print_footer( this )
    type(svglib_fig_t) <in> :: this

    call write_out( this, ' ' )
    call write_out( this, '</svg>' )
  end subroutine print_footer


  subroutine print_header( this, width, height )
    type(svglib_fig_t) <in> :: this
    integer <in> :: width,  height

    char(len=*), parameter :: STR_XMLNS = 'xmlns="http://www.w3.org/2000/svg"'
    char(len=100) :: str_width, str_height, str_viewbox

    write(str_width, "(a, i0, a)") 'width="', width, '"'
    write(str_height, "(a, i0, a)") 'height="', height, '"'
    write(str_viewbox, "(a, i0, 1x, i0, 1x, i0, 1x, i0, a)") 'viewBox="', 0, 0, width, height, '">'

    call write_out( this, '<svg '//STR_XMLNS//' '//trim(str_width)//' '//trim(str_height)//' '//trim(str_viewbox) )
    call write_out( this, '<!--' )
    call write_out( this, '   SVG file generated by __MODULE__' )
    call write_out( this, '                      on '//get_date_and_time() )
    call write_out( this, '-->' )
  end subroutine print_header



  subroutine print_marker_arrow( this, scale )
    type(svglib_fig_t) <in> :: this
    integer <in> :: scale

    real :: buffer, px, py, qx, qy, rx, ry, sx, sy, tx, ty
    real :: viewbox_upperleft_x, viewbox_upperleft_y
    real :: viewbox_lowerright_x, viewbox_lowerright_y
    real :: viewbox_width, viewbox_height

    !!>

                                     S
                                     * *
                                     *   *
                   P  *  *  *  *  *  Q  *  R
                   .     .     .     *   * .
                   .     .     .     * *   .
                   .     .     .     T     .
        -----------+-----+-----+-----+-----+-----+---
                   .     .     0     .     .     
                   .     .           .     .     
               -2*scale  .           .  2*scale  
                     -1*scale      scale         
    !!<    

    buffer = 1.0
    px = -2.0*scale
    py = 0.0
    qx = scale
    qy = 0.0
    rx = 2.0*scale
    ry = 0.0
    sx = scale
    sy = -scale*0.5
    tx = scale
    ty = scale*0.5
    viewbox_upperleft_x = px - buffer
    viewbox_upperleft_y = sy - buffer
    viewbox_lowerright_x = rx + buffer
    viewbox_lowerright_y = ty + buffer
    viewbox_width = viewbox_lowerright_x - viewbox_upperleft_x
    viewbox_height = viewbox_lowerright_y - viewbox_upperleft_y


    call write_out( this, '<marker'//' viewBox="'  &
                        //trim(r2s(viewbox_upperleft_x))//' '  &
                        //trim(r2s(viewbox_upperleft_y))//' '  &
                        //trim(r2s(viewbox_width))//' '  &
                        //trim(r2s(viewbox_height))//'"'  &
                        //' markerWidth="'//trim(r2s(viewbox_width))//'"' &
                        //' markerHeight="'//trim(r2s(viewbox_height))//'"' &
                        //' refX="'//trim("0.0")//'"'  &
                        //' refY="'//trim("0.0")//'"'  &
                        //' stroke="currentcolor"' &
                        //' fill="currentcolor"' &
                        //' id="arrow"' &
                        //' orient="auto">' )
    call write_out( this, '  <line x1="'//trim(r2s(px))  &
                              //'" y1="'//trim(r2s(py))  &
                              //'" x2="'//trim(r2s(qx))  &
                              //'" y2="'//trim(r2s(qy))  &
                              //'" stroke-width="2" />' )
    call write_out( this, '  <polygon points="'//trim(r2s(rx))  &
                                          //','//trim(r2s(ry))  &
                                          //' '//trim(r2s(sx))  &
                                          //','//trim(r2s(sy))  &
                                          //' '//trim(r2s(tx))  &
                                          //','//trim(r2s(ty))  &
                                          //'" />' )
    call write_out( this, '</marker>' )
  end subroutine print_marker_arrow


  function r2s( val ) result(str)
    ! real to string
    real <in> :: val
    char(len=100) :: str

    write(str,"(f0.3)") val
  end function r2s


  subroutine write_out( this, line )
    type(svglib_fig_t) <in> :: this
    char(len=*) <in> :: line

    integer <const> :: NUM_SPACES_PER_INDENT = 2
    integer :: num_spaces
    char(len=*) <const> :: BLANK_LINE = '                                         '

    num_spaces = this.indent_level*NUM_SPACES_PER_INDENT

    write(this.file_unit, *) BLANK_LINE(1:num_spaces)//trim(line)
  end subroutine write_out


  subroutine svglib__arrow( this, x, y, vx, vy )
    class(svglib_fig_t) <in> :: this
    real <in> :: x, y, vx, vy

    real <const> :: VERY_SHORT = 0.1 
    real :: vector_amp, vx_norm, vy_norm
    real :: slightly_shifted_x
    real :: slightly_shifted_y
    real :: amaf ! arrow_marker_amplification_factor

    logical :: first_time_call = .true.
    integer <const> :: ASCALE=10 ! arrow glyph length scale

    if (first_time_call) then
      call print_marker_arrow( this, scale=ASCALE )
      first_time_call = .false.
    end if

    vector_amp = sqrt(vx**2+vy**2)
    if ( vector_amp < VERY_SHORT ) return

    !!>
          1
         /     0: (x,y)
        /      1: (slightly...x,slightly...y)
       0
    !!<

    vx_norm = vx / vector_amp
    vy_norm = vy / vector_amp

    slightly_shifted_x = x + VERY_SHORT*vx_norm
    slightly_shifted_y = y + VERY_SHORT*vy_norm

    ! this.line( x, y,                &
    !            slightly_shifted_x,  &
    !            slightly_shifted_y,  &
    !            'blue',              &
    !            stroke_width=1.0 )

    amaf = vector_amp / real(ASCALE)
!debugp vector_amp, amaf    
    call svglib__line( this, x, y,          &
                       slightly_shifted_x,  &
                       slightly_shifted_y,  &
                       stroke="none",  &
                       stroke_width=amaf, &
                       marker_start="arrow" )
  end subroutine svglib__arrow


  subroutine svglib__close( this )
    class(svglib_fig_t) <in> :: this

    call print_footer( this )
    call fileut__close( this.file_unit )

  end subroutine svglib__close


  subroutine svglib__group_begin( this, attribute )
    class(svglib_fig_t) <io> :: this
    char(len=*) <in> :: attribute

    write(this.file_unit, *) ''
    write(this.file_unit, *) '<g '//trim(attribute)//'>'
!debugp 'calling indent_push'
    call indent_push( this )
!debugp 'called indent_push'    
  end subroutine svglib__group_begin


  subroutine svglib__group_end( this )
    class(svglib_fig_t) <io> :: this
    write(this.file_unit, *) '</g>'
    call indent_pop( this )
  end subroutine svglib__group_end


  subroutine svglib__line( this, x1, y1,  &
                                 x2, y2,  &
                                 stroke,  &
                                 stroke_width,  &
                                 marker_start,  &
                                 marker_end )
    class(svglib_fig_t) <in> :: this

    real <in> :: x1, y1, x2, y2
    char(len=*) <in> :: stroke
    real <in> :: stroke_width
    char(len=*) <optin> :: marker_start, marker_end

    integer :: unit

    unit = this.file_unit

    !!>
         <line x1="40" y1="220" x2="41" y2="219.9" 
          stroke="none" stroke-width="1" 
          marker-end="url(#arrow-blue)" />  
    !!<          

    if ( present(marker_start) ) then
      call write_out( this,                                     &
                      '<line'                                   &
                    //' x1="'//trim(r2s(x1))//'"'               &
                    //' y1="'//trim(r2s(y1))//'"'               &
                    //' x2="'//trim(r2s(x2))//'"'               &
                    //' y2="'//trim(r2s(y2))//'"'               &
                    //' stroke="'//trim(stroke)//'"'            &
                    //' stroke-width="'                         &
                                 //trim(r2s(stroke_width))//'"' &
                    //' marker-start='                          &
                          //'"url(#'//trim(marker_start)//')"'  &
                    //' />' )
    else if ( present(marker_end) ) then
      call write_out( this,                                     &
                      '<line'                                   &
                    //' x1="'//trim(r2s(x1))//'"'               &
                    //' y1="'//trim(r2s(y1))//'"'               &
                    //' x2="'//trim(r2s(x2))//'"'               &
                    //' y2="'//trim(r2s(y2))//'"'               &
                    //' stroke="'//trim(stroke)//'"'            &
                    //' stroke-width="'                         &
                                 //trim(r2s(stroke_width))//'"' &
                    //' marker-end='                            &
                          //'"url(#'//trim(marker_end)//')"'    &
                    //' />' )
    else
      call write_out( this,                                     &
                      '<line'                                   &
                    //' x1="'//trim(r2s(x1))//'"'               &
                    //' y1="'//trim(r2s(y1))//'"'               &
                    //' x2="'//trim(r2s(x2))//'"'               &
                    //' y2="'//trim(r2s(y2))//'"'               &
                    //' stroke="'//trim(stroke)//'"'            &
                    //' stroke-width="'                         &
                                 //trim(r2s(stroke_width))//'"' &
                    //' />' )
    end if

  end subroutine svglib__line


  subroutine svglib__open( this, file_name, width, height )
    class(svglib_fig_t) <io> :: this
    char(len=*) <in> :: file_name
    integer <in> :: width, height

real :: v
integer :: i
 char(len=7) :: sgks

    this.file_name = trim(file_name)
    this.indent_level = 0

    this.file_unit = fileut__open( file=trim(file_name),  &
                                   action="readwrite",    &
                                   status="unknown" ) 
    this.width = width
    this.height = height
    call print_header( this, this.width, this.height )

    do i = 0, 100
      v = 0.01*i
      sgks(1:7) = normalized_value_to_color_code( v )
      print *, sgks
    end do

  end subroutine svglib__open


  subroutine svglib__text( this, x, y, string, font_size,  &
                           color, text_anchor, stroke_width )
    class(svglib_fig_t) <in> :: this
    real <in> :: x, y
    char(len=*) <in> :: string
    real <in> :: font_size
    char(len=*) <optin> :: color
    char(len=*) <optin> :: text_anchor
    real <optin> :: stroke_width

    call write_out( this, '<text x="'//trim(r2s(x))//'" y="'//trim(r2s(y))//'"'  &
                                     //' font-size="'//trim(r2s(font_size))//'"'  &
                                     //' fill="'//trim(color)//'">' )
    call write_out( this, trim(string) )
    call write_out( this, '</text>' )

  end subroutine svglib__text

end module svglib_m