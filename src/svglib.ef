module svglib_m
  use color_m
  use const_base_m
  use fileut_m
  implicit none
  private
  public :: svglib__text_line
  public :: SVGLIB__BSL

  type, public :: svglib_t
    char(len=300) :: file_name
    real :: width, height
    integer :: file_unit
    integer :: indent_level
  contains
    procedure :: group_begin => svglib__group_begin
    procedure :: group_end => svglib__group_end
    procedure :: open => svglib__open
    procedure :: close => svglib__close
    procedure :: line => svglib__line
    procedure :: arrow => svglib__arrow
    procedure :: text => svglib__text
    procedure :: polygon => svglib__polygon
  end type svglib_t



  interface svglib__text_line
     module procedure text_line_str_i,                  &
                      text_line_str_str,                &
                      text_line_str_r,                  &
                      text_line_r1_comma_r2,            &
                      text_line_s1_r1_s2_r2,            &
                      text_line_str_r1_r2_r3_r4,        &
                      text_line_s1_r1_s2_r2_s3_r3_s4_r4
  end interface svglib__text_line

  char(len=1) <const> :: QUOTE = '"'
  char(len=1) <const> :: SPACE = ' '
  char(len=1) <const> :: COMMA = ','
  integer <const> :: SVGLIB__BSL = 100  ! Basic text string length
                                        ! e.g., '<line = "... >'

contains


  subroutine assert( condition, lastwill )
    logical <in> :: condition
    char(len=*) <in> :: lastwill
    if ( .not. condition ) then
      print *, "__MODULE__: "//trim(lastwill)
      stop
    end if
  end subroutine assert
  
  
  function text_line_str_r( string, r ) result(line)
    char(len=*) <in> :: string
    real <in> :: r  ! real value
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(r2s(r))//QUOTE
  end function text_line_str_r


  function text_line_r1_comma_r2( r1, r2 ) result(line)
    real <in> :: r1, r2  ! real value
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(r2s(r1)) // COMMA // SPACE // trim(r2s(r2))
  end function text_line_r1_comma_r2
  
  
  function text_line_str_str( string, str ) result(line)
    char(len=*) <in> :: string
    char(len=*) <in> :: str
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(str)//QUOTE
  end function text_line_str_str
  
  function text_line_s1_r1_s2_r2( s1, r1,   &
                                  s2, r2) result(line)
    char(len=*) <in> :: s1, s2
    real <in> :: r1, r2
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(s1)//QUOTE//trim(r2s(r1))//QUOTE   &
              //SPACE//trim(s2)//QUOTE//trim(r2s(r2))//QUOTE
  end function text_line_s1_r1_s2_r2

  
  function text_line_s1_r1_s2_r2_s3_r3_s4_r4( s1, r1,   &
                                              s2, r2,   &
                                              s3, r3,   &
                                              s4, r4 ) result(line)
    char(len=*) <in> :: s1, s2, s3, s4
    real <in> :: r1, r2, r3, r4
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(s1)//QUOTE//trim(r2s(r1))//QUOTE   &
              //SPACE//trim(s2)//QUOTE//trim(r2s(r2))//QUOTE   &
              //SPACE//trim(s3)//QUOTE//trim(r2s(r3))//QUOTE   &
              //SPACE//trim(s4)//QUOTE//trim(r2s(r4))//QUOTE
  end function text_line_s1_r1_s2_r2_s3_r3_s4_r4



  function text_line_str_r1_r2_r3_r4( string, r1, r2, r3, r4 ) result(line)
    char(len=*) <in> :: string
    real <in> :: r1, r2, r3, r4
    char(len=SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(r2s(r1))   &
                                   //SPACE//trim(r2s(r2))   &
                                   //SPACE//trim(r2s(r3))   &
                                   //SPACE//trim(r2s(r4))   &
                                   //QUOTE
  end function text_line_str_r1_r2_r3_r4

  
  function text_line_str_i( string, val ) result(line)
    char(len=*) <in> :: string
    integer <in> :: val
    char(len=SVGLIB__BSL) :: line

    write(line, "(a,a,i0,a)") trim(string), QUOTE, val, QUOTE
  end function text_line_str_i


  function get_date_and_time() result(string)
    ! copied from ut.ef
    char(len=8)  :: date   ! e.g., "20221126"
    char(len=10) :: time   ! "HHMMSS.sss"
    char(len=4)  :: year
    char(len=2)  :: month, day, hour, minute, second
    char(len=10) :: year_month_day     ! e.g., "2022.07.09"
    char(len=8)  :: hour_minute_second ! e.g., "16:56:00"
    char(len=19) :: string ! e.g., "2022.07.09/16:56:00"

    call date_and_time(date, time)

    year   = date(1:4)
    month  = date(5:6)
    day    = date(7:8)
    hour   = time(1:2)
    minute = time(3:4)
    second = time(5:6)

    year_month_day     = year // '.' // month // '.' // day
    hour_minute_second = hour // ':' // minute // ':' // second
    string = year_month_day // '/' // hour_minute_second
  end function get_date_and_time


  subroutine indent_pop( this )
    type(svglib_t) <io> :: this

    if ( this.indent_level > 0 ) then
      this.indent_level -= 1
    else
      ! Something is wrong, but do nothing, anyway.
    end if
  end subroutine indent_pop


  subroutine indent_push( this )
    type(svglib_t) <io> :: this

    this.indent_level += 1
  end subroutine indent_push


  subroutine print_footer( this )
    type(svglib_t) <in> :: this

    call write_out( this, ' ' )
    call write_out( this, '</svg>' )
  end subroutine print_footer



  subroutine print_header( this, width, height )
    type(svglib_t) <in> :: this
    real <in> :: width,  height

    char(len=*) <const> :: STR_XMLNS = 'xmlns="http://www.w3.org/2000/svg"'
    char(len=SVGLIB__BSL) :: str_width,   &
                             str_height,  &
                             str_viewbox

    str_width   = svglib__text_line( 'width=',  width )
    str_height  = svglib__text_line( 'height=', height )
    str_viewbox = svglib__text_line( 'viewBox=', 0.0, 0.0, width, height )

    call write_out( this, '<svg ' // STR_XMLNS          &
                         // SPACE // trim(str_width)    &
                         // SPACE // trim(str_height)   &
                         // SPACE // trim(str_viewbox)  &
                         // SPACE // '>' )
    call write_out( this, '<!-- SVG file generated by __MODULE__ on ' &
                           // get_date_and_time()                     &
                           // ' -->' )
  end subroutine print_header



  subroutine print_a_comment( this, message )
    type(svglib_t) <in> :: this
    char(len=*) <in> :: message
    call write_out( this, '<!-- ' // trim(adjustl(message)) // ' -->' )
  end subroutine print_a_comment  


  subroutine print_decorated_comment( this, message )
    type(svglib_t) <in> :: this
    char(len=*) <in> :: message
    !!>
        e.g., 
                <!-- ============ -->
                <!-- Arrow Marker -->
                <!-- ============ -->       
    !!<
    char(len=SVGLIB__BSL) :: str_deco
    str_deco = repeat('=', len_trim(adjustl(message)))
    call print_a_comment( this, str_deco )
    call print_a_comment( this, message )
    call print_a_comment( this, str_deco )
  end subroutine print_decorated_comment


  subroutine print_marker_arrow( this )
    type(svglib_t) <io> :: this

    real <const> :: ARROW_LENGTH_PIXEL_FOR_UNIT_VECT = 40.0
    real <const> :: ARROW_LINE_WIDTH_PIXEL_FOR_UNIT_VECT = 4.0

    real :: scale = ARROW_LENGTH_PIXEL_FOR_UNIT_VECT / 4

    real :: buffer, px, py, qx, qy, rx, ry, sx, sy, tx, ty
    real :: viewbox_upperleft_x, viewbox_upperleft_y
    real :: viewbox_lowerright_x, viewbox_lowerright_y
    real :: viewbox_width, viewbox_height

    integer :: nop  ! number of options
    integer <const> :: MAX_NOP = 20
    char(len=SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=SVGLIB__BSL*MAX_NOP) :: str_all

    !!>

                                     S
                                     * *
                                     *   *
                   P  *  *  *  *  *  Q  *  R
                   .     .     .     *   * .
                   .     .     .     * *   .
                   .     .     .     T     .
        -----------+-----+-----+-----+-----+-----+---
                   .     .     0     .     .     
                   .     .           .     .     
               -2*scale  .           .  2*scale  
                     -1*scale      scale         
    !!<    

    buffer = 1.0
    px = -2.0*scale
    py = 0.0
    qx = scale
    qy = 0.0
    rx = 2.0*scale
    ry = 0.0
    sx = scale
    sy = -scale*0.5
    tx = scale
    ty = scale*0.5
    viewbox_upperleft_x = px - buffer
    viewbox_upperleft_y = sy - buffer
    viewbox_lowerright_x = rx + buffer
    viewbox_lowerright_y = ty + buffer
    viewbox_width = viewbox_lowerright_x - viewbox_upperleft_x
    viewbox_height = viewbox_lowerright_y - viewbox_upperleft_y

    call write_out( this, '' )
    call print_decorated_comment( this, 'Arrow Marker' )

    nop = 0
    nop += 1; str(nop) = '<marker'
    nop += 1; str(nop) = svglib__text_line( 'viewBox=', viewbox_upperleft_x,   &
                                            viewbox_upperleft_y,   &
                                            viewbox_width,         &
                                            viewbox_height )
    nop += 1; str(nop) = svglib__text_line('markerWidth=',  viewbox_width )
    nop += 1; str(nop) = svglib__text_line('markerHeight=', viewbox_height )
    nop += 1; str(nop) = 'refX="0.0"'
    nop += 1; str(nop) = 'refY="0.0"'
    nop += 1; str(nop) = 'stroke="currentcolor"'
    nop += 1; str(nop) = 'fill="currentcolor"'
    nop += 1; str(nop) = 'id="arrow"' 
    nop += 1; str(nop) = 'orient="auto"'
    nop += 1; str(nop) = '>'

    call string_concatenate( nop, str, str_all )
    call write_out( this, str_all)
      call indent_push( this )
        str(1) = '<line'
        str(2) = svglib__text_line( 'x1=', px,  &
                                    'y1=', py,  &
                                    'x2=', qx,  &
                                    'y2=', qy )
        str(3) = svglib__text_line( 'stroke-width=',  &
                                    ARROW_LINE_WIDTH_PIXEL_FOR_UNIT_VECT )
        str(4) = '/>'
        str(5) = '<polygon points=' // QUOTE // trim(r2s(rx))  &
                                    // COMMA // trim(r2s(ry))  &
                                    // SPACE // trim(r2s(sx))  &
                                    // COMMA // trim(r2s(sy))  &
                                    // SPACE // trim(r2s(tx))  &
                                    // COMMA // trim(r2s(ty))  &
                                    // QUOTE // ' />'
        nop = 5
        call string_concatenate( nop, str, str_all )
        call write_out( this, str_all )
      call indent_pop( this )
    call write_out( this, '</marker>' )
 end subroutine print_marker_arrow


  function r2s( val ) result(str)
    ! real to string
    real <in> :: val
    char(len=100) :: str

    write(str,"(f0.2)") val
  end function r2s


  subroutine string_concatenate( n, str_array, str_concat )
    integer <in> :: n
    char(len=*), dimension(:) <in> :: str_array
    char(len=*) <out> :: str_concat

    integer :: i

    str_concat = ''
    do i = 1, n
      str_concat = trim(str_concat) // SPACE // trim(str_array(i))
    end do
  end subroutine string_concatenate
      

  subroutine write_out( this, line )
    type(svglib_t) <in> :: this
    char(len=*) <in> :: line

    integer <const> :: NUM_SPACES_PER_INDENT = 2
    integer :: num_spaces
    char(len=*) <const> :: BLANK_LINE = '                                         '

    num_spaces = this.indent_level*NUM_SPACES_PER_INDENT

    write(this.file_unit, *) BLANK_LINE(1:num_spaces)//trim(adjustl(line))
  end subroutine write_out


  subroutine svglib__arrow( this, x, y, vx, vy )
    class(svglib_t) <io> :: this
    real <in> :: x, y, vx, vy

    real <const> :: TOO_SMALL = 1.e-10  ! a tiny value.
    real :: vector_amp, vx_norm, vy_norm
    real <const> :: SLIGHTLY_SHIFT = 0.01
    real :: slightly_shifted_x
    real :: slightly_shifted_y
    real :: amaf ! arrow_marker_amplification_factor

    logical :: just_once = .true.
    real <const> :: ASCALE=1.0 ! arrow glyph length scale

    ==<just_once>==
      call print_marker_arrow( this )
    ==</just_once>==

    vector_amp = sqrt(vx**2+vy**2)
    if ( vector_amp < TOO_SMALL ) return

    !!>
          1
         /     0: (x,y)
        /      1: (slightly...x,slightly...y)
       0
    !!<

    vx_norm = vx / vector_amp
    vy_norm = vy / vector_amp

    slightly_shifted_x = x + SLIGHTLY_SHIFT*vx_norm
    slightly_shifted_y = y + SLIGHTLY_SHIFT*vy_norm

    amaf = vector_amp / real(ASCALE)
    amaf = 1.0
    call svglib__line( this, x, y,          &
                       slightly_shifted_x,  &
                       slightly_shifted_y,  &
                       width=amaf,          &
                       color="none",        &
                       marker_start="arrow" )
    amaf = 2.0
    call svglib__line( this, x, y+20,          &
                       slightly_shifted_x,  &
                       slightly_shifted_y+20,  &
                       width=amaf,          &
                       color="none",        &
                       marker_start="arrow" )
    amaf = 0.5
    call svglib__line( this, x, y-20,          &
                       slightly_shifted_x,  &
                       slightly_shifted_y-20,  &
                       width=amaf,          &
                       color="none",        &
                       marker_start="arrow" )
    amaf = 0.25
    call svglib__line( this, x, y-40,          &
                       slightly_shifted_x,  &
                       slightly_shifted_y-40,  &
                       width=amaf,          &
                       color="none",        &
                       marker_start="arrow" )
  end subroutine svglib__arrow


  subroutine svglib__close( this )
    class(svglib_t) <in> :: this

    call print_footer( this )
    call fileut__close( this.file_unit )
  end subroutine svglib__close


  subroutine svglib__group_begin( this, attribute )
    class(svglib_t) <io> :: this
    char(len=*) <in> :: attribute

    char(len=SVGLIB__BSL) :: str

    str = '<g' // SPACE // trim(attribute) // ' >'
    call write_out( this, str )
    call indent_push( this )
  end subroutine svglib__group_begin


  subroutine svglib__group_end( this )
    class(svglib_t) <io> :: this

    call indent_pop( this )
    call write_out( this, '</g>' )
  end subroutine svglib__group_end


  subroutine svglib__line( this, x1, y1,        &
                                 x2, y2,        &
                                 width,         &
                                 color,         &
                                 marker_start,  &
                                 marker_end )
    class(svglib_t) <in> :: this

    real <in> :: x1, y1, x2, y2
    real <optin> :: width
    char(len=*) <optin> :: color
    char(len=*) <optin> :: marker_start, marker_end

    integer :: n, nopt  ! number of options
    integer <const> :: MAX_NOP = 10
    char(len=SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=SVGLIB__BSL*MAX_NOP) :: str_all
    integer :: unit

    unit = this.file_unit

    !!>
         <line x1="40" y1="220" x2="41" y2="219.9" 
          stroke="none" stroke-width="1" 
          marker-end="url(#arrow-blue)" />  
    !!<          

    str(1) = svglib__text_line( 'x1=', x1,  &
                                'y1=', y1,  &
                                'x2=', x2,  &
                                'y2=', y2 )
    nopt = 1

    if ( present( width) ) then
      nopt += 1
      str(nopt) = svglib__text_line( 'stroke-width=', width )
    end if

    if ( present( color) ) then
      nopt += 1
      str(nopt) = 'stroke=' // QUOTE // trim(color) // QUOTE
    end if

    if ( present(marker_start) ) then
      nopt += 1
      str(nopt) = 'marker-start=' // QUOTE               &
                                  // 'url(#'             &
                                  // trim(marker_start)  &
                                  // ')'                 &
                                  // QUOTE 
    end if

    if ( present(marker_end) ) then
      nopt += 1
      str(nopt) = 'marker-end=' // QUOTE               &
                                // 'url(#'             &
                                // trim(marker_end)    &
                                // ')'                 &
                                // QUOTE 
    end if

    str_all = ''
    do n = 1, nopt
      str_all = trim(str_all) // SPACE // str(n)
    end do

    call write_out( this, '<line ' // trim(str_all) // '/>' )

  end subroutine svglib__line


  subroutine svglib__open( this, file_name, width, height )
    class(svglib_t) <io> :: this
    char(len=*) <in> :: file_name
    real <in> :: width, height

    this.file_name = trim(file_name)
    this.indent_level = 0

    this.file_unit = fileut__open( file=trim(file_name),  &
                                   action="readwrite",    &
                                   status="unknown" ) 
    this.width = width
    this.height = height
    call print_header( this, this.width, this.height )
  end subroutine svglib__open


  subroutine svglib__text( this, x, y,                &
                                 string,              &
                                 font_size_in_pixel,  &
                                 color,               &
                                 text_anchor,         &
                                 stroke_width )
    class(svglib_t) <io> :: this
    real <in> :: x, y
    char(len=*) <in> :: string
    real <in> :: font_size_in_pixel
    char(len=*) <optin> :: color
    char(len=*) <optin> :: text_anchor
    real <optin> :: stroke_width

    integer :: n, nopt   ! number of options
    integer <const> :: MAX_NOP = 10  ! max
    char(len=SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=SVGLIB__BSL*MAX_NOP) :: str_all

    str(1) = svglib__text_line( 'x=', x, 'y=', y )
    str(2) = svglib__text_line( 'font-size=',       &
                                 font_size_in_pixel )
    nopt = 2

    if ( present(color) ) then
      nopt += 1
      str(nopt) = 'fill=' // QUOTE // trim(color) // QUOTE
    end if

    if ( present(text_anchor) ) then
      nopt += 1
      str(nopt) = 'text-anchor=' // QUOTE // trim(text_anchor) // QUOTE
    end if

    call string_concatenate( nopt, str, str_all )

    call write_out( this, '<text' // trim(str_all) // '>' )
      call indent_push( this )
        call write_out( this, string )
      call indent_pop( this )
    call write_out( this, '</text>' )

  end subroutine svglib__text


  subroutine svglib__polygon( this, nverts,       &
                                    verts_x,      &
                                    verts_y,      &
                                    line_width,   &
                                    line_color,   &
                                    fill_color )
    class(svglib_t) <io> :: this
    integer <in> :: nverts
    real, dimension(nverts) :: verts_x
    real, dimension(nverts) :: verts_y 
    real <in> :: line_width
    char(len=*) <optin> :: line_color
    char(len=*) <optin> :: fill_color

    integer :: n, nopt   ! number of options
    integer <const> :: MAX_NOP = 10  ! max
    char(len=SVGLIB__BSL) :: str_coords
    char(len=SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=SVGLIB__BSL*MAX_NOP) :: str_all

    str(1) = '<polygon' 
    str(2) = svglib__text_line( 'stroke-width=', line_width )
    nopt = 2

    if ( present(line_color) ) then
      nopt += 1
      str(nopt) = svglib__text_line( 'stroke=', line_color )
    end if

    if ( present(fill_color) ) then
      nopt += 1
      str(nopt) = svglib__text_line( 'fill=', fill_color )
    end if

    nopt += 1
    str(nopt) = 'points=' // QUOTE

    call string_concatenate( nopt, str, str_all )

    call write_out( this, trim(adjustl(str_all)) )
      call indent_push( this )
       do n = 1, nverts
          str_coords = svglib__text_line( verts_x(n), verts_y(n) )
          call write_out( this, str_coords )
        end do
      call indent_pop( this )
    call write_out( this, QUOTE // '/>' )

  end subroutine svglib__polygon

end module svglib_m
