module sketch_m
  use color_m
  use svglib_m
  use ut_m
  implicit none
  private

  type, public :: sketch_pos_t
    real :: u, v
  end type sketch_pos_t

  type screen_pos_t
    real :: x, y
  end type screen_pos_t

  type screen_size_t
    real :: width, height
    real :: margin_x, margin_y
  end type screen_size_t

  type, public :: sketch_t
    type(screen_size_t) :: screen_size
    real :: u_max, u_min, v_max, v_min
    real :: dxdu, dydv
    char(len=300) :: title
    char(len=300) :: filename
    type(svglib_t) :: svglib
  contains
    procedure :: initialize => sketch__initialize
    procedure :: to_screen_pos => sketch__to_screen_pos
    procedure :: open => sketch__open
  end type sketch_t


contains

  subroutine sketch__open( this )
    class(sketch_t) <in> :: this

    call this.svglib.open( this.filename,  &
                           this.screen_size.width,  &
                           this.screen_size.height )

  end subroutine sketch__open


  subroutine sketch__close( this )
    class(sketch_t) <in> :: this

    call this.svglib.close
  end subroutine sketch__close


  subroutine sketch__line( this, u1, v1,  &
                                 u2, v2,  &
                                 color,   &
                                 width )
    class(sketch_t) <in> :: this
    real <in> :: u1, v1 ! line start position in simulation coords.
    real <in> :: u2, v2 ! line finish position in simulation coords.
    type(color_t) <optin> :: color
    real <optin> :: width

    type(screen_pos_t) :: start, finish

     start  = this.to_screen_pos( stetch_pos_t(u1,v1) )
     finish = this.to_screen_pos( stetch_pos_t(u2,v2) )

     call this.svglib.line( start.x, start.y,   &
                            finish.x, finish.y )

  end subroutine sketch__line


  function sketch__to_screen_pos( this, sketch_pos ) result(screen_pos)
    class(sketch_t) <in> :: this
    type(sketch_pos_t) <in> :: sketch_pos
    type(screen_pos_t) :: screen_pos

    !!>
                 umin   u           umax
             . mx .     .            .    
         .....____._____.____________.____
          my |    .     .            .    |
             |    +$ $ $. $ $ $ $ $ U-R...|...vmax
             |    $     .            $    |  .\
             |    $     .            $    |  . delta_v
             |    $     .            $    |  ./
             |    $.....*............$....|...v
             |    $     .\__(u,v)    $    |
             |    $     .            $    |
             |...L-L $ $.$ $ $ $ $ $ $....|...vmin
             |____._____._________________|
                  .     . 
                  .......
                  delta_u
    !!<
    real :: delta_u, delta_v 
    real :: mx, my   ! margin x and y
    delta_u = sketch_pos.u - this.u_min
    delta_v = this.v_max - sketch_pos.v
    mx = this.screen_size.margin_x
    my = this.screen_size.margin_y
    screen_pos.x = mx + this.dxdu*delta_u
    screen_pos.y = my + this.dydv*delta_v
  end function sketch__to_screen_pos


  subroutine sketch__initialize( this,                  &
                                 lower_left_in_phys,    &
                                 upper_right_in_phys,   &
                                 screen_width_in_pixel, &
                                 title,                 &
                                 filename )
    class(sketch_t) <out> :: this
    type(sketch_pos_t) <in> :: lower_left_in_phys,  &
                               upper_right_in_phys
    real <in> :: screen_width_in_pixel
    char(len=*) <in> :: title
    char(len=*) <in> :: filename

    real :: draw_area_width_in_phys,   &
            draw_area_height_in_phys
    real :: draw_area_width_in_pixel,  &
            draw_area_height_in_pixel
    real :: aspect_ratio
    real :: u_max, u_min, v_max, v_min

    u_max = upper_right_in_phys.u
    u_min =  lower_left_in_phys.u
    v_max = upper_right_in_phys.v
    v_min =  lower_left_in_phys.v

    call ut__assert( u_max > u_min .and.  &
                     v_max > v_min,       &
                     '__MODFUNC__: size error.' )

    this.title = title
    this.filename = filename

    !!>
        In the following fig, 
           L = lower_left (in meters),
           U = upper_right (in meters),
        are coordinates in the simulation
        data with physical unit, such as meters.

          mx = margin in x (in pixels)
          my = margin in y (in pixels)
              
             | mx |                  | mx |
         --- +----------------------------+---
          my |    |      title       |    |    \
         --- | ---+------------------U--- |     s  
             |    |                  |    |     c h
             |    |                  |    |     r e
             |    |                  |    |     e i
             |    |                  |    |     e h
         --- | ---L------------------+--- |     n g
          my |    |                  |    |    /  t
         --- +----------------------------+---     .
             |                            |         .
             |<------ screen width ------>|    (in pixels)
                      (in pixels)
    !!<

    draw_area_width_in_phys = u_max - u_min
    draw_area_height_in_phys = v_max - v_min
    aspect_ratio = draw_area_height_in_phys  &
                 / draw_area_width_in_phys

    this.screen_size.width = screen_width_in_pixel
    this.screen_size.margin_x = 0.1*screen_width_in_pixel
    this.screen_size.margin_y = this.screen_size.margin_x 

    ! Keeping the aspect ratio,
    draw_area_width_in_pixel = screen_width_in_pixel     &
                             - 2*this.screen_size.margin_x
    draw_area_height_in_pixel = draw_area_width_in_pixel &
                              * aspect_ratio
    this.screen_size.height = draw_area_height_in_pixel  &
                            + 2*this.screen_size.margin_y

    this.dxdu = this.screen_size.width / draw_area_width_in_phys   
    this.dydv = this.screen_size.height / draw_area_height_in_phys

    call ut__assert( this.dxdu > 0.0 .and. &
                     this.dydv > 0.0,      &
                     '__MODFUNC__: Something is strange.' )
  end subroutine sketch__initialize

end module sketch_m