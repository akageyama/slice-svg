module contour_path_m
  use ut_m
  use slice_mesh_m
  implicit none
  !!>
        P: positive edge: eastward for edgex and
                          northward for edgey
        M: negative edge: westward for edgex and
                          southward for edgey 
        1: vertex on which paths run straight forward.
        2: vertex on which paths turn left.
        3: vertex on which paths turn right.

       +---+---+---+---+---2=M=1=M=2
       |   |   |   |   |   M       P
       +---+---+---2=M=1=M=3=P=1=P=2
       |   |   |   M       P   |   |
       2=M=1=M=2---2=P=1=P=2---+---+
       M       P   |   |   |   |   |
       2=P=1=P=2=M=1=M=1=M=1=M=2---+
       |   |   M               P
       +---+---1           3=P=2
       |   |   M           P   |
       +---+---2=P=1=P=1=P=2---+
  !!<

  type contour_path_t
    integer :: vert_nu, vert_nv
    integer :: num ! total number of vertex points of the path
    integer, dimension(:), allocatable :: list_i, list_j
  contains
    procedure :: initialize => contour_path__initialize
    procedure :: reset => contour_path__reset
    procedure :: turn_left => contour_path__turn_left
    procedure :: turn_right => contour_path__turn_right
    procedure :: go_foward => contour_path__go_forward
    procedure :: closed_or_not => contour_path__closed_or_not
    procedure, pass :: trace_and_erase  &
                       => contour_path__trace_and_erase
    procedure, pass :: set_starting_edge &
                       => contour_path__set_starting_edge
  end type contour_path_t


contains


  function contour_path__closed_or_not( this, i_now, j_now ) result(ans)
    class(contour_path_t) <in> :: this
    integer <in> :: i_now, j_now
    logical :: ans
    ans = ( i_now == this.list_i(1) .and. &
            j_now == this.list_j(1) )
  end function contour_path__closed_or_not

 
  subroutine turn_left( edge,         &
                        vert_nu,      &
                        vert_nv,      &
                        direct_now,   &
                        i_now,        &
                        j_now )
    type(slice_mesh_edge_t) <io> :: edge
    integer <in> :: vert_nu, vert_nv
    integer <in> :: start_i, start_j
    char(len=1) <io> :: direct_now  ! E(ast)/N(orth)/W(est)/S(outh)-ward
    integer <io> :: i_now, j_now

    select case (direct_now)
      case ('E')
        !!>
               ^        
               |      You are now (i,j)=(i_now,j_now),
          E--> + --   at '+' point, and moving eastward.
               |      Checking if you can turn left (northward) or not.
        !!<
        call assert( j_now <= vert_nv-1,  &
                    'Impossible! You are going easthward on j=jmax?!' )
        if ( edge.v_ternary(i_now,j_now) == +1 ) then
          j_now += 1                         ! Move the head point
          direct_now = 'N'                   ! Turn 90 degree
          edge.u_ternary(i_now-1,j_now) = 0  ! Erase the edge
        end if
      case ('N')
        !!>
              | 
          <-- + --
              ^
              | 
              N
        !!<
        call assert( i_now >= 2,  &
                    'Impossible! You are going northward on i=1?!' )
        if ( edge.u_ternary(i_now-1,j_now) == -1 ) then
          i_now -= 1                         ! Move the head point
          direct_now = 'W'                   ! Turn 90 degree
          edge.v_ternary(i_now,j_now-1) = 0  ! Erase the edge
        end if
      case ('W')
        !!>
              | 
           -- + <---W
              |  
              v
        !!<
        call assert( j_now >= 2,  &
                    'Impossible! You are going westward on j=1?!' )
        if ( edge.v_ternary(i_now,j_now-1) == -1 ) then
          j_now -= 1                       ! Move the head point
          direct_now = 'S'                 ! Turn 90 degree
          edge.u_ternary(i_now,j_now) = 0  ! Erase the edge
        end if
      case ('S')
        !!>
              S
              | 
              v
           -- + -->
              |
        !!<
        call assert( i_now <= vert_nu-1,  &
                    'Impossible! You are going southward on i=imax?!' )
        if ( edge.u_ternary(i_now,j_now) == +1 ) then
          i_now += 1                       ! Move the head point
          direct_now = 'E'                 ! Turn 90 degree
          edge.v_ternary(i_now,j_now) = 0  ! Erase the edge
        end if
      case default
        call ut__fatal( 'Wrong direct case.' )
    end select

  end subroutine turn_left

 
  subroutine turn_right( edge,        &
                         vert_nu,     &
                         vert_nv,     &
                         direct_now,  &
                         i_now,       &
                         j_now )
    type(slice_mesh_edge_t) <io> :: edge
    integer <in> :: vert_nu, vert_nv
    char(len=1) <io> :: direct_now  ! E(ast)/N(orth)/W(est)/S(outh)-ward
    integer <io> :: i_now, j_now

    path_closed = .false.  ! default value.

    select case (direct_now)
      case ('E')
        !!>
                       
               |      You are now (i,j)=(i_now,j_now),
          E--> + --   at '+' point, and moving eastward.
               |      Checking if you can turn right (southward) or not.
               v
        !!<
        call assert( j_now >= 2,  &
                    'Impossible! You are going easthward on j=1?!' )
        if ( edge.v_ternary(i_now,j_now-1) == -1 ) then
          j_now -= 1                         ! Move the head point
          direct_now = 'S'                   ! Turn 90 degree
          edge.u_ternary(i_now-1,j_now) = 0  ! Erase the edge
        end if
      case ('N')
        !!>
              | 
           -- + -->
              ^
              | 
              N
        !!<
        call assert( i_now <= vert_nu-1,  &
                    'Impossible! You are going northward on i=imax?!' )
        if ( edge.u_ternary(i_now,j_now) == +1 ) then
          i_now += 1                         ! Move the head point
          direct_now = 'E'                   ! Turn 90 degree
          edge.v_ternary(i_now,j_now-1) = 0  ! Erase the edge
        end if
      case ('W')
        !!>
              ^
              | 
           -- + <---W
              |  
        !!<
        call assert( j_now <= vert_nv-1,  &
                    'Impossible! You are going westward on j=jmax?!' )
        if ( edge.v_ternary(i_now,j_now) == +1 ) then
          j_now += 1                       ! Move the head point
          direct_now = 'S'                 ! Turn 90 degree
          edge.u_ternary(i_now,j_now) = 0  ! Erase the edge
        end if
      case ('S')
        !!>
              S
              | 
              v
          <-- + -- 
              |
        !!<
        call assert( i_now >= 2 ,  &
                    'Impossible! You going southward on i=1?!' )
        if ( edge.u_ternary(i_now-1,j_now) == -1 ) then
          i_now -= 1                       ! Move the head point
          direct_now = 'W'                 ! Turn 90 degree
          edge.v_ternary(i_now,j_now) = 0  ! Erase the edge
        end if
      case default
        call ut__fatal( 'Wrong direct case.' )
    end select

  end subroutine turn_right  

 
  subroutine go_forward( edge,        &
                         vert_nu,     &
                         vert_nv,     &
                         direct_now,  &
                         i_now,       &
                         j_now )
    type(slice_mesh_edge_t) <io> :: edge
    integer <in> :: vert_nu, vert_nv
    char(len=1) <io> :: direct_now  ! E(ast)/N(orth)/W(est)/S(outh)-ward
    integer <io> :: i_now, j_now

    path_closed = .false.  ! default value.

    select case (direct_now)
      case ('E')
        !!>
                       
               |      You are now (i,j)=(i_now,j_now),
          E--> + -->  at '+' point, and moving eastward.
               |      Checking if you can go straight or not.

        !!<
        if ( i_now == vert_nu ) return  ! You cannot go forward.
        if ( edge.u_ternary(i_now,j_now) == +1 ) then 
          i_now += 1
        end if
      case ('N')
        !!>
               ^
               | 
            -- + --
               ^
               | 
               N
        !!<
        if ( j_now == vert_nv ) return  ! You cannot go forward.
        if ( edge.v_ternary(i_now,j_now) == +1 ) then
          j_now += 1
        end if
      case ('W')
        !!>
                | 
            <-- + <---W
                |  
        !!<
        if ( i_now == 1 ) return  ! You cannot go forward.
        if ( edge.u_ternary(i_now-1,j_now) == -1 ) then
          i_now -= 1
        end if
      case ('S')
        !!>
                S
                | 
                v
             -- + -- 
                |
                v
        !!<
        if ( j_now == 1 ) return  ! You cannot go forward.
        if ( edge.v_ternary(i_now,j_now-1) == -1 ) then
          j_now -= 1
        end if
      case default
        call ut__fatal( 'Wrong direct case.' )
    end select

  end subroutine go_forward


  subroutine contour_path__reset( this )
    class(contour_path_t) <io> :: this
    this.num = 0
    this.list_i(:) = 0
    this.list_j(:) = 0
    this.start_position_i = 0
    this.start_position_j = 0
  end subroutine contour_path__reset


  subroutine contour_path__initialize( this, vert_nu, vert_nv )
    class(contour_path_t) <out> :: this
    integer <in> :: vert_nu, vert_nv

    integer :: max_path_element_num

    max_path_element_num = vert_nu * vert_nv

    allocate(this.list_i(max_path_element_num))
    allocate(this.list_j(max_path_element_num))

    this.vert_nu = vert_nu
    this.vert_nv = vert_nv
    call contour_path__reset( this )
  end subroutine contour_path__initialize


  subroutine contour_path__set_starting_edge( this,         &
                                              mesh_edge,    &
                                              direct_now,        &
                                              status,            &
                                              i_now, j_now )
    class(contour_path_t) <io> :: this
    type(slice_mesh_edge_t) <in> :: mesh_edge
    char(len=1) <in> :: direct_now
    char(len=10) <out> :: status ! 'no contour' or 'have found'
    integer <out> :: i_now, j_now
    !!>
          Tring to find a eastward arrow AB.
              +---+---+---+
              |           |
              A==>B       +
                /  |       |
              /   +---+---+
              /
            This.
    !!< 
    integer :: ei, ej

    call ut__assert( direct_now=='E',  &
                    'We assume start edge is E(astward).' )
    call ut__assert( this.num == 0,  &
                    'Forgot resetting contour_path.' )

    do ej = 1, mesh_edge.u_nv
      do ei = 1, mesh_edge.u_nu
        if ( mesh_edge.u_ternary(ei,ej) == +1 ) then
          ! Found a boundary curve of 'E(astward)' direction.
          start_i = ei ! Vertex indexes of an left-end of
          start_j = ej ! an edge is the same as the edge indexes.
          call register( this, start_i, start_j )
          i_now = start_i + 1
          j_now = start_j
          call register( this, i_now, j_now )
          status = 'have found'
          return
        end if
      end do
    end do 
    status = 'no contour'
    call ut__fatal( 'Cound not find a start edge.' )
  end subroutine contour_path__set_starting_edge    


  subroutine countour_path__set_start_position( this, i, j )
    class(contour_path_t) <io> :: this
    integer <in> :: i, j

    call ut__assert( this.num == 0,   &
                    'You forgot to reset vert num.' )
    call register( this, i_now, j_now )
    this.start_position_i = i
    this.start_position_j = j
  end subroutine countour_path__set_start_position


  subroutine register( contour_path, i, j )
    type(contour_path_t) <io> :: contour_path
    integer <in> :: i, j

    integer :: n
    n = this.num + 1
    call assert( n <= size(contour_path.list_i,dim=1),  &
                'Increase array size of path_vert.' )
    contour_path.list_i(n) = i
    contour_path.list_j(n) = j
    contour_path.num = n
  end subroutine register


  subroutine contour_path__trace_and_erase( this,       &
                                            edge,       &
                                            vert_nu,    &
                                            vert_nv,    &
                                            direct_now, &
                                            i_now,      &
                                            j_now )
    class(contour_path_t) <io> :: this
    type(slice_mesh_edge_t) <in> :: mesh_edge
    integer <in> :: vert_nu, vert_nv
    integer <in> :: start_i, start_j
    char(len=1) <io> :: direct_now  ! E(ast)/N(orth)/W(est)/S(outh)-ward
    integer <in> :: i_now, j_now

    logical :: path_closed
    integer :: i_now_before, j_now_before

    do 
      i_now_before = i_now
      j_now_before = j_now
      !
      call turn_left( mesh_edge,     &
                      vert_nu,       &
                      vert_nv,       &
                      direct_now,    &
                      i_now,         &
                      j_now )
      if ( path_is_closed( this, i_now, j_now ) ) then
        return
      else
        call register( this, i_now, j_now )
      end if

      !
      ! right
      !
      call turn_right( mesh_edge,    &
                       vert_nu,      &
                       vert_nv,      &
                       direct_now,   &
                       i_now,        &
                       j_now )
      if ( path_is_closed( this, i_now, j_now ) ) then
        return
      else
        call register( this, i_now, j_now )
      end if

      !
      ! straight
      !
      call go_foward( mesh_edge,     &
                      vert_nu,       &
                      vert_nv,       &
                      direct_now,    &
                      i_now,         &
                      j_now )
      if ( path_is_closed( this, i_now, j_now ) ) then
        return
      else
      !!>
          We do not need to register the forward-stepped point,
          because the path
                   1---2---3
                           |          
                           4---5---6---7
          is the same as
                   1-------2
                           |          
                           3-----------4
      !!<
        ! call register( i_now, j_now )
        ! So, we do nothing here.
      end if

      call ut__assert( i_now /= i_now_before .and.  &
                       j_now /= j_now_before,       &
                      'Failed to follow the path?' )
    end do

  end subroutine contour_path__trace_and_erase


end module contour_path_m
