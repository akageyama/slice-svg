module contour_path_m
  use ut_m
  use slice_mesh_m
  implicit none
  private
  !!>

  !!<

  type, public :: contour_path__element_t
    char(len=1) :: which_edge ! 'u' or 'v'
    integer :: edge_i, edge_j
    integer :: direct
  end type contour_path__element_t

  type, public :: contour_path_t
    integer :: vert_nu, vert_nv
    integer :: num ! total number of vertex points of the path
    type(contour_path__element_t) :: start
    type(contour_path__element_t) :: head
    real, dimension(:), allocatable :: list_u, list_v
  contains
    procedure :: initialize => contour_path__initialize
    procedure :: reset => contour_path__reset
    procedure :: trace_and_erase  &
                       => contour_path__trace_and_erase
    procedure, pass :: set_starting_edge &
                       => contour_path__set_starting_edge
    procedure :: is_closed => contour_path__is_closed
  end type contour_path_t


contains

  subroutine move_if_possible_on_boundary( which_way,       &
                                           path,            &
                                           vert,            &
                                           edge,            &
                                           moved_one_step )
    char(len=*) <in> :: which_way
    type(contour_path_t) <in> :: path
    type(slice_mesh__vert_t) <in> :: vert
    type(slice_mesh__edge_t) <io> :: edge
    logical <out> :: moved_one_step

    moved_one_step = .false.  ! Default.

    ei = path.head.edge_i
    ej = path.head.edge_j

    select case (path.head.direct)
      case (SLICE_MESH__BORDER_NORTHWARD)    
        !!>
              .     |
              +-----+ 
              .     | you are here on the corner.
              .     |/
              +-----+
              .     |
        !!<
        call iJump_to_north_v_edge_if_possible( ei  , ej+1 )
        call iJump_to_north_u_edge_if_possible( ei-1, ej+1 ) 
        call iJumpt_to_west_v_edge_if_possible( ei-1, ej   )
        call iJump_to_south_u_edge_if_possible( ei-1, ej  )

  subroutine move_if_possible_in_bulk( which_way,       &
                                       path,            &
                                       vert,            &
                                       edge,            &
                                       moved_one_step )
    char(len=*) <in> :: which_way
    type(contour_path_t) <in> :: path
    type(slice_mesh__vert_t) <in> :: vert
    type(slice_mesh__edge_t) <io> :: edge
    logical <out> :: moved_one_step
    !!>

    !!<

    moved_one_step = .false.  ! Default.

    ei = path.head.edge_i
    ej = path.head.edge_j

    select case (path.head.direct)
      case (SLICE_MESH__PATH_NORTHWARD)
        call iJump_to_east_v_edge_if_possible ( ei+1, ej   ) ! turn right
        call iJump_to_north_u_edge_if_possible( ei  , ej+1 ) ! go forward
        call iJump_to_west_v_edge_if_possible ( ei  , ej   ) ! turn left
        if ( moved_one_step ) call mesh_edge.erase( 'u', ei, ej )
      case (SLICE_MESH__PATH_WESTWARD)
        call iJump_to_north_u_edge_if_possible( ei-1, ej+1 ) ! turn right
        call iJump_to_west_v_edge_if_possible ( ei-1, ej   ) ! go forward
        call iJump_to_south_u_edge_if_possible( ei-1, ej   ) ! turn left
        if ( moved_one_step ) call mesh_edge.erase( 'v', ei, ej )
      case (SLICE_MESH__PATH_SOUTHWARD)
        call iJump_to_west_v_edge_if_possible ( ei  , ej-1 ) ! turn right
        call iJump_to_south_u_edge_if_possible( ei  , ej-1 ) ! go forward
        call iJump_to_east_v_edge_if_possible ( ei+1, ej   ) ! turn left
        if ( moved_one_step ) call mesh_edge.erase( 'u', ei, ej )
      case (SLICE_MESH__PATH_EASTWARD)
        call iJump_to_south_u_edge_if_possible( ei  , ej   ) ! turn right
        call iJump_to_east_v_edge_if_possible ( ei+1, ej   ) ! go forward
        call iJump_to_north_u_edge_if_possible( ei  , ej+1 ) ! turn left
        if ( moved_one_step ) call mesh_edge.erase( 'v', ei, ej )
      case default
        call ut__fatal( '__MODFUNC__: case error.' )
    end select

  contains

    subroutine iJump_to_north_u_edge_if_possible( ei0, ej0 )
      integer <in> :: ei0, ej0
      real :: u, v
      if ( status == 'no contour' ) return
      if ( edge.u_quarter(ei0,ej0) == SLICE_MESH__EDGE_LEVEL_QUARTER_PM ) then
        status = 'have found'
        u = edge.u_cross_coord(ei0,ej0)
        v = vert.pos_v(ej0)
        call register( path, u, v )
        if ( ej0 == edge.u_nv ) then
          path.head = contour_path_element_t( 'u', ei0, ej0, SLICE_MESH__BORDER_WESTWARD )
        else
          path.head = contour_path_element_t( 'u', ei0, ej0, SLICE_MESH__NORTHWARD )
        end if    
      end if
    end subroutine iJump_to_north_u_edge_if_possible

    subroutine iJump_to_west_v_edge_if_possible( ei0, ej0 )
      integer <in> :: ei0, ej0
      real :: u, v
      if ( status == 'no contour' ) return
      if ( edge.v_quarter(ei0,ej0) == SLICE_MESH__EDGE_LEVEL_QUARTER_PM ) then
        status = 'have found'
        u = vert.pos_u(ei0)
        v = edge.v_cross_coord(ei0,ej0)
        call register( path, u, v )
        if ( ei0 == 1 ) then
          path.head = contour_path_element_t( 'v', ei0, ej0, SLICE_MESH__BORDER_SOUTHWARD )
        else
          path.head = contour_path_element_t( 'v', ei0, ej0, SLICE_MESH__WESTWARD )
        end if
      end if
    end subroutine iJump_to_west_v_edge_if_possible

    subroutine iJump_to_south_u_edge_if_possible( ei0, ej0 )
      integer <in> :: ei0, ej0
      real :: u, v
      if ( status == 'no contour' ) return
      if ( edge.u_quarter(ei0,ej0) == SLICE_MESH__EDGE_LEVEL_QUARTER_MP ) then
        status = 'have found'
        u = edge.u_cross_coord(ei0,ej0)
        v = vert.pos_v(ej0)
        call register( path, u, v )
        if ( ej0 == 1 ) then
          path.head = contour_path_element_t( 'u', ei0, ej0, SLICE_MESH__BORDER_EASTWARD )
        else
          path.head = contour_path_element_t( 'u', ei0, ej0, SLICE_MESH__SOUTHWARD )
        end if    
      end if
    end subroutine iJump_to_south_u_edge_if_possible    

    subroutine iJump_to_east_v_edge_if_possible( ei0, ej0 )
      integer <in> :: ei0, ej0
      real :: u, v
      if ( status == 'no contour' ) return
      if ( edge.v_quarter(ei0,ej0) == SLICE_MESH__EDGE_LEVEL_QUARTER_MP ) then
        status = 'have found'
        u = vert.pos_u(ei0)
        v = edge.v_cross_coord(ei0,ej0)
        call register( path, u, v )
        if ( ei0 == edge.u_nu ) then
          path.head = contour_path_element_t( 'v', ei0, ej0, SLICE_MESH__BORDER_NORTHWARD )
        else
          path.head = contour_path_element_t( 'v', ei0, ej0, SLICE_MESH__EASTWARD )
        end if
      end if
    end subroutine iJump_to_east_v_edge_if_possible

  end subroutine move_if_possible


  function contour_path__is_closed( this ) result(ans)
    class(contour_path_t) <in> :: this

    logical :: con1, con2, con3

    con1 = ( this.head.which_edge == this.start.which_edge )
    con2 = ( this.head.edge_i == this.start.edge_i )
    con3 = ( this.head.edge_j == this.start.edge_j )
    ans = ( con1 .and. con2 .and. con3 )
  end function contour_path__is_closed  


  subroutine contour_path__reset( this )
    class(contour_path_t) <io> :: this
    this.num = 0
    this.list_u(:) = 0.0
    this.list_v(:) = 0.0
  end subroutine contour_path__reset


  subroutine contour_path__initialize( this, vert_nu, vert_nv )
    class(contour_path_t) <out> :: this
    integer <in> :: vert_nu, vert_nv

    integer :: max_path_element_num

    max_path_element_num = vert_nu * vert_nv

    allocate(this.list_u(max_path_element_num))
    allocate(this.list_v(max_path_element_num))

    this.vert_nu = vert_nu
    this.vert_nv = vert_nv
    call contour_path__reset( this )
  end subroutine contour_path__initialize


  subroutine set_starting_edge_on_boundaries( path,         &
                                              mesh_vert,    &
                                              mesh_edge,    &
                                              status )
    type(contour_path_t) <io> :: path
    type(slice_mesh__vert_t) <in> :: mesh_vert
    type(slice_mesh__edge_t) <io> :: mesh_edge
    char(len=10) <io> :: status ! 'no contour' or 'have found'

    ! To shorten.
    integer <const> :: MM = SLICE_MESH__EDGE_LEVEL_QUARTER_MM
    integer <const> :: PP = SLICE_MESH__EDGE_LEVEL_QUARTER_PP
    integer <const> :: MP = SLICE_MESH__EDGE_LEVEL_QUARTER_MP
    integer <const> :: PM = SLICE_MESH__EDGE_LEVEL_QUARTER_PM

    integer <const> :: NORTHWARD = SLICE_MESH__PATH_NORTHWARD
    integer <const> :: WESTWARD  = SLICE_MESH__PATH_WESTWARD 
    integer <const> :: SOUTHWARD = SLICE_MESH__PATH_SOUTHWARD
    integer <const> :: EASTWARD  = SLICE_MESH__PATH_EASTWARD 

    integer <const> :: BORDER_NORTHWARD = SLICE_MESH__BORDER_NORTHWARD
    integer <const> :: BORDER_WESTWARD  = SLICE_MESH__BORDER_WESTWARD 
    integer <const> :: BORDER_SOUTHWARD = SLICE_MESH__BORDER_SOUTHWARD
    integer <const> :: BORDER_EASTWARD  = SLICE_MESH__BORDER_EASTWARD 


    !!>
         |       |       |    _ Contour line       
         m - - - m - - - m   /    at "level"
         |       |       * */             
         |       |    *  |   *   |       |       |      
         m - - - m -*- - p - - * m - - - m - - - m   ej=3
         |       *       |       *       |       |
         |     * |       |       | *     |       |
         m - -*- p - - - p - - - p - * - m - - - m   ej=2
         |    *  |       |       |    *  |       |
         |    *  |       |       |    *  |       |
         m - - * p * * * p * * * p * * - m - - - m   ej=1
    !!<    

    integer :: ei, ej
    real :: pos_u, pos_v

    call ut__assert( path.num == 0,  &
                    '__MODFUNC__: You forgot to reset contour_path.' )

    ! South boundary
    ej = 1
    do ei = 1, mesh_edge.u_nu
      quarter = mesh_edge.u_quarter(ei,ej)
      if ( quarter == PM  .or.  &
           quarter == MP  .or.  &
           quarter == PP ) then
        status = 'have found'
        path.start = contour_path_element_t( 'u', ei, ej, BORDER_EASTWARD )
        call mesh_edge.erase( 'u', slice_mesh_ivect_t(ei,ej) )
        !!>           
            [case PM]
                        |      *|     
                      - p - - * m -   
                        |    *  |     
                        |   *   |     
                        |  *    |     
                    * * p * ====m===  ej=1 (bottom)
                       /   \
            1st register    \
                             2nd register

            [case MP]
                        |*      |     
                      - m * - - p - - 
                        |  *    |     
                        |   *   |     
                        |    *  |     
                    ====m==== * p * *   ej=1 (bottom)
                             /   \
                  1st register    \
                                   2nd register

            [case PP]
                |*      |       |             
                *       |       |             
                p - - - p - - - p -           
                *       |       |             
                *       |       |             
                *       |       |             
                p * * * p * * * p * * ej=1 (bottom)   
        !!<
        select case (quarter)
          case (PM)
            u1 = mesh_vert.pos_u(ei)
            u2 = mesh_edge.u_cross_coord(ei,ej)
          case (MP)
            u1 = mesh_edge.u_cross_coord(ei,ej)
            u2 = mesh_vert.pos_u(ei+1)
          case (PP)
            u1 = mesh_vert.pos_u(ei)
            u2 = mesh_vert.pos_u(ei+1)
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select

        v1 = mesh_vert.pos_v(ej)
        call register( path, u1, v1 )
        call register( path, u2, v1 )

        select case (quarter)
          case (PM)
            path.head = contour_path_element_t( 'u', ei, ej, NORTHWARD )
          case (MP,PP)
            if ( ei < mesh_edge.u_nu ) then
              path.head = contour_path_element_t( 'u', ei+1, ej, BORDER_EASTWARD )
            else 
              ! you are on the south-east corner. turn north.
              path.head = contour_path_element_t( 'v', ei+1, ej, BORDER_NORTHWARD )
            end if
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select
        return
      end if
    end do

    ! East boundary
    !!>  
      [case MP]         
               .         *     
             - p - - - - p <-- 2nd register
               .         *
               .         * <-- 1st register
               .        *|     
               .       * |     
               .      *  |     
           * * p - - * - m
               .     *   |
                 
      [case PM]         
               .         |
             . p . . .*. m 
               .       * |     
               .        *|     
               .         *  <== 2nd register   
               .         *
             . p . . . . p  <== 1st register
               .         *
      
      [case PP]         
               .         *            
             - p - - - - p  <== 2nd register          
               .         *             
               .         *             
               .         *             
             - p - - - - p  <== 1st register
               .         *
    !!<
    ei = mesh_edge.v_nu
    do ej = 1, mesh_edge.v_nv
      quarter = mesh_edge.v_quarter(ei,ej)
      if ( quarter == PM  .or.  &
           quarter == MP  .or.  &
           quarter == PP ) then
        status = 'have found'
        path.start = contour_path_element_t( 'v', ei, ej, BORDER_NORTHWARD )
        call mesh_edge.erase( 'v', slice_mesh_ivect_t(ei,ej) )
        select case (quarter)
          case (PM)
            v1 = mesh_vert.pos_u(ej)
            v2 = mesh_edge.v_cross_coord(ei,ej)
          case (MP)
            v1 = mesh_edge.v_cross_coord(ei,ej)
            v2 = mesh_vert.pos_v(ej+1)
          case (PP)
            v1 = mesh_vert.pos_v(ej)
            v2 = mesh_vert.pos_v(ej+1)
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select

        u1 = mesh_vert.pos_u(ei)
        call register( path, u1, v1 )
        call register( path, u1, v2 )


        select case (quarter)
          case (PM)
            path.head = contour_path_element_t( 'v', ei, ej, WESTWARD )
          case (MP,PP)
            if ( ej < mesh_edge.v_nv ) then
              path.head = contour_path_element_t( 'v', ei, ej+1, BORDER_NORTHWARD )
            else 
              ! you are on the north-east corner. turn west.
              path.head = contour_path_element_t( 'u', ei-1, ej, BORDER_WESTWARD )
            end if
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select
        return
      end if
    end do  

    ! North boundary
    ej = mesh_edge.v_nv
    do ei = mesh_edge.u_nu, 1, -1
      quarter = mesh_edge.u_quarter(ei,ej)
      if ( quarter == PM  .or.  &
           quarter == MP  .or.  &
           quarter == PP ) then
        status = 'have found'
        path.start = contour_path_element_t( 'u', ei, ej, BORDER_WESTWARD )
        call mesh_edge.erase( 'u', slice_mesh_ivect_t(ei,ej) )

        select case (quarter)
          case (PM)
            !   2nd register     1st register
            !             \     /
            !          * * p * * - - m - 
            u1 = mesh_edge.u_cross_coord(ei,ej)
            u2 = mesh_vert.pos_u(ei)
          case (MP)
            !       2nd register       1st register
            !                 \       /
            !          - - m - * * * p *
            u1 = mesh_vert.pos_u(ei+1)
            u2 = mesh_edge.u_cross_coord(ei,ej)
          case (PP)
            !   2nd register           1st register
            !             \           /
            !          * * p * * * * p *
            u1 = mesh_vert.pos_u(ei+1)
            u2 = mesh_vert.pos_u(ei)
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select

        v1 = mesh_vert.pos_v(ej)
        call register( path, u1, v1 )
        call register( path, u2, v1 )

        select case (quarter)
          case (MP)
            path.head = contour_path_element_t( 'u', ei, ej, SOUTHWARD )
          case (PM,PP)
            if ( ei > 1 ) then
              path.head = contour_path_element_t( 'u', ei-1, ej, BORDER_WESTWARD )
            else 
              ! you are on the north-west corner. turn south.
              path.head = contour_path_element_t( 'v', 1, ej-1, BORDER_SOUTHWARD )
            end if
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select
        return
      end if
    end do


    ! West boundary
    ei = 1
    do ej = mesh_edge.v_nv, 1, -1
      quarter = mesh_edge.v_quarter(ei,ej)
      if ( quarter == PM  .or.  &
           quarter == MP  .or.  &
           quarter == PP ) then
        status = 'have found'
        path.start = contour_path_element_t( 'v', ei, ej, BORDER_SOUTHWARD )
        call mesh_edge.erase( 'v', slice_mesh_ivect_t(ei,ej) )
        select case (quarter)
          case (MP)
            v1 = mesh_vert.pos_u(ej+1)
            v2 = mesh_edge.v_cross_coord(ei,ej)
          case (PM)
            v1 = mesh_edge.v_cross_coord(ei,ej)
            v2 = mesh_vert.pos_v(ej)
          case (PP)
            v1 = mesh_vert.pos_v(ej+1)
            v2 = mesh_vert.pos_v(ej)
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select

        u1 = mesh_vert.pos_u(ei)
        call register( path, u1, v1 )
        call register( path, u1, v2 )

        select case (quarter)
          case (MP)
            path.head = contour_path_element_t( 'v', ei, ej, EASTWARD )
          case (PM,PP)
            if ( ej > 1 ) then
              path.head = contour_path_element_t( 'v', ei, ej-1, BORDER_SOUTHWARD )
            else 
              ! you are on the south-west corner. turn east.
              path.head = contour_path_element_t( 'u', ei, ej, BORDER_EASTWARD )
            end if
          case default
            call ut__fatal( "__MODFUNC__: case error." )
        end select
        return
      end if
    end do  

  end subroutine set_starting_edge_on_boundaries


  subroutine set_starting_edge_in_bulk( path,         &
                                        mesh_vert,    &
                                        mesh_edge,    &
                                        status )  
    type(contour_path_t) <io> :: path
    type(slice_mesh__vert_t) <in> :: mesh_vert
    type(slice_mesh__edge_t) <io> :: mesh_edge
    char(len=10) <io> :: status ! 'no contour' or 'have found'

    ! To shorten.
    integer <const> :: MM = SLICE_MESH__EDGE_LEVEL_QUARTER_MM
    integer <const> :: PP = SLICE_MESH__EDGE_LEVEL_QUARTER_PP
    integer <const> :: MP = SLICE_MESH__EDGE_LEVEL_QUARTER_MP
    integer <const> :: PM = SLICE_MESH__EDGE_LEVEL_QUARTER_PM
    integer <const> :: NORTHWARD = SLICE_MESH__PATH_NORTHWARD
    integer <const> :: WESTWARD  = SLICE_MESH__PATH_WESTWARD 
    integer <const> :: SOUTHWARD = SLICE_MESH__PATH_SOUTHWARD
    integer <const> :: EASTWARD  = SLICE_MESH__PATH_EASTWARD 
    integer <const> :: BORDER_NORTHWARD = SLICE_MESH__BORDER_NORTHWARD
    integer <const> :: BORDER_WESTWARD  = SLICE_MESH__BORDER_WESTWARD  
    integer <const> :: BORDER_SOUTHWARD = SLICE_MESH__BORDER_SOUTHWARD
    integer <const> :: BORDER_EASTWARD  = SLICE_MESH__BORDER_EASTWARD 

    !!>
          Tring to find a path that goes through an u-edge with "PM".

         | .    |       .
         |  .   |     . |
         |   .  |   .   |
       --m----.-p=.=====m--
         |      .   \_____ Find this edge.
    !!< 
    integer :: ei, ej
    integer :: quarter
    real :: path_tip_u, path_tip_v

    call ut__assert( path.num == 0,  &
                    '__MODFUNC__: You forgot to reset contour_path.' )
    !!> 
        Find a starting edge of a contour line for the input level.
        Mathematically, every contour line is closed unless it touches 
        on the boundary of the simulatin box (u=umin/umax or v=vmin/vmax).

        We set a virtual contour line along the boundary if the boudary grid
        vertices satisfy the condition 
            vert_val >= level  (denoted by "p" in the figure),
        see the upper right figure. 

        Since all contour lines are thus always closed, we first find an
        edge (starting edge) for each contour and draw the contour with
        keeping grid vertices with 
            vert_val >= level
        always in its left-hand side of the path.
        
        Starting edge of a trully closed contour (without touching the
        boundaries) is any u_edge with its quarter value "PM" (plus-in-left
        and minus-in-right of the edge).

        Cares should be taken for contour lines with virual (on-boundary)
        contours. 
                            contour line
      [Case A]                *                 
             ei     ei+1    *           [Case B]                ei=1
             |       |    *                               *   (right boundary)
         - - p - - - p -*-                |       |     * |       *
             |       |*                   |       |   *   |       *
             |      *|                  - m - - - m -*- - p - - - p
             |    *  |                    |       |  *    |       *
      ej - - p==*====m - -                |       |  *    |       *
             | *  \  |                    |       |  *    |       *
             |*   PM |                  - m - - - m -*- - p - - - p
             *      \                     |       | *     |       *
                     \                    |       |*      |       *
                   start edge             |      *|       |       *  ej=1    
                                        --m----***p*******p*******p (bottom
      [Case C]                             \     / \     / \     /   boundary) 
       ei=1 (left boundary)                   MP      PP      PP
        |     * |       |                              \
        |   *   |       |                               start edge
        m -*- - p - - - p -          [Case D]    
        | *     |       |                 |       |      *|       |
        |*      |       |             - - p - - - p - - * m - - - m - -
        *       |       |                 |       |    *  |       |
        p - - - p - - - p -               |       |   *   |       |
        *       |       |                 |       |  *    |       |   ej=1
        *       |       |              ***p*******p** - - m - - - m - (bottom
        *       |       |                  \     / \     / \     /     boundary)
        p*******p*******p*** ej=1             PP      PM      MM
         \     / \     /    (bottom                    \
            BB      BB       boundary)                  start edge
             \
              start edge
    !!< 

    do ej = 1, mesh_edge.u_nv
      do ei = 1, mesh_edge.u_nu
        quarter = mesh_edge.u_quarter(ei,ej)
        if ( quarter == PM ) then
          ! Found a cell that inlcude at least one contour path.
          ! [Case A] and [Case D] in above figure.
          !!> 
              path tip you
              have just found.  *
                        |    \ *      |
                       -p=====*-------m-
                        |    *     \  |
             contour ---|-->*       \ |
                        |  *         \ 
                        | *           \
                        |*             Next edge from which you
                                       will search for the next path.
          !!<
          status = 'have found'
          path.start = contour_path_element_t( 'u', ei, ej, NORTHWARD )
          call mesh_edge.erase( 'u', slice_mesh_ivect_t(ei,ej) )
          u = mesh_edge.u_cross_coord(ei,ej)
          v = mesh_vert.pos_v(ej)
          call register( path, u, v )
          path.head = contour_path_element_t( 'u', ei, ej, NORTHWARD )
  end subroutine set_starting_edge_in_bulk


  subroutine contour_path__set_starting_edge( this,         &
                                              mesh_vert,    &
                                              mesh_edge,    &
                                              status )
    class(contour_path_t) <io> :: this
    type(slice_mesh__vert_t) <in> :: mesh_vert
    type(slice_mesh__edge_t) <io> :: mesh_edge
    char(len=10) <out> :: status ! 'no contour' or 'have found'

    status = 'no contour'  ! default 

    call set_starting_edge_on_boundaries( this,         &
                                          mesh_vert,    &
                                          mesh_edge,    &
                                          status )
    if ( status == 'have found' ) return

    call set_starting_edge_in_bulk( this,         &
                                    mesh_vert,    &
                                    mesh_edge,    &
                                    status )

  end subroutine contour_path__set_starting_edge


  subroutine register( contour_path, u, v )
    type(contour_path_t) <io> :: contour_path
    real <in> :: u, v

    integer :: n

    n = contour_path.num + 1
    call ut__assert( n <= size(contour_path.list_u,dim=1),  &
                    '__MODFUNC__: Increase array size of path_vert.' )

    contour_path.list_u(n) = u
    contour_path.list_v(n) = v
    contour_path.num = n
  end subroutine register


  subroutine contour_path__trace_and_erase( this,       &
                                            mesh_vert,  &
                                            mesh_edge )
    class(contour_path_t) <io> :: this
    type(slice_mesh__vert_t) <in> :: mesh_vert
    type(slice_mesh__edge_t) <io> :: mesh_edge

    ! logical :: moved_one_step, 

    do
      call this.
        !!> 
          Turn left if you can.
                       C
                       |
                       |
                       |
            A -------> B <= You are here. Checking if you can
                  \         turn to the left (upward) direction.
                   \
                    You came along this edge.
        !!<
      call turn( 'left',          &
                 this,            &
                 mesh_edge,       &
                 direct_now,      &
                 vpos_now,        &
                 moved_one_step,  &
                 path_is_closed )
      if ( moved_one_step ) then
        !!>
            OK. You have turned to left. "vpos" has moved.
            
                         C <= You are here now.
                         |
                         M <= Place a path point at 
                         |    the middle of edge BC.
               A - - - - B
        !!<
        call register( this, mesh_vert, vpos_now )
      end if
      if ( this.is_closed ) return
        ! Your job is done if you have returned to the starting point.

      !!>
        You are at C. Turn right if you can the next step,
        and you will place another path point at the middle
        of edge CD.
        
           O - - - - - - - C - - - M - --> D
           |               |     *         |
           |               |   *           |
           |               | *             |
           |               M(iddle of BC)  |
           |             * |               |
           |           *   |               |
           |         *     |               |
           A - - - * - - - B - - - - - - - O
      !!<
      call turn( 'right',         &
                 this,            &
                 mesh_edge,       &
                 direct_now,      &
                 vpos_now,        &
                 moved_one_step,  &
                 path_is_closed )
      if ( moved_one_step ) then
        call register( this, mesh_vert, vpos_now )
      end if
      if ( this.is_closed ) return

      !!>
         If you could not turn left nor right, you should
         be able to go forward.
      !!<
      call turn( 'forward',       &
                 this,            &
                 mesh_edge,       &
                 direct_now,      &
                 vpos_now,        &
                 moved_one_step,  &
                 path_is_closed )
      if ( moved_one_step ) then
        call register( this, mesh_vert, vpos_now )
      end if
      if ( this.is_closed ) return
    end do

  end subroutine contour_path__trace_and_erase

end module contour_path_m
