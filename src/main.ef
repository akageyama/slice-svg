program main
  use color_m
  use const_base_m
  use sketch_m
  use slice_m
  implicit none

  type(sketch__sim_pos_t) :: cross_section_lower_left
  type(sketch__sim_pos_t) :: cross_section_upper_right

  integer <const> :: NU_VECTOR = 20,   NV_VECTOR = 10
  ! integer <const> :: NU_SCALAR = 1001, NV_SCALAR = 501
  integer <const> :: NU_SCALAR = 101, NV_SCALAR = 51
  integer :: i, j
  real :: pos_u, pos_v
  real :: pos_r, pos_r_sq
  real :: dipole_moment_p_u, dipole_moment_p_v
  real :: dipole_moment_p_amp
  real :: p_dot_r, factor
  real :: du_vector, dv_vector
  real :: du_scalar, dv_scalar
  real :: vector_normalization_factor
  real, dimension(NU_SCALAR,NV_SCALAR) :: pressure
  real, dimension(NU_VECTOR,NV_VECTOR) :: velocity_u, velocity_v

  real :: umin = -2*PI
  real :: umax = +2*PI
  real :: vmin = -PI
  real :: vmax = +PI

  cross_section_lower_left.u = umin
  cross_section_lower_left.v = vmin
  cross_section_upper_right.u = umax
  cross_section_upper_right.v = vmax

  call iSample_text_and_colors
  call iSample_lines

  ! sample scalar field
  du_scalar = (umax-umin)/(NU_SCALAR-1)
  dv_scalar = (vmax-vmin)/(NV_SCALAR-1)
  do j = 1, NV_SCALAR
    do i = 1, NU_SCALAR
      pos_u = umin + du_scalar*(i-1)
      pos_v = vmin + dv_scalar*(j-1)
      pressure(i,j) = exp(-3*(pos_u**2+pos_v**2)/(umax**2))
    end do
  end do
  call iSample_scalar( pressure )

  ! sample vector field
  ! we are setting a dipole field
  !   dipole_moment = (pu, pv)
  dipole_moment_p_u = 1.0
  dipole_moment_p_v = 1.0
  dipole_moment_p_amp = sqrt(dipole_moment_p_u**2   &
                           + dipole_moment_p_v**2)

  du_vector = (umax-umin)/(NU_VECTOR-1)
  dv_vector = (vmax-vmin)/(NV_VECTOR-1)  
  do j = 1, NV_VECTOR
    do i = 1, NU_VECTOR
      pos_u = umin + du_vector*(i-1)
      pos_v = vmin + dv_vector*(j-1)
      pos_r_sq = pos_u**2+pos_v**2
      pos_r = sqrt(pos_r_sq)
      p_dot_r = dipole_moment_p_u*pos_u   &
              + dipole_moment_p_v*pos_v
      factor = - 1.0/(4*PI*pos_r_sq)
      velocity_u(i,j) = factor * ( dipole_moment_p_u - 2*(p_dot_r/pos_r_sq)*pos_u )
      velocity_v(i,j) = factor * ( dipole_moment_p_v - 2*(p_dot_r/pos_r_sq)*pos_v )
    end do
  end do
  vector_normalization_factor = maxval( sqrt( velocity_u**2 + velocity_v**2 ) )
  velocity_u(:,:) = velocity_u(:,:) / vector_normalization_factor
  velocity_v(:,:) = velocity_v(:,:) / vector_normalization_factor
  call iSample_vector( velocity_u, velocity_v )

contains


  subroutine iSample_lines
    type(sketch_t) :: sketch
    type(sketch__sim_pos_t) :: ll ! lower left
    type(sketch__sim_pos_t) :: ur ! upper right
    type(color_t) :: black, gray
    
    black = COLOR__CONST.black
    gray = COLOR__CONST.gray(0.7)

    ll = sketch__sim_pos_t(0.0, 0.0)
    ur = sketch__sim_pos_t(1.0, 1.0)

    call sketch.initialize( ll, ur, &
                            screen_width_in_pixel=1000.0,  &
                            title='Line Samples',  &
                            filename='sample_line.svg' )

    call sketch.line( ll, ur,  &
                      line_width_in_pixel=2.0,  &
                      color=black )

    call sketch.group_push( line_width_in_pixel=1.0,  &
                            line_color=gray )
      call sketch.line( ll.u, ll.v,  &
                        ur.u, ll.v )
      call sketch.line( ll.u, ur.v,  &
                        ur.u, ll.v )
    call sketch.group_pop
    call sketch.finalize()                   
  end subroutine iSample_lines


  subroutine iSample_text_and_colors
    type(sketch_t) :: sketch
    type(sketch__sim_pos_t) :: ll ! lower left
    type(sketch__sim_pos_t) :: ur ! upper right

    ll = sketch__sim_pos_t(0.0, 0.3)
    ur = sketch__sim_pos_t(1.0, 1.6)
    call sketch.initialize( ll, ur, &
                            screen_width_in_pixel=1000.0,  &
                            title='Text and Color Samples',  &
                            filename='sample_text_color.svg' )
    call sketch.rectangle( ll, ur,  &
                           line_width_in_pixel=1.0,  &
                           line_color=color_t(0.3, 0.4, 0.8) )
    call sketch.text( 0.5, 1.5,  &
                      sketch.title,  &
                      font_size_in_pixel=50.0,  &
                      text_anchor='middle', &
                      color=COLOR__CONST.black )
    call sketch.text( 0.1, 1.4,  &
                      'black',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.black )
    call sketch.text( 0.1, 1.3,  &
                      'red',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.red )
    call sketch.text( 0.1, 1.2,  &
                   'green',  &
                   font_size_in_pixel=40.0,  &
                   text_anchor='start', &
                   color=COLOR__CONST.green )
    call sketch.text( 0.1, 1.1,  &
                      'blue',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.blue )
    call sketch.text( 0.1, 1.0,  &
                      'magenta',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.magenta )
    call sketch.text( 0.1, 0.9,  &
                      'yellow',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.yellow )
    call sketch.text( 0.1, 0.8,  &
                      'cyan',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.cyan )
    call sketch.text( 0.1, 0.7,  &
                      'gray(0.9)',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.gray(0.9) )
    call sketch.text( 0.1, 0.6,  &
                      'gray(0.8)',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.gray(0.8) )
    call sketch.text( 0.1, 0.5,  &
                      'gray(0.6)',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.gray(0.6) )
    call sketch.text( 0.1, 0.4,  &
                      'gray(0.4)',  &
                      font_size_in_pixel=40.0,  &
                      text_anchor='start', &
                      color=COLOR__CONST.gray(0.4) )
    call sketch.finalize()                   
  end subroutine iSample_text_and_colors



  subroutine iSample_scalar( pressure )
    real, dimension(NU_SCALAR,NV_SCALAR) <in> :: pressure

    type(sketch_t) :: sketch
    type(sketch__sim_pos_t) :: ll ! lower left
    type(sketch__sim_pos_t) :: ur ! upper right
    type(color_t) :: magenta

    type(slice__scalar_t) :: slice_pressure
    
    magenta = COLOR__CONST.magenta

    ll = sketch__sim_pos_t(umin, vmin)
    ur = sketch__sim_pos_t(umax, vmax)

    call slice_pressure.initialize( NU_SCALAR, NV_SCALAR,  &
                                    umin, umax,  &
                                    vmin, vmax,  &
                                    pressure )
    call sketch.initialize( ll, ur, &
                            screen_width_in_pixel=1200.0,  &
                            title='Pressure Field',  &
                            filename='sample_scalar.svg' )
    call sketch.text( (ll.u+ur.u)/2,  &
                      (ur.v*1.1),  &
                      sketch.title,  &
                      font_size_in_pixel=30.0,  &
                      text_anchor='middle', &
                      color=COLOR__CONST.black )

    call sketch.group_push( line_color=magenta,  &
                            line_width_in_pixel=2.0 )
      call slice_pressure.vis_contour( sketch, 0.1 )
      call slice_pressure.vis_contour( sketch, 0.2 )
      call slice_pressure.vis_contour( sketch, 0.3 )
      call slice_pressure.vis_contour( sketch, 0.4 )
      call slice_pressure.vis_contour( sketch, 0.5 )
      call slice_pressure.vis_contour( sketch, 0.6 )
      call slice_pressure.vis_contour( sketch, 0.7 )
      call slice_pressure.vis_contour( sketch, 0.8 )
      call slice_pressure.vis_contour( sketch, 0.9 )
    call sketch.group_pop
    call slice_pressure.finalize
    call sketch.rectangle( ll, ur,  &
                           line_width_in_pixel=2.0, &
                           line_color=COLOR__CONST.black )
    call sketch.finalize                 
  end subroutine iSample_scalar


  subroutine iSample_vector( velocity_u, velocity_v )
    real, dimension(NU_VECTOR,NV_VECTOR) <in> :: velocity_u,  &
                                                 velocity_v

    type(sketch_t) :: sketch
    type(sketch__sim_pos_t) :: ll ! lower left
    type(sketch__sim_pos_t) :: ur ! upper right

    type(slice__vector_t) :: slice_velocity
    
    ll = sketch__sim_pos_t(umin, vmin)
    ur = sketch__sim_pos_t(umax, vmax)
    
    call slice_velocity.initialize( NU_VECTOR,  &
                                    NV_VECTOR,  &
                                    umin, umax, &
                                    vmin, vmax,  &
                                    velocity_u,  &
                                    velocity_v )
    call sketch.initialize( ll, ur, &
                            screen_width_in_pixel=1200.0,  &
                            title='Velocity Field',  &
                            filename='sample_vector.svg' )
    call sketch.text( (ll.u+ur.u)/2,  &
                      (ur.v*1.1),  &
                      sketch.title,  &
                      font_size_in_pixel=30.0,  &
                      text_anchor='middle', &
                      color=COLOR__CONST.black )

    call sketch.group_push( line_color=COLOR__CONST.blue )
      call slice_velocity.vis_arrows( sketch )
    call sketch.group_pop
    call slice_velocity.finalize
    call sketch.rectangle( ll, ur,  &
                           line_width_in_pixel=2.0, &
                           line_color=COLOR__CONST.black )
    call sketch.finalize                 
  end subroutine iSample_vector

end program main
