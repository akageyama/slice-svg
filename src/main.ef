program main
  use const_base_m
  use svglib_m
  use slice_m
  implicit none

  type(svglib_fig_t) :: fig01, fig02, fig03
  type(slice__scalar_t) :: prs

  integer :: window_width = 1200
  integer :: window_height = 1000
  integer :: i, j
  real :: x, y, xmin, ymin, xmax, ymax

  integer <const> :: NU = 101, NV = 51

  real :: umin = -2*PI
  real :: umax = +2*PI
  real :: vmin = -PI
  real :: vmax = +PI

  real :: du, dv, u, v

  real, dimension(NU,NV) :: pressure

  type(slice__scalar_t) :: pres

  real :: theta = 0.0

  call const_base__check

  du = (umax-umin)/(NU-1)
  dv = (vmax-vmin)/(NV-1)

  do j = 1, NV
    do i = 1, NU
      u = umin + du*(i-1)
      v = vmin + dv*(j-1)
      pressure(i,j) = u**2+v**2
    end do
  end do

  
  xmin = 0.0
  ymin = 0.0
  xmax = window_width
  ymax = window_height

  call fig01.open( 'test.svg', width=window_width, height=window_height )
  call fig01.group_begin( 'color="blue"' )

  call pres.initialize( NU, NV, umin, umax, vmin, vmax, pressure )
  call pres.vis_contour( 1.0 )

  do j = 1, NV
    do i = 1, NU-1
      if ( pres.mesh_edge.u_ternary(i,j) == 1 ) then
        u = pres.mesh_vert.pos_u(i)
        v = pres.mesh_vert.pos_v(j)
        x = window_width*(0.1 + (u-umin)/(umax-umin)*0.8)
        y = window_height*(0.1 + (v-vmin)/(vmax-vmin)*0.8)
!        call fig01.arrow( x, y, 10*cos(theta), 10*sin(theta) )
        call fig01.line( x, y, x+10, y, stroke="black", stroke_width=1.0 )
      end if
    end do
  end do
      
  call pres.finalize

  do i = 0, 10
    x = window_width/10.0 * i
    call fig01.line( x, ymin, x, ymax, stroke="black", stroke_width=1.0 )
  end do
  do j = 0, 10
    y = window_height/10.0*j
    call fig01.line( xmin, y, xmax, y, stroke="black", stroke_width=1.0 )
  end do


  do i = 0, 10
  do j = 0, 10
    theta += PI/10
    x = window_width/10.0 * i
    y = window_height/10.0 * j
    call fig01.arrow( x, y, 10*cos(theta), 10*sin(theta) )
!    call fig01.text( x, y, "test", 40.0, color="red" )
    call fig01.text( x, y, "test", 40.0 )
  end do
  end do
  call fig01.group_end()
  call fig01.close
end program main
