module vv_slice_scalar_m
  !!>
      vv_slice_scalar.ef

      Visualize 2-dimensional cross sections 
      of 3- (or more) dimensional simulation data.

      Draw contour lines for scalar fields.

      Draw vector arrow glyphs for vector fields.
      
      In this module, positions are specified by the
      simulation coordinates (u,v) with simulation unit
      such as meters.

  !!< 
  use vv_m
  use vv_color_m
  use vv_slice_mesh_m
  use vv_slice_isoline_m
  use vv_sketch_m
  implicit none
  private

  integer <const> :: TAG_NAME_MAX = 100

  type, public :: vv_slice_scalar_t
    char(len=TAG_NAME_MAX) :: tag
    type(vv_slice_mesh_t) :: mesh
    real, dimension(:,:), allocatable :: val_vert
    real :: val_vert_max, val_vert_min
  contains
    procedure :: initialize => vv_slice_scalar__initialize
    procedure :: finalize => vv_slice_scalar__finalize
    procedure :: set_val => vv_slice_scalar__set_val
    procedure :: vis_contour => vv_slice_scalar__vis_contour
    procedure :: debug_print => vv_slice_scalar__debug_print
  end type vv_slice_scalar_t


contains


  subroutine vv_slice_scalar__debug_print( scalar, ifrom,  &
                                                   ito,    &
                                                   jfrom,  &
                                                   jto )
    class(vv_slice_scalar_t) <in> :: scalar
    integer <in> :: ifrom, ito, jfrom, jto

    integer :: i, j
    char(len=13) :: str13_val
    char(len=4) :: str4_int
    char(len=1000) :: line
    integer :: cc ! character counter

    print *,' --- '
    do j = jto, jfrom, -1
      line = '' ! reset
      line(1:2) = 'j='
      cc = 3
      str4_int = vv__int_to_char4( j )
      line(cc:cc+3) = str4_int
      cc += 4
      line(cc:cc+1) = ' |'
      cc += 2
      do i = ifrom, ito
        line(cc:cc) = ' '
        cc += 1
        str13_val = vv__real_to_str13( scalar.val_vert(i,j) )
        line(cc:cc+12) = str13_val(1:13)
        cc += 13
      end do
      print *, trim(line)
    end do
    print *, repeat('-',cc) !! horizontal line
    line = '' ! reset
    line(1:8) = '        '
    cc = 9
    !           'j=0003 |'
    do i = ifrom, ito
      str4_int = vv__int_to_char4( i )
      line(cc:cc+13) = '    i=' // str4_int // '    '
      cc += 14
    end do
    print *, trim(line)
    print *,' --- '

  end subroutine vv_slice_scalar__debug_print


  subroutine vv_slice_scalar__vis_contour( scalar,          &
                                           vv_sketch,       &
                                           level,           &
                                           width_in_pixels, &
                                           line_color,      &
                                           fill_color,      &
                                           line_dash_array, &
                                           debug_print )
    class(vv_slice_scalar_t) <io> :: scalar
    type(vv_sketch_t) <io> :: vv_sketch
    real <in> :: level
    real <optin> :: width_in_pixels
    type(vv_color_t) <optin> :: line_color
    type(vv_color_t) <optin> :: fill_color
    logical <optin> :: debug_print
    char(len=*) <optin> :: line_dash_array

    integer :: nu, nv
    type(vv_slice_isoline_t), save :: vv_slice_isoline
    logical :: just_once = .true.
    char(len=10) :: status
    type(vv_sketch__sim_pos_t), dimension(:), allocatable, save :: verts_sim
    character, dimension(:), allocatable, save :: path_directive
    character :: SVG_directive
    integer :: i, counter
    real :: u_sim, v_sim, dummy

    !追加
    character(20) :: level_str
    write (level_str,*) level

    nu = scalar.mesh.vert.nu
    nv = scalar.mesh.vert.nv

    ==<just_once>==
      call vv_slice_isoline.initialize( nu, nv )
      allocate(verts_sim(nu*nv*10))
      allocate(path_directive(nu*nv*10))
    ==</just_once>==

    call scalar.mesh.edge.set_quarter( scalar.mesh.vert,  &
                                       scalar.val_vert,   &
                                       level )
    ! The following debug functions were useful.
    if ( present(debug_print) ) then
      if ( debug_print ) then
        call scalar.mesh.debug_print( 15, 19, 1, 4 )
        call scalar.debug_print( 15, 19, 1, 8 )
        call scalar.debug_print( 15, 19, nv-7, nv )
      end if
    end if

    call scalar.mesh.boundary.set_quarter( scalar.mesh.vert,  &
                                           scalar.mesh.edge )
    call vv_slice_isoline.reset
    call vv_slice_isoline.set_start_edge( scalar.mesh.vert,     &
                                          scalar.mesh.edge,     &
                                          scalar.mesh.boundary, &
                                          status )
    counter = 0
    do while ( status == 'have found' )
      !!  Tring to find the 1st contour for this level.
      call vv_slice_isoline.trace_and_erase( scalar.mesh.vert,    &
                                             scalar.mesh.edge,    &
                                             scalar.mesh.boundary )
      call  vv__assert( vv_slice_isoline.num >= 2,  &
                        "__MODLINE__: Path too short." )
        
      do i = 1, vv_slice_isoline.num
        counter += 1
        if ( i == 1 ) then
          SVG_directive = 'M' ! Move to 
        else if ( i == 2 ) then
          SVG_directive = 'L' ! Line to
        else
          SVG_directive = ' ' ! Line to (You can ommit this after 1st 'L'.)
        end if
        path_directive(counter) = SVG_directive 
        u_sim = vv_slice_isoline.list_u(i)
        v_sim = vv_slice_isoline.list_v(i)
        verts_sim(counter) = vv_sketch__sim_pos_t(u_sim,v_sim)
      end do

      ! To close the path
      counter += 1
      path_directive(counter) = 'Z' ! Close the sub-path.
      dummy = 0.0  ! any number
      verts_sim(counter) = vv_sketch__sim_pos_t( dummy, dummy )

      !!  Generally, more contours exist for this level.
      call vv_slice_isoline.reset
      call vv_slice_isoline.set_start_edge( scalar.mesh.vert,     &
                                            scalar.mesh.edge,     &
                                            scalar.mesh.boundary, &
                                            status )
    end do

    if ( counter > 1 ) then
      call vv_sketch.path( counter,             &
                           path_directive,      &
                           verts_sim,           &
                           width_in_pixels,     &
                           line_color,          &
                           fill_color,          &
                           line_dash_array,     &
                           trim(adjustl(level_str)) ) !追加      
    end if

  end subroutine vv_slice_scalar__vis_contour



  subroutine vv_slice_scalar__initialize( scalar, tag,        &
                                                  nu, nv,     &
                                                  grid_pos_u, &
                                                  grid_pos_v, &
                                                  val,        &
                                                  grid_flag )
    class(vv_slice_scalar_t) <out> :: scalar
    char(len=*) <in> :: tag
    integer <in> :: nu, nv
    real, dimension(nu) <in> :: grid_pos_u
    real, dimension(nv) <in> :: grid_pos_v
    real, dimension(nu,nv) <optin> :: val
    character, dimension(nu,nv) <optin> :: grid_flag

    allocate(scalar.val_vert(nu,nv))

    scalar.tag = tag

    call vv__assert( size(grid_pos_u,dim=1) == nu .and. &
                     size(grid_pos_v,dim=1) == nv,      &
                     "__MODLINE__: " //                 &
                     "grid size inconsistent." )


    call scalar.mesh.initialize( nu, nv,     &
                                 grid_pos_u, &
                                 grid_pos_v, &
                                 grid_flag )

    if ( present(val) ) then
      scalar.val_vert(:,:) = val(:,:)
    else
      scalar.val_vert(:,:) = 0.0
    end if

  end subroutine vv_slice_scalar__initialize


  subroutine vv_slice_scalar__set_val( scalar, nu, nv, val )
    class(vv_slice_scalar_t) <io> :: scalar
    integer <in> :: nu, nv
    real, dimension(nu,nv) <in> :: val

    scalar.val_vert(:,:) = val(:,:)
    scalar.val_vert_max = maxval(val)
    scalar.val_vert_min = minval(val)
  end subroutine vv_slice_scalar__set_val


  subroutine vv_slice_scalar__finalize( scalar )
    class(vv_slice_scalar_t) <io> :: scalar

    deallocate(scalar.val_vert)
    call scalar.mesh.finalize
  end subroutine vv_slice_scalar__finalize

end module vv_slice_scalar_m

