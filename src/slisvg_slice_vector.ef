module slisvg_slice_vector_m
  !!>
      slisvg_slice: Visualize 2-dimensional cross sections 
      of 3- (or more) dimensional simulation data.

      Draw vector arrow glyphs for vector fields.
      
      In this module, positions are specified by the
      simulation coordinates (u,v) with simulation unit
      such as meters.

  !!< 
  use slisvg_m
  use slisvg_color_m
  use slisvg_slice_mesh_m
  use slisvg_slice_isoline_m
  use slisvg_sketch_m
  implicit none
  private

  integer <const> :: TAG_NAME_MAX = 100

  type, public :: slisvg_slice_vector_t
    char(len=TAG_NAME_MAX) :: tag
    type(slisvg_slice_mesh_t) :: mesh
    real, dimension(:,:), allocatable :: comp_u
    real, dimension(:,:), allocatable :: comp_v
    real :: amp_max, amp_min
  contains
    procedure :: initialize => slisvg_slice_vector__initialize
    procedure ::   finalize => slisvg_slice_vector__finalize    
    procedure ::    set_val => slisvg_slice_vector__set_val
    procedure :: vis_arrows => slisvg_slice_vector__vis_arrows
  end type slisvg_slice_vector_t


contains


  subroutine slisvg_slice_vector__initialize( vector, tag,        &
                                                      nu, nv,     &
                                                      grid_pos_u, &
                                                      grid_pos_v, &
                                                      comp_u,     &
                                                      comp_v,     &
                                                      grid_flag )
    class(slisvg_slice_vector_t) <out> :: vector
    char(len=*) <in> :: tag
    integer <in> :: nu, nv
    real, dimension(nu) <in> :: grid_pos_u
    real, dimension(nv) <in> :: grid_pos_v
    real, dimension(nu,nv) <optin> :: comp_u, comp_v
    character, dimension(nu,nv) <optin> :: grid_flag

    real, dimension(nu,nv) :: amp_vect

    vector.tag = tag

    call vector.mesh.initialize( nu, nv,     &
                                 grid_pos_u, &
                                 grid_pos_v, &
                                 grid_flag )

    allocate(vector.comp_u(nu,nv))
    allocate(vector.comp_v(nu,nv))

    if ( present(comp_u) .and. present(comp_v) ) then
      vector.comp_u(:,:) = comp_u(:,:)
      vector.comp_v(:,:) = comp_v(:,:)
      amp_vect = sqrt(comp_u**2+comp_v**2)
      vector.amp_max = maxval(amp_vect)
      vector.amp_min = minval(amp_vect)
    else
      vector.comp_u(:,:) = 0.0
      vector.comp_v(:,:) = 0.0
      vector.amp_max = 0.0
      vector.amp_min = 0.0
    end if

  end subroutine slisvg_slice_vector__initialize

  
  subroutine slisvg_slice_vector__finalize( vector )
    class(slisvg_slice_vector_t) <io> :: vector

    deallocate(vector.comp_u)
    deallocate(vector.comp_v)
    call vector.mesh.finalize
  end subroutine slisvg_slice_vector__finalize


  subroutine slisvg_slice_vector__set_val( vector, comp_u, comp_v )
    class(slisvg_slice_vector_t) <io> :: vector
    real, dimension(vector.mesh.vert.nu,  &
                    vector.mesh.vert.nv) <in> :: comp_u, comp_v

    real, dimension(vector.mesh.vert.nu,  &
                    vector.mesh.vert.nv) :: amp_vect

    vector.comp_u(:,:) = comp_u(:,:)
    vector.comp_v(:,:) = comp_v(:,:)
    amp_vect = sqrt(comp_u**2+comp_v**2)
    vector.amp_max = maxval(amp_vect)
    vector.amp_min = minval(amp_vect)
  end subroutine slisvg_slice_vector__set_val


  subroutine slisvg_slice_vector__vis_arrows( vector, slisvg_sketch,      &
                                                      arrow_template )
    class(slisvg_slice_vector_t) <io> :: vector
    type(slisvg_sketch_t) <io> :: slisvg_sketch
    char(len=*) <optin> :: arrow_template
    !!>
        o--o--o--o--o--o--o--o--o <== Original (=finest) grid
        |  |  |  |  |  |  |  |  |
        o-----o-----o-----o-----o <== Coarse grid (stride=2)
        |  |  |  |  |  |  |  |  |
        o-----------o-----------o <== Coarser grid (stride=4)
        |  |  |  |  |  |  |  |  |
        o-----------------------o <== Coarser2 grid (stride=8)
        |  |  |  |  |  |  |  |  |
        3  0  1  0  2  0  1  0  3 <====== "skip"    
    !!<
    integer :: i, j
    real :: u, v

    integer :: skip, stride
    char(len=11) :: tag_for_group
    logical, dimension(:,:), allocatable :: pass_to_sketch_flag

    allocate(pass_to_sketch_flag(vector.mesh.vert.nu,vector.mesh.vert.nv))

    pass_to_sketch_flag(:,:) = .false.

    do skip = 3, 0, -1
      stride = 2**skip
      write(tag_for_group,"(a,i1)") "arrow-skip", skip
        ! "arrow-skip4, arrow-skip3, ...
      call slisvg_sketch.group_push( id=trim(tag_for_group),  &
                                     visibility="visible" )
        do j = 1, vector.mesh.vert.nv, stride
          do i = 1, vector.mesh.vert.nu, stride
            if ( vector.mesh.vert.flag(i,j) == 'o' ) cycle
            if ( .not. pass_to_sketch_flag(i,j) ) then
              u = vector.mesh.vert.pos_u(i)
              v = vector.mesh.vert.pos_v(j)
              call slisvg_sketch.arrow( u, v, &
                                        vector.comp_u(i,j), &
                                        vector.comp_v(i,j), &
                                        arrow_template )
              pass_to_sketch_flag(i,j) = .true.
            end if
          end do
        end do
      call slisvg_sketch.group_pop()
    end do

    deallocate(pass_to_sketch_flag)
  end subroutine slisvg_slice_vector__vis_arrows

end module slisvg_slice_vector_m
