module vv_svglib_m
  use vv_color_m
  use ut_m
  use const_base_m
  implicit none
  private
  public :: vv_svglib__text_line
  public :: VV_SVGLIB__BSL
  public :: VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT

  real <const> :: VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT = 40.0

  type, public :: vv_svglib_t
    char(len=300) :: file_name
    real :: width, height
    integer :: file_unit
    integer :: indent_level
  contains
    procedure :: group_push => vv_svglib__group_push
    procedure :: group_pop => vv_svglib__group_pop
    procedure :: open => vv_svglib__open
    procedure :: close => vv_svglib__close
    procedure :: line => vv_svglib__line
    procedure :: arrow => vv_svglib__arrow
    procedure :: arrow_template => vv_svglib__arrow_template
    procedure :: text => vv_svglib__text
    procedure :: polygon => vv_svglib__polygon
    procedure :: path => vv_svglib__path
  end type vv_svglib_t



  interface vv_svglib__text_line
     module procedure text_line_str_i,                  &
                      text_line_str_str,                &
                      text_line_str_r,                  &
                      text_line_r1_comma_r2,            &
                      text_line_s1_r1_s2_r2,            &
                      text_line_str_r1_r2_r3_r4,        &
                      text_line_s1_r1_s2_r2_s3_r3_s4_r4
  end interface vv_svglib__text_line

  character <const> :: QUOTE = '"'
  character <const> :: SPACE = ' '
  character <const> :: COMMA = ','
  integer <const> :: VV_SVGLIB__BSL = 100  ! Basic text string length
                                           ! e.g., '<line = "... >'

contains


  subroutine assert( condition, lastwill )
    logical <in> :: condition
    char(len=*) <in> :: lastwill
    if ( .not. condition ) then
      print *, "__MODULE__: "//trim(lastwill)
      stop
    end if
  end subroutine assert


  function atan2_in_degree( y, x ) result(degree)
    real <in> :: y, x
    real :: degree

    real <const> :: RADIAN_TO_DEGREE = 180.0 / 3.14159265

    degree = atan2(y,x) * RADIAN_TO_DEGREE
  end function atan2_in_degree
  
  
  function text_line_str_r( string, r ) result(line)
    char(len=*) <in> :: string
    real <in> :: r  ! real value
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(r2s(r))//QUOTE
  end function text_line_str_r


  function text_line_r1_comma_r2( r1, r2 ) result(line)
    real <in> :: r1, r2  ! real value
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(r2s(r1)) // COMMA // SPACE // trim(r2s(r2))
  end function text_line_r1_comma_r2
  
  
  function text_line_str_str( string, str ) result(line)
    char(len=*) <in> :: string
    char(len=*) <in> :: str
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(str)//QUOTE
  end function text_line_str_str
  
  function text_line_s1_r1_s2_r2( s1, r1,   &
                                  s2, r2) result(line)
    char(len=*) <in> :: s1, s2
    real <in> :: r1, r2
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(s1)//QUOTE//trim(r2s(r1))//QUOTE   &
              //SPACE//trim(s2)//QUOTE//trim(r2s(r2))//QUOTE
  end function text_line_s1_r1_s2_r2

  
  function text_line_s1_r1_s2_r2_s3_r3_s4_r4( s1, r1,   &
                                              s2, r2,   &
                                              s3, r3,   &
                                              s4, r4 ) result(line)
    char(len=*) <in> :: s1, s2, s3, s4
    real <in> :: r1, r2, r3, r4
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(s1)//QUOTE//trim(r2s(r1))//QUOTE   &
              //SPACE//trim(s2)//QUOTE//trim(r2s(r2))//QUOTE   &
              //SPACE//trim(s3)//QUOTE//trim(r2s(r3))//QUOTE   &
              //SPACE//trim(s4)//QUOTE//trim(r2s(r4))//QUOTE
  end function text_line_s1_r1_s2_r2_s3_r3_s4_r4



  function text_line_str_r1_r2_r3_r4( string, r1, r2, r3, r4 ) result(line)
    char(len=*) <in> :: string
    real <in> :: r1, r2, r3, r4
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a)") trim(string)//QUOTE//trim(r2s(r1))   &
                                   //SPACE//trim(r2s(r2))   &
                                   //SPACE//trim(r2s(r3))   &
                                   //SPACE//trim(r2s(r4))   &
                                   //QUOTE
  end function text_line_str_r1_r2_r3_r4

  
  function text_line_str_i( string, val ) result(line)
    char(len=*) <in> :: string
    integer <in> :: val
    char(len=VV_SVGLIB__BSL) :: line

    write(line, "(a,a,i0,a)") trim(string), QUOTE, val, QUOTE
  end function text_line_str_i


  function get_date_and_time() result(string)
    ! copied from ut.ef
    char(len=8)  :: date   ! e.g., "20221126"
    char(len=10) :: time   ! "HHMMSS.sss"
    char(len=4)  :: year
    char(len=2)  :: month, day, hour, minute, second
    char(len=10) :: year_month_day     ! e.g., "2022.07.09"
    char(len=8)  :: hour_minute_second ! e.g., "16:56:00"
    char(len=19) :: string ! e.g., "2022.07.09/16:56:00"

    call date_and_time(date, time)

    year   = date(1:4)
    month  = date(5:6)
    day    = date(7:8)
    hour   = time(1:2)
    minute = time(3:4)
    second = time(5:6)

    year_month_day     = year // '.' // month // '.' // day
    hour_minute_second = hour // ':' // minute // ':' // second
    string = year_month_day // '/' // hour_minute_second
  end function get_date_and_time


  subroutine indent_pop( this )
    type(vv_svglib_t) <io> :: this

    if ( this.indent_level > 0 ) then
      this.indent_level -= 1
    else
      ! Something is wrong, but do nothing, anyway.
    end if
  end subroutine indent_pop


  subroutine indent_push( this )
    type(vv_svglib_t) <io> :: this

    this.indent_level += 1
  end subroutine indent_push


  subroutine write_footer( this )
    type(vv_svglib_t) <in> :: this

    call write_out( this, ' ' )
    call write_out( this, '</svg>' )
  end subroutine write_footer



  subroutine write_header( this, width, height )
    type(vv_svglib_t) <in> :: this
    real <in> :: width,  height

    char(len=*) <const> :: STR_XMLNS = 'xmlns="http://www.w3.org/2000/svg"'
    char(len=*) <const> :: STR_XMLNS2 = 'xmlns:xlink="http://www.w3.org/1999/xlink"'
    char(len=VV_SVGLIB__BSL) :: str_width,   &
                                str_height,  &
                                str_viewbox

    str_width   = vv_svglib__text_line( 'width=',  width )
    str_height  = vv_svglib__text_line( 'height=', height )
    str_viewbox = vv_svglib__text_line( 'viewBox=', 0.0, 0.0, width, height )

    call write_decorated_comment( this, 'SVG Generated by VV_SVGLIB on '  &
                                         // get_date_and_time() )
    call write_out( this, '<svg ' // STR_XMLNS          &
                         // SPACE // STR_XMLNS2         &
                         // SPACE // trim(str_width)    &
                         // SPACE // trim(str_height)   &
                         // SPACE // trim(str_viewbox)  &
                         // SPACE // '>' )
  end subroutine write_header



  subroutine write_a_comment( this, message )
    type(vv_svglib_t) <in> :: this
    char(len=*) <in> :: message
    call write_out( this, '<!-- ' // trim(adjustl(message)) // ' -->' )
  end subroutine write_a_comment  


  subroutine write_a_blank_line( this )
    type(vv_svglib_t) <in> :: this
    call write_out( this, '' )
  end subroutine write_a_blank_line  


  subroutine write_decorated_comment( this, message )
    type(vv_svglib_t) <in> :: this
    char(len=*) <in> :: message
    !!>
        e.g., 
                <!-- ============ -->
                <!-- Comment text -->
                <!-- ============ -->       
    !!<
    char(len=VV_SVGLIB__BSL) :: str_deco
    str_deco = repeat('=', len_trim(adjustl(message)))
    call write_a_comment( this, str_deco )
    call write_a_comment( this, message )
    call write_a_comment( this, str_deco )
  end subroutine write_decorated_comment


  function r2s( val ) result(str)
    ! real to string
    real <in> :: val
    char(len=100) :: str

    write(str,"(f0.2)") val
  end function r2s


  subroutine string_concatenate( n, str_array, str_concat )
    integer <in> :: n
    char(len=*), dimension(:) <in> :: str_array
    char(len=*) <out> :: str_concat

    integer :: i

    str_concat = ''
    do i = 1, n
      str_concat = trim(str_concat) // SPACE // trim(str_array(i))
    end do
  end subroutine string_concatenate
      

  subroutine write_out( this, line )
    type(vv_svglib_t) <in> :: this
    char(len=*) <in> :: line

    integer <const> :: NUM_SPACES_PER_INDENT = 2
    integer :: num_spaces
    char(len=*) <const> :: BLANK_LINE = '                                         '

    num_spaces = this.indent_level*NUM_SPACES_PER_INDENT

    write(this.file_unit, *) BLANK_LINE(1:num_spaces)//trim(adjustl(line))
  end subroutine write_out


  subroutine vv_svglib__arrow_template( this )
    class(vv_svglib_t) <io> :: this

    real <const> :: ARROW_LINE_WIDTH_PIXEL_FOR_UNIT_VECT  &
                    = VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT / 10.0
                       ! ratio of the arrow trunk and arrow head triangle

    real :: scale = VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT / 4
                       ! see the fibure below
    !!>
            VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT
                 \                           /
                  \                         /
                   |<--------------------->|
                   .                       .
                   .                       .
                   .                 S     .
                   .                 * *   .
                   .                 *   * .
                   P  *  *  *  *  *  Q  *  R
                   .     .     .     *   * .
                   .     .     .     * *   .
                   .     .     .     T     .
                   .     .     .     .     .
        -----------+-----+-----+-----+-----+-----+---
                   .     .     0     .     .     
                   .     .           .     .     
               -2*scale  .           .  2*scale  
                     -1*scale      scale         
    !!<  
    real :: px, py, qx, qy, rx, ry, sx, sy, tx, ty

    integer :: nop  ! number of options
    integer <const> :: MAX_NOP = 20
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all

    px = -2.0*scale
    py = 0.0
    qx = scale
    qy = 0.0
    rx = 2.0*scale
    ry = 0.0
    sx = scale
    sy = -scale*0.5
    tx = scale
    ty = scale*0.5

    call iWrite_template01
    call iWrite_template02

  contains

    subroutine iWrite_template01
      call write_a_blank_line( this )
      call write_a_comment( this, '<Arrow Template 01>' )
      call write_out( this, '<defs>' )
        call indent_push( this )
          call write_out( this, '<g id="arrow-template01" transform="scale(1.0)">' )
            call indent_push( this )
              str(1) = '<line'
              str(2) = vv_svglib__text_line( 'x1=', px,  &
                                             'y1=', py,  &
                                             'x2=', qx,  &
                                             'y2=', qy )
              str(3) = vv_svglib__text_line( 'stroke-width=',  &
                                             ARROW_LINE_WIDTH_PIXEL_FOR_UNIT_VECT )
              str(4) = '/>'
              nop = 4
              call string_concatenate( nop, str, str_all )
              call write_out( this, str_all )
              str_all = '<polygon points=' // QUOTE // trim(r2s(rx))  &
                                           // COMMA // trim(r2s(ry))  &
                                           // SPACE // trim(r2s(sx))  &
                                           // COMMA // trim(r2s(sy))  &
                                           // SPACE // trim(r2s(tx))  &
                                           // COMMA // trim(r2s(ty))  &
                                           // QUOTE // ' />'
              call write_out( this, str_all )
            call indent_pop( this )
          call write_out( this, '</g>' )
        call indent_pop( this )
      call write_out( this, '</defs>' )
    end subroutine iWrite_template01

    subroutine iWrite_template02
      call write_a_blank_line( this )
      call write_a_comment( this, '<Arrow Template 02 (Animation)>' )
      call write_out( this, '<defs>' )
        call indent_push( this )
          str_all = '<path id="animated-arrow-shaft"'        &
                      // ' d="M ' // trim(r2s(px)) // COMMA  &
                                  // trim(r2s(py)) // SPACE  &
                         // ' L ' // trim(r2s(rx)) // COMMA  &
                                  // trim(r2s(ry)) // '"'    &
                                  // ' stroke="#aaaaaa"'     & ! gray
                                  // ' /> '
          call write_out( this, str_all )
          str_all = '<g id="arrow-template02" transform="scale(1.0)">'
          call write_out( this, str_all )
            call indent_push( this )
              str_all = '<use xlink:href="#animated-arrow-shaft"/>'
              call write_out( this, str_all )
              str_all = '<path d="M' // trim(r2s(sx)) // COMMA  &
                                     // trim(r2s(sy)) // SPACE  &
                                     // trim(r2s(tx)) // COMMA  &
                                     // trim(r2s(ty)) // SPACE  &
                                     // trim(r2s(rx)) // COMMA  &
                                     // trim(r2s(ry)) // 'z">'
              call write_out( this, str_all )
              call indent_push( this )
                str_all = '<animateMotion dur="2s"'  &
                                  // ' rotate="auto"'  &
                                  // ' repeatCount="indefinite"'  &
                                  // ' >'
                call write_out( this, str_all )
                call indent_push( this )
                  str_all = '<mpath xlink:href="#animated-arrow-shaft"/>'
                  call write_out( this, str_all )
                call indent_pop( this )
                str_all = '</animateMotion>'
                call write_out( this, str_all )
              call indent_pop( this )
              str_all = '</path>'
              call write_out( this, str_all )
            call indent_pop( this )
          call write_out( this, '</g>' )
        call indent_pop( this )
      call write_out( this, '</defs>' )
    end subroutine iWrite_template02
  end subroutine vv_svglib__arrow_template


  subroutine vv_svglib__arrow( this, x, y, vx, vy )
    class(vv_svglib_t) <io> :: this
    real <in> :: x, y, vx, vy

    real <const> :: TOO_SMALL = 1.e-10  ! a tiny value.
    real :: vector_amp, vx_norm, vy_norm
    real :: amp_factor, angle_from_x_axis

    integer :: nop  ! number of options
    integer <const> :: MAX_NOP = 20
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all

    vector_amp = sqrt(vx**2+vy**2)
    if ( vector_amp < TOO_SMALL ) return

    vx_norm = vx / vector_amp
    vy_norm = vy / vector_amp

    angle_from_x_axis = atan2_in_degree( vy, vx )

    amp_factor = vector_amp / VV_SVGLIB__ARROW_LENGTH_PIXEL_FOR_UNIT_VECT

    str(1) = '<use xlink:href="#arrow-template01"' // SPACE
    str(2) = 'transform=' // QUOTE // 'rotate('
    str(3) = trim(r2s(angle_from_x_axis)) // COMMA  &
             // trim(r2s(x)) // COMMA  &
             // trim(r2s(y))  &
             // ')' // COMMA // SPACE
    str(4) = 'translate' &
             // '(' // trim(r2s(x)) // COMMA  &
                    // trim(r2s(y))   &
             // ')' // COMMA // SPACE
    str(5) = 'scale(' // trim(r2s(amp_factor)) // ')' // QUOTE // ' />'
    nop = 5
    call string_concatenate( nop, str, str_all )
    call write_out( this, str_all )

  end subroutine vv_svglib__arrow  


  subroutine vv_svglib__close( this )
    class(vv_svglib_t) <in> :: this

    call write_footer( this )
    close( this.file_unit )
  end subroutine vv_svglib__close


  subroutine vv_svglib__group_push( this, attribute )
    class(vv_svglib_t) <io> :: this
    char(len=*) <in> :: attribute

    char(len=VV_SVGLIB__BSL) :: str

    str = '<g' // SPACE // trim(attribute) // ' >'
    call write_out( this, str )
    call indent_push( this )
  end subroutine vv_svglib__group_push


  subroutine vv_svglib__group_pop( this )
    class(vv_svglib_t) <io> :: this

    call indent_pop( this )
    call write_out( this, '</g>' )
  end subroutine vv_svglib__group_pop


  subroutine vv_svglib__line( this,          &
                              x1, y1,        &
                              x2, y2,        &
                              width,         &
                              color,         &
                              marker_start,  &
                              marker_end )
    class(vv_svglib_t) <in> :: this

    real <in> :: x1, y1, x2, y2
    real <optin> :: width
    char(len=*) <optin> :: color
    char(len=*) <optin> :: marker_start, marker_end

    integer :: n, nopt  ! number of options
    integer <const> :: MAX_NOP = 10
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all
    integer :: unit

    unit = this.file_unit

    !!>
         <line x1="40" y1="220" x2="41" y2="219.9" 
          stroke="none" stroke-width="1" 
          marker-end="url(#arrow-blue)" />  
    !!<          

    str(1) = vv_svglib__text_line( 'x1=', x1,  &
                                   'y1=', y1,  &
                                   'x2=', x2,  &
                                   'y2=', y2 )
    nopt = 1

    if ( present( width) ) then
      nopt += 1
      str(nopt) = vv_svglib__text_line( 'stroke-width=', width )
    end if

    if ( present( color) ) then
      nopt += 1
      str(nopt) = 'stroke=' // QUOTE // trim(color) // QUOTE
    end if

    if ( present(marker_start) ) then
      nopt += 1
      str(nopt) = 'marker-start=' // QUOTE               &
                                  // 'url(#'             &
                                  // trim(marker_start)  &
                                  // ')'                 &
                                  // QUOTE 
    end if

    if ( present(marker_end) ) then
      nopt += 1
      str(nopt) = 'marker-end=' // QUOTE               &
                                // 'url(#'             &
                                // trim(marker_end)    &
                                // ')'                 &
                                // QUOTE 
    end if

    str_all = ''
    do n = 1, nopt
      str_all = trim(str_all) // SPACE // str(n)
    end do

    call write_out( this, '<line ' // trim(str_all) // '/>' )

  end subroutine vv_svglib__line


  subroutine vv_svglib__open( this, file_name, width, height )
    class(vv_svglib_t) <io> :: this
    char(len=*) <in> :: file_name
    real <in> :: width, height

    this.file_name = trim(file_name)
    this.indent_level = 0

    open(newunit=this.file_unit,file=trim(file_name),     &
                                     action="readwrite",  &
                                     status="unknown" ) 
    this.width = width
    this.height = height
    call write_header( this, this.width, this.height )
  end subroutine vv_svglib__open


  subroutine vv_svglib__text( this,                &
                              x, y,                &
                              string,              &
                              font_size_in_pixel,  &
                              color,               &
                              text_anchor,         &
                              stroke_width )
    class(vv_svglib_t) <io> :: this
    real <in> :: x, y
    char(len=*) <in> :: string
    real <in> :: font_size_in_pixel
    char(len=*) <optin> :: color
    char(len=*) <optin> :: text_anchor
    real <optin> :: stroke_width

    integer :: nopt   ! number of options
    integer <const> :: MAX_NOP = 10  ! max
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all

    str(1) = vv_svglib__text_line( 'x=', x, 'y=', y )
    str(2) = vv_svglib__text_line( 'font-size=',       &
                                   font_size_in_pixel )
    nopt = 2

    if ( present(color) ) then
      nopt += 1
      str(nopt) = 'fill=' // QUOTE // trim(color) // QUOTE
    end if

    if ( present(text_anchor) ) then
      nopt += 1
      str(nopt) = 'text-anchor=' // QUOTE // trim(text_anchor) // QUOTE
    end if

    call string_concatenate( nopt, str, str_all )

    call write_out( this, '<text' // trim(str_all) // '>' )
      call indent_push( this )
        call write_out( this, string )
      call indent_pop( this )
    call write_out( this, '</text>' )

  end subroutine vv_svglib__text


  subroutine vv_svglib__polygon( this,         &
                                 nverts,       &
                                 verts_x,      &
                                 verts_y,      &
                                 line_width,   &
                                 line_color,   &
                                 fill_color )
    class(vv_svglib_t) <io> :: this
    integer <in> :: nverts
    real, dimension(nverts) :: verts_x
    real, dimension(nverts) :: verts_y 
    real <in> :: line_width
    char(len=*) <optin> :: line_color
    char(len=*) <optin> :: fill_color

    integer :: n, nopt   ! number of options
    integer <const> :: MAX_NOP = 10  ! max
    char(len=VV_SVGLIB__BSL) :: str_coords
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all

    str(1) = '<polygon' 
    str(2) = vv_svglib__text_line( 'stroke-width=', line_width )
    nopt = 2

    if ( present(line_color) ) then
      nopt += 1
      str(nopt) = vv_svglib__text_line( 'stroke=', line_color )
    end if

    if ( present(fill_color) ) then
      nopt += 1
      str(nopt) = vv_svglib__text_line( 'fill=', fill_color )
    end if

    nopt += 1
    str(nopt) = 'points=' // QUOTE

    call string_concatenate( nopt, str, str_all )

    call write_out( this, trim(adjustl(str_all)) )
      call indent_push( this )
       do n = 1, nverts
          str_coords = vv_svglib__text_line( verts_x(n), verts_y(n) )
          call write_out( this, str_coords )
        end do
      call indent_pop( this )
    call write_out( this, QUOTE // '/>' )

  end subroutine vv_svglib__polygon


  subroutine vv_svglib__path( this,            &
                              nverts,          &
                              path_directive,  &
                              verts_x,         &
                              verts_y,         &
                              line_width,      &
                              line_color,      &
                              fill_color )
    class(vv_svglib_t) <io> :: this
    integer <in> :: nverts
    character, dimension(nverts) <in> :: path_directive 
    real, dimension(nverts) <in> :: verts_x
    real, dimension(nverts) <in> :: verts_y 
    real <in> :: line_width
    char(len=*) <optin> :: line_color
    char(len=*) <optin> :: fill_color

    integer :: n, nopt   ! number of options
    integer <const> :: MAX_NOP = 10  ! max
    char(len=VV_SVGLIB__BSL) :: str_coords
    char(len=VV_SVGLIB__BSL), dimension(MAX_NOP) :: str
    char(len=VV_SVGLIB__BSL*MAX_NOP) :: str_all
    character :: directive

    str(1) = '<path' 
    str(2) = vv_svglib__text_line( 'stroke-width=', line_width )
    nopt = 2

    if ( present(line_color) ) then
      nopt += 1
      str(nopt) = vv_svglib__text_line( 'stroke=', line_color )
    end if

    if ( present(fill_color) ) then
      nopt += 1
      str(nopt) = vv_svglib__text_line( 'fill=', fill_color )
    end if

    nopt += 1
    str(nopt) = 'd=' // QUOTE

    call string_concatenate( nopt, str, str_all )
    
    call write_out( this, trim(adjustl(str_all)) )
      call indent_push( this )
        do n = 1, nverts
          directive = path_directive(n)
          select case (directive)
            case ('M','L') ! M(move) to , L(line) to.
              call write_out( this, directive )
              str_coords = vv_svglib__text_line( verts_x(n), verts_y(n) )
              call write_out( this, str_coords )
            case (' ')  ! You can omit directive after 1st 'L'.
              ! Omit the directive letter
              str_coords = vv_svglib__text_line( verts_x(n), verts_y(n) )
              call write_out( this, str_coords )
            case ('Z')  ! Close path
              call write_out( this, directive )
              ! No need to write coords
            case default
              call ut__fatal( "__MODULE__(__LINE__): case error." )
          end select
        end do
      call indent_pop( this )
    call write_out( this, QUOTE // '/>' )

  end subroutine vv_svglib__path 

end module vv_svglib_m
