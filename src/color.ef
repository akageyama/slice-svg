module color_m
  use ut_m
  implicit none
  private
  public :: COLOR__CONST
  public :: color__norm_real_to_color_code


  type, public :: color_t ! basic color type
    real :: r, g, b       ! float 0.0 to 1.0
  contains
    procedure :: to_code => color__to_code
    procedure :: to_byte => color__to_byte
  end type color_t

  type, public :: color__byte_t 
    integer :: r, g, b   ! 0 to 255
  end type color__byte_t

  type, public :: color__hsv_t
    real :: hue, sat, val
  contains
    procedure :: to_rgb => color__hsv__to_rgb
  end type color__hsv_t

  type, public :: color__const_t
    type(color_t) :: white   = color_t(1.0, 1.0, 1.0)
    type(color_t) :: black   = color_t(0.0, 0.0, 0.0)
    type(color_t) :: red     = color_t(1.0, 0.0, 0.0)
    type(color_t) :: green   = color_t(0.0, 1.0, 0.0)
    type(color_t) :: blue    = color_t(0.0, 0.0, 1.0)
    type(color_t) :: magenta = color_t(1.0, 0.0, 1.0)
    type(color_t) :: yellow  = color_t(1.0, 1.0, 0.0)
    type(color_t) :: cyan    = color_t(0.0, 1.0, 1.0)
  contains
    procedure :: gray => color_const__gray
    procedure, pass :: test_print => color__const__test_print
  end type color__const_t

  type(color__const_t), protected :: COLOR__CONST


contains


  function color__hsv__to_rgb( this ) result(rgb)
    class(color__hsv_t) <in> :: this

    type(color_t) :: rgb
    !!>
        Copied from VFIVE.
    !!<
    integer :: hue_
    real :: local_, diff_, m, n, k;

    local_ = this.hue * 360.0;
    local_ = mod(local_,360.0)
    local_ = local_ - 360.0;
    local_ = local_ / 60.0;
    hue_ = int(local_);
    diff_ = local_ - hue_;
    m = this.val * (1.0 - this.sat);
    n = this.val * (1.0 - this.sat * diff_);
    k = this.val * (1.0 - this.sat * (1.0 - diff_));

    select case (hue_) 
      case (0)
        rgb.r = this.val
        rgb.g = k
        rgb.b = m
      case (1)
        rgb.r = n
        rgb.g = this.val
        rgb.b = m
      case (2)
        rgb.r = m
        rgb.g = this.val
        rgb.b = k
      case (3)
        rgb.r = m
        rgb.g = n
        rgb.b = this.val
      case (4)
        rgb.r = k
        rgb.g = m
        rgb.b = this.val
      case (5)
        rgb.r = this.val
        rgb.g = m
        rgb.b = n
    end select
  end function color__hsv__to_rgb


  function color__norm_real_to_color_code( value ) result(code)
    real <in> :: value
    char(len=7) :: code ! '#FFFFFF' for white

    type(color__hsv_t) :: hsv
    type(color_t) :: rgb

    call ut__assert( value >= 0.0 .and. value <= 1.0,  &
                    'Normalized value out of range.' )

    hsv.hue = 0.7 * value
    hsv.sat = 1.0
    hsv.val = 1.0

   rgb = hsv.to_rgb()
   code = rgb.to_code()
  end function color__norm_real_to_color_code


  subroutine color__const__test_print( this )
    class(color__const_t) <in> :: this

    type(color_t) :: gray_0p5, gray_0p8

    call ut__message( '===<COLOR__CONST available color list>===' )
    call iPrint( '        white', COLOR__CONST.white   )
    call iPrint( '        black', COLOR__CONST.black   )
    call iPrint( '          red', COLOR__CONST.red     )
    call iPrint( '        green', COLOR__CONST.green   )
    call iPrint( '         blue', COLOR__CONST.blue    )
    call iPrint( '      magenta', COLOR__CONST.magenta )
    call iPrint( '       yellow', COLOR__CONST.yellow  )
    call iPrint( '         cyan', COLOR__CONST.cyan    )

    gray_0p5 = COLOR__CONST.gray( 0.5 )
    gray_0p8 = COLOR__CONST.gray( 0.8 )

    call iPrint( '    gray(0.5)', gray_0p5 )
    call iPrint( '    gray(0.8)', gray_0p8 )
    call ut__message( '===</COLOR__CONST available color list>===' )


  contains

    subroutine iPrint( message, col )
      char(len=*) <in> :: message
      type(color_t) <in> :: col

      char(len=7) :: code

      code = col.to_code()
      call ut__message( trim(message) // ' (' // code // ')' )
    end subroutine iPrint        

  end subroutine color__const__test_print


  function color_const__gray( this, whiteness ) result(gray)
    class(color__const_t) <in> :: this
    real <in> :: whiteness
    type(color_t) :: gray

    real :: w
    w = max(0.0, whiteness)
    w = min(1.0, w)
    gray = color_t(w, w, w)
  end function color_const__gray


  function color__to_code( rgb ) result(code) 
    class(color_t) <in> :: rgb ! e.g., rgb=(1.0, 0.0, 0.0)
    char(len=7) :: code        !          ==> '#FF0000'

    type(color__byte_t) :: byte

    byte = rgb.to_byte()

    write(code,"('#'3(Z2.2))") byte.r, byte.g, byte.b
  end function color__to_code


  function color__to_byte( rgb ) result(rgb_byte)
    class(color_t) <in> :: rgb     ! e.g., rgb=(1.0, 0.0, 0.0)
    type(color__byte_t) :: rgb_byte !            ==>(255, 0, 0)

    integer :: r, g, b

    r = nint(255*rgb.r)
    g = nint(255*rgb.g)
    b = nint(255*rgb.b)    
    rgb_byte = color__byte_t(r,g,b)
  end function color__to_byte

end module color_m