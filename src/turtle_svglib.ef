module turtle_svglib_m
  use const_base_m
  use ut_m
  implicit none
  private

  integer, parameter :: FILE_UNIT_RESERVED_FOR_THIS_LIB_MIN = 9000
  integer, parameter :: FILE_UNIT_RESERVED_FOR_THIS_LIB_MAX = 9999

  char(len=7), dimension(FILE_UNIT_RESERVED_FOR_THIS_LIB_MIN:  &
                         FILE_UNIT_RESERVED_FOR_THIS_LIB_MAX) :: File_unit_used_list = 'nonused'

  type, public :: turtle_svglib_fig_t
    char(len=300) :: file_name
    integer :: width, height
    integer :: file_unit
  contains
    procedure :: open => turtle_svglib__open
    procedure :: close => turtle_svglib__close
  end type turtle_svglib_fig_t

contains

  function file_unit_used_list_get_new_unit() result(unit)
    integer :: unit

    integer :: u
    do u = FILE_UNIT_RESERVED_FOR_THIS_LIB_MIN, FILE_UNIT_RESERVED_FOR_THIS_LIB_MAX
!debugp u
      if ( File_unit_used_list(u) == 'nonused' ) then
        unit = u
        File_unit_used_list(u) = 'used'
!debugp File_unit_used_list(unit)        
        return
      end if
    end do

    print *, '__MODFUNC__: Out of file_unit number.'
    stop
  end function file_unit_used_list_get_new_unit


  subroutine file_unit_used_list_turn_to_nonused( unit )
    integer <in> :: unit

    if ( File_unit_used_list(unit) == "nonused" ) then
!unit unit
!debugp File_unit_used_list(unit)
      print *, '__MODFUNC__: Trying to close non-open unit?'
      stop
    end if

    File_unit_used_list(unit) = 'nonused'
  end subroutine file_unit_used_list_turn_to_nonused


  subroutine file_close( unit )
    integer <in> :: unit
    call file_unit_used_list_turn_to_nonused( unit )
    close(unit)
  end subroutine file_close


  subroutine file_open( unit, file_name )
    integer <out> :: unit
    char(len=*) <in> :: file_name
!debugp file_name    
    unit = file_unit_used_list_get_new_unit()
    open(unit=unit, file=trim(file_name), action="readwrite", status="unknown")
!debugp unit    
  end subroutine file_open


  subroutine print_footer( unit )
    integer <in> :: unit
    write(unit, *) ' '
    write(unit, *) '</svg>'
  end subroutine print_footer


  subroutine print_header( unit, width, height )
    integer <in> :: unit, width,  height

    char(len=*), parameter :: STR_XMLNS = 'xmlns="http://www.w3.org/2000/svg"'
    char(len=100) :: str_width, str_height, str_viewbox

    write(str_width, "(a, i0, a)") 'width="', width, '"'
    write(str_height, "(a, i0, a)") 'height="', height, '"'
    write(str_viewbox, "(a, i0, 1x, i0, 1x, i0, 1x, i0, a)") 'viewBox="', 0, 0, width, height, '"'

    write(unit, *) '<svg '//STR_XMLNS//' '//trim(str_width)//' '//trim(str_height)//' '//trim(str_viewbox)
    write(unit, *) '<!--'
    write(unit, *) '   SVG file generated by __MODULE__'
    write(unit, *) '                      on '//ut__date_and_time()
    write(unit, *) '-->'
    write(unit, *) ''    
  end subroutine print_header



  subroutine turtle_svglib__close( this )
    class(turtle_svglib_fig_t) <in> :: this

!debugp this.file_unit
    call print_footer( this.file_unit )
    call file_close( this.file_unit )

  end subroutine turtle_svglib__close


  subroutine turtle_svglib__open( this, file_name, width, height )
    class(turtle_svglib_fig_t) <io> :: this
    char(len=*) <in> :: file_name
    integer <optin> :: width, height

    this.file_name = trim(file_name)

    call file_open( this.file_unit, trim(file_name) ) 
    call iSet_width_and_height
    call print_header( this.file_unit, this.width, this.height )
    call print_footer( this.file_unit )
    call file_close( this.file_unit )

  contains

    subroutine iSet_width_and_height
      if ( present(width) ) then
        this.width = width
      else
        this.width = 480 ! default value
      end if
  
      if ( present(height) ) then
        this.height = height
      else
        this.height = 640 ! default value
      end if
    end subroutine iSet_width_and_height

  end subroutine turtle_svglib__open

end module turtle_svglib_m